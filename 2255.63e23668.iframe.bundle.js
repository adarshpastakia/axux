/*! For license information please see 2255.63e23668.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkaxux=self.webpackChunkaxux||[]).push([[2255],{"./node_modules/@stencil/core/internal/client lazy recursive ^\\.\\/.*\\.entry\\.js.*$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./node_modules/@stencil/core/internal/client lazy recursive ^\\.\\/.*\\.entry\\.js.*$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$",module.exports=webpackEmptyAsyncContext},"./packages/map/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Yh:()=>AxMap});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),GeoJSONLayer=__webpack_require__("./node_modules/@arcgis/core/layers/GeoJSONLayer.js"),HeatmapRenderer=__webpack_require__("./node_modules/@arcgis/core/renderers/HeatmapRenderer.js"),SpatialReference=__webpack_require__("./node_modules/@arcgis/core/geometry/SpatialReference.js"),TileInfo=__webpack_require__("./node_modules/@arcgis/core/layers/support/TileInfo.js"),core_Map=__webpack_require__("./node_modules/@arcgis/core/Map.js"),MapView=__webpack_require__("./node_modules/@arcgis/core/views/MapView.js");const DEFAULT_VIEWPORT={center:[54.47509919867679,24.413736135087568],zoom:9},DefaultViewProps={constraints:{minZoom:3,maxZoom:24,rotationEnabled:!1},navigation:{mouseWheelZoomEnabled:!1},popup:{autoCloseEnabled:!0,dockEnabled:!1,dockOptions:{breakpoint:!1,position:"top-right",buttonEnabled:!1},defaultPopupTemplateEnabled:!0},ui:{padding:{left:15,top:15,right:15,bottom:15},components:[]},resizeAlign:"center"},ICON_MARKER="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z";var projection=__webpack_require__("./node_modules/@arcgis/core/geometry/projection.js");const useProjection=()=>({getGeometry:(0,react.useCallback)((async geometry=>await Promise.resolve().then((async()=>{if(projection&&!projection.isLoaded())return await projection.load()})).then((()=>{if(projection)return projection.project(geometry,{wkid:4326})}))),[])});__webpack_require__("./node_modules/@arcgis/core/config.js"),__webpack_require__("./node_modules/ngeohash/main.js");var dist=__webpack_require__("./packages/utilities/dist/index.js");const convertLatLng=lonLat=>{if((0,dist.isArray)(lonLat)&&2===lonLat.length||(0,dist.isArray)(lonLat)&&3===lonLat.length)return[Number(lonLat[0]),Number(lonLat[1])];if((0,dist.isObject)(lonLat))return"longitude"in lonLat?[lonLat.longitude,lonLat.latitude]:["lon"in lonLat?lonLat.lon:lonLat.lng,lonLat.lat];if((0,dist.isString)(lonLat)){const[lat,lon]=lonLat.split(",");return[+lon,+lat]}throw Error("Invalid geo cooredinates")},convertToDMS=(coord,isLat=!1)=>{const degree=Math.floor(coord),hour=60*(coord-degree),minute=60*(hour-Math.floor(hour));return`${degree}Ëš${Math.floor(hour)}'${minute.toFixed(2)}"${coord<0?isLat?"S":"W":isLat?"N":"E"}`};var Basemap=__webpack_require__("./node_modules/@arcgis/core/Basemap.js"),VectorTileLayer=__webpack_require__("./node_modules/@arcgis/core/layers/VectorTileLayer.js"),WebTileLayer=__webpack_require__("./node_modules/@arcgis/core/layers/WebTileLayer.js");const makeBasemap=({id,title,type,thumb,url})=>{let layer;if((0,dist.isEmpty)(url))throw Error(`Map source [${id}] url not provided`);return"raster"===type&&(layer=new WebTileLayer.default({urlTemplate:url})),"vector"===type&&(layer=new VectorTileLayer.default({url})),new Basemap.default({baseLayers:[layer],thumbnailUrl:thumb,id:`base:${id}`,title})},makeFeatures=events=>({type:"FeatureCollection",features:events.map((({location,...rest})=>({type:"Feature",geometry:{type:"Point",coordinates:[...convertLatLng(location),0]},properties:{location:convertLatLng(location).toString(),...rest}})))}),colorArray=(color,opacity=.5)=>{const[r,g,b]=color.match(/(\w\w)/g)??["0","0","0"];return[parseInt(r,16),parseInt(g,16),parseInt(b,16)]},transparentize=(color,opacity=.5)=>{const[r,g,b]=color.match(/(\w\w)/g)??["0","0","0"];return`rgba(${parseInt(r,16)}, ${parseInt(g,16)}, ${parseInt(b,16)}, ${opacity})`},MapContext=(0,react.createContext)({}),useMapContext=()=>(0,react.useContext)(MapContext),MapProvider=({defaultViewport,onLoading,minZoom,maxZoom,sources,defaultSource,children,mapRef})=>{const refContainer=(0,react.useRef)(null),[,startTransition]=(0,react.useTransition)(),{getGeometry}=useProjection(),[map,setMap]=(0,react.useState)(),[view,setView]=(0,react.useState)(),[basemaps,setBasemaps]=(0,react.useState)(new Map),[viewport,setViewport]=(0,react.useState)(DEFAULT_VIEWPORT);return(0,react.useLayoutEffect)((()=>{defaultViewport&&setViewport(defaultViewport)}),[defaultViewport]),(0,react.useImperativeHandle)(mapRef,(()=>({exportMap:async()=>{if(view){const extent=await getGeometry(view.extent).then((extent=>{let infoText="";return extent&&(infoText+=convertToDMS(extent.ymin,!0)+", ",infoText+=convertToDMS(extent.xmin)+" - ",infoText+=convertToDMS(extent.ymax,!0)+", ",infoText+=convertToDMS(extent.xmax)),infoText})),{dataUrl:image}=await view.takeScreenshot({ignorePadding:!0,width:1572,height:864,format:"jpg"});return{image,extent}}return{image:"",extent:""}}})),[view]),(0,react.useEffect)((()=>{if(!(sources?.length>0))throw Error("Map sources not provided");const basemaps=new Map(sources.map((source=>[source.id,makeBasemap(source)])));let defaultBasemap;defaultBasemap=basemaps.has(defaultSource)?basemaps.get(defaultSource):basemaps.get(sources[0].id);const map=new core_Map.Z({basemap:defaultBasemap}),viewProps=DefaultViewProps;viewProps.constraints.lods=TileInfo.Z.create({spatialReference:new SpatialReference.Z({wkid:4326})}).lods;const view=new MapView.Z({map,container:refContainer.current,...viewProps});return view.when((()=>{view.on("key-down",(evt=>{"Shift"!==evt.key||evt.repeat||(view.navigation.mouseWheelZoomEnabled=!0)})),view.on("key-up",(evt=>{"Shift"===evt.key&&(view.navigation.mouseWheelZoomEnabled=!1)})),view.focus()})),view.watch("updating",(()=>{onLoading?.(view.updating)})),startTransition((()=>{setBasemaps(basemaps),setView(view),setMap(map)})),()=>{map.destroy()}}),[sources,defaultSource]),(0,jsx_runtime.jsx)(MapContext.Provider,{value:{viewport,map,view,basemaps,defaultViewport:defaultViewport??DEFAULT_VIEWPORT},children:(0,jsx_runtime.jsxs)("div",{className:"mapviewer",children:[(0,jsx_runtime.jsx)("div",{ref:refContainer,className:"mapviewer__container"}),map&&view&&children]})})};MapProvider.displayName="Map.Provider";try{MapProvider.displayName="Map.Provider",MapProvider.__docgenInfo={description:"",displayName:"Map.Provider",props:{sources:{defaultValue:null,description:"",name:"sources",required:!0,type:{name:"MapSource[]"}},defaultSource:{defaultValue:null,description:"",name:"defaultSource",required:!0,type:{name:"string"}},mapRef:{defaultValue:null,description:"",name:"mapRef",required:!1,type:{name:"RefObject<{ exportMap: () => Promise<{ image: string; extent: AnyObject; }>; }>"}},minZoom:{defaultValue:null,description:"",name:"minZoom",required:!1,type:{name:"number"}},maxZoom:{defaultValue:null,description:"",name:"maxZoom",required:!1,type:{name:"number"}},defaultViewport:{defaultValue:null,description:"",name:"defaultViewport",required:!1,type:{name:"MapViewport"}},onLoading:{defaultValue:null,description:"",name:"onLoading",required:!1,type:{name:"((isLoading: boolean) => void)"}},onViewportChange:{defaultValue:null,description:"",name:"onViewportChange",required:!1,type:{name:"((viewport: MapViewport) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/context/MapContext.tsx#Map.Provider"]={docgenInfo:Map.Provider.__docgenInfo,name:"Map.Provider",path:"packages/map/src/context/MapContext.tsx#Map.Provider"})}catch(__react_docgen_typescript_loader_error){}const CompareLayer=({events,color="#b91c1c",compareEvents,countField,compareCountField,compareColor="#047857"})=>{const{map,view}=useMapContext(),refWidget=(0,react.useRef)(null),refLayer=(0,react.useRef)(),refCompareLayer=(0,react.useRef)(),[compareOpacity,setCompareOpacity]=(0,react.useState)(.5),createLayer=(0,react.useCallback)(((events,color,field,compare=!1)=>{const blob=new Blob([JSON.stringify(makeFeatures(events))],{type:"application/json"}),url=URL.createObjectURL(blob);return{url,layer:new GeoJSONLayer.default({url,blendMode:compare?"multiply":"normal",popupEnabled:!1,listMode:"hide",visible:!0,opacity:.75,renderer:new HeatmapRenderer.Z({field,colorStops:[{ratio:0,color:"rgba(0,0,0,0)"},{ratio:1,color}],minDensity:0,maxDensity:.25,radius:12})})}}),[]);return(0,react.useEffect)((()=>{if(map&&view&&events){const{url,layer}=createLayer(events,color,countField);return map.add(layer),refLayer.current=layer,()=>{URL.revokeObjectURL(url),map?.remove(layer)}}}),[events]),(0,react.useEffect)((()=>{if(map&&view&&compareEvents){const{url,layer}=createLayer(compareEvents,compareColor,compareCountField,!0);return map.add(layer),refCompareLayer.current=layer,()=>{URL.revokeObjectURL(url),map?.remove(layer)}}}),[compareEvents]),(0,react.useEffect)((()=>{setCompareOpacity(.5)}),[events,compareEvents]),(0,react.useEffect)((()=>{refLayer.current&&refCompareLayer.current&&(refLayer.current.opacity=compareOpacity+.25,refCompareLayer.current.opacity=1.25-compareOpacity)}),[compareOpacity]),(0,react.useEffect)((()=>{if(view&&events){const widget=refWidget.current;return view.ui.add(widget,{index:-3,position:"bottom-trailing"}),view.on("layerview-create",(()=>{if(refLayer.current&&refCompareLayer.current){refLayer.current.visible=!0,refCompareLayer.current.visible=!0;const newExtent=refLayer.current.fullExtent.union(refCompareLayer.current.fullExtent);newExtent&&view.goTo(newExtent)}})),()=>{view.ui.remove(widget)}}}),[events]),(0,react.useEffect)((()=>{map?.layers.forEach((layer=>layer.visible=!events))}),[map,events]),(0,jsx_runtime.jsx)("div",{className:"esri-widget compare-slider",ref:refWidget,children:map&&view&&events&&(0,jsx_runtime.jsx)("input",{type:"range",min:0,max:1,step:.05,value:compareOpacity,style:{"--leftColor":color,"--rightColor":compareColor},onChange:e=>setCompareOpacity(e.target.valueAsNumber)})})};try{CompareLayer.displayName="CompareLayer",CompareLayer.__docgenInfo={description:"",displayName:"CompareLayer",props:{events:{defaultValue:null,description:"",name:"events",required:!1,type:{name:"MapEvent[]"}},color:{defaultValue:{value:"#b91c1c"},description:"",name:"color",required:!1,type:{name:"string"}},countField:{defaultValue:null,description:"",name:"countField",required:!1,type:{name:"string"}},compareCountField:{defaultValue:null,description:"",name:"compareCountField",required:!1,type:{name:"string"}},compareEvents:{defaultValue:null,description:"",name:"compareEvents",required:!1,type:{name:"MapEvent[]"}},compareColor:{defaultValue:{value:"#047857"},description:"",name:"compareColor",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/compare/CompareLayer.tsx#CompareLayer"]={docgenInfo:CompareLayer.__docgenInfo,name:"CompareLayer",path:"packages/map/src/compare/CompareLayer.tsx#CompareLayer"})}catch(__react_docgen_typescript_loader_error){}var core_dist=__webpack_require__("./packages/core/dist/index.js");const CompareTool=({onCompare,onCancel,isLoading,isComparing})=>{const refWidget=(0,react.useRef)(null),{map,view}=useMapContext();return(0,react.useEffect)((()=>{if(view){const widget=refWidget.current;return view.ui.add(widget,{index:-3,position:"top-trailing"}),()=>{view.ui.remove(widget)}}}),[]),(0,jsx_runtime.jsx)("div",{className:"esri-widget",ref:refWidget,children:map&&view&&(0,jsx_runtime.jsxs)("button",{onClick:isComparing?onCancel:onCompare,className:"esri-widget--button esri-widget esri-interactive","data-tooltip":"Compare","data-tooltip-placement":"left",children:[!isLoading&&!isComparing&&(0,jsx_runtime.jsx)(core_dist.Ng,{className:"esri-icon text-base",icon:"M13,23H11V1H13V23M9,19H5V5H9V3H5C3.89,3 3,3.89 3,5V19C3,20.11 3.9,21 5,21H9V19M19,7V9H21V7H19M19,5H21C21,3.89 20.1,3 19,3V5M21,15H19V17H21V15M19,11V13H21V11H19M17,3H15V5H17V3M19,21C20.11,21 21,20.11 21,19H19V21M17,19H15V21H17V19Z"}),!isLoading&&isComparing&&(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-close"}),isLoading&&(0,jsx_runtime.jsx)(core_dist.Xr.Spinner,{})]})})};try{CompareTool.displayName="CompareTool",CompareTool.__docgenInfo={description:"",displayName:"CompareTool",props:{isLoading:{defaultValue:null,description:"",name:"isLoading",required:!0,type:{name:"boolean"}},isComparing:{defaultValue:null,description:"",name:"isComparing",required:!0,type:{name:"boolean"}},onCompare:{defaultValue:null,description:"",name:"onCompare",required:!0,type:{name:"() => void"}},onCancel:{defaultValue:null,description:"",name:"onCancel",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/compare/CompareTool.tsx#CompareTool"]={docgenInfo:CompareTool.__docgenInfo,name:"CompareTool",path:"packages/map/src/compare/CompareTool.tsx#CompareTool"})}catch(__react_docgen_typescript_loader_error){}const Comparison=({onCompareStart,...props})=>{const[isLoading,setLoading]=(0,react.useState)(!1),[events,setEvents]=(0,react.useState)(),onCompare=(0,react.useCallback)((()=>{setLoading(!0),onCompareStart().then(setEvents).catch((()=>!1)).then((()=>setLoading(!1)))}),[onCompareStart]);return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(CompareLayer,{...events,...props}),(0,jsx_runtime.jsx)(CompareTool,{onCompare,onCancel:()=>setEvents(void 0),isLoading,isComparing:!!events})]})};try{Comparison.displayName="Comparison",Comparison.__docgenInfo={description:"",displayName:"Comparison",props:{onCompareStart:{defaultValue:null,description:"",name:"onCompareStart",required:!0,type:{name:"() => Promise<Events>"}},countField:{defaultValue:null,description:"",name:"countField",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"",name:"color",required:!1,type:{name:"string"}},compareColor:{defaultValue:null,description:"",name:"compareColor",required:!1,type:{name:"string"}},compareCountField:{defaultValue:null,description:"",name:"compareCountField",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/compare/Comparison.tsx#Comparison"]={docgenInfo:Comparison.__docgenInfo,name:"Comparison",path:"packages/map/src/compare/Comparison.tsx#Comparison"})}catch(__react_docgen_typescript_loader_error){}var Multipoint=__webpack_require__("./node_modules/@arcgis/core/geometry/Multipoint.js"),Polygon=__webpack_require__("./node_modules/@arcgis/core/geometry/Polygon.js"),SimpleRenderer=__webpack_require__("./node_modules/@arcgis/core/renderers/SimpleRenderer.js"),ColorVariable=__webpack_require__("./node_modules/@arcgis/core/renderers/visualVariables/ColorVariable.js"),SimpleMarkerSymbol=__webpack_require__("./node_modules/@arcgis/core/symbols/SimpleMarkerSymbol.js");const PALETTES={UberPool:["#FAE300","#FAC200","#FD7900","#E31A1A","#CF1750","#AE0E7F","#7A0DA6","#482BBD","#2C51BE","#223F9A"],FireIce:["#007A99","#0198BD","#49E3CE","#E8FEB5","#FEEDB1","#FEAD54","#D50255","#7F1941"],GlobalWarming:["#FFC300","#E57F00","#CB4600","#B21800","#98000A","#7F0023","#650031","#4C0035"],Sunrise:["#F8B195","#E59A8F","#D28389","#C06C84","#916681","#63617F","#355C7D","#194266"],Ocean:["#E5EEc1","#BEDDA5","#92CC8B","#73BC84","#5EAB8B","#4B9A95","#3A748A","#37535E"],Wine:["#EDD1CA","#E0B1B3","#CF91A3","#B77495","#9A5B88","#764476","#50315E","#2C1E3D"],Spectral:["#5e4fa2","#3288bd","#66c2a5","#abdda4","#e6f598","#ffffbf","#fee08b","#fdae61","#f46d43","#d53e4f","#9e0142"]},DEFAULT_COLORMAP=PALETTES.GlobalWarming.slice(0,7).map(((color,idx)=>({value:100*idx+2,color}))),ClusterLayer=({events,title,visible,listMode="hide",actions=[],onActionClick,defaultColor="#e84118",colorMap=DEFAULT_COLORMAP,clusterTitle="This cluster contains {cluster_count} events",clusterContent=[],clusterActions=[],eventTitle,eventContent=[],fields,zIndex,fieldInfos=[]})=>{const{map,view}=useMapContext(),refLayer=(0,react.useRef)(),actionMap=(0,react.useMemo)((()=>[...actions.map((act=>act.id)),...clusterActions.map((act=>act.id))]),[actions,clusterActions]);return(0,react.useEffect)((()=>{const eventHandle=view?.popup.on?.("trigger-action",(e=>{if(!actionMap?.includes(e.action.id))return;const feature=view.popup.selectedFeature;feature.isAggregate?view.whenLayerView(feature.layer).then((async layerView=>{const{features}=await layerView.queryFeatures({aggregateIds:[feature.getObjectId()]}),multipoint=new Multipoint.Z({points:features.map((feat=>feat.attributes.location.split(",")))});onActionClick?.(e.action.id,{polygon:Polygon.Z.fromExtent(multipoint.extent.expand(1.01)).rings[0],events:features.map((feature=>feature.attributes))})})):onActionClick?.(e.action.id,{...feature.attributes}),view.popup.close()}));return()=>{eventHandle?.remove()}}),[actionMap,view,onActionClick]),(0,react.useEffect)((()=>{if(map&&view&&events.length>0){const blob=new Blob([JSON.stringify(makeFeatures(events))],{type:"application/json"}),url=URL.createObjectURL(blob),layer=new GeoJSONLayer.default({url,title,fields,listMode,visible,outFields:["*"],objectIdField:"id",popupTemplate:{title:eventTitle,content:[...eventContent,{type:"fields",fieldInfos}],actions},featureReduction:{type:"cluster",clusterMinSize:"24px",clusterMaxSize:"96px",clusterRadius:"128px",labelsVisible:!0,popupEnabled:!0,popupTemplate:{title:clusterTitle,content:[...clusterContent],actions:clusterActions},labelingInfo:[{deconflictionStrategy:"none",labelExpressionInfo:{expression:"Text($feature.cluster_count, '#,###')"},symbol:{type:"text",color:"#ffffff",font:{weight:"bold",family:"Noto Sans",size:"16px"}},labelPlacement:"center-center"}],renderer:new SimpleRenderer.Z({symbol:new SimpleMarkerSymbol.Z({color:defaultColor,size:16,outline:{color:transparentize(defaultColor),width:4}}),visualVariables:[new ColorVariable.Z({field:"cluster_count",stops:[{value:1,color:defaultColor},...colorMap]})]})}});layer.on("layerview-create",(()=>{void 0!==zIndex&&map.reorder(layer,zIndex),view.goTo(layer.fullExtent)})),map.add(layer),refLayer.current=layer;const calculateRatio=(0,dist.debounce)((async()=>{view.whenLayerView(layer).then((async layerView=>{const set=await layerView.queryFeatures(),maxCluster=Math.max(...set.features.map((feature=>feature.getAttribute("cluster_count"))));set.features.forEach((feature=>{feature.setAttribute("cluster_ratio",feature.isAggregate?feature.getAttribute("cluster_count")/maxCluster:0)}))})).catch((()=>{}))})),watchHandle=view.watch("extent",calculateRatio);return calculateRatio(),()=>{try{URL.revokeObjectURL(url)}catch(_){}watchHandle.remove(),map?.remove(layer)}}}),[events]),null};try{ClusterLayer.displayName="ClusterLayer",ClusterLayer.__docgenInfo={description:"",displayName:"ClusterLayer",props:{events:{defaultValue:null,description:"map events",name:"events",required:!0,type:{name:"MapEvent[]"}},zIndex:{defaultValue:null,description:"layer zIndex",name:"zIndex",required:!1,type:{name:"number"}},opacity:{defaultValue:null,description:"layer opacity",name:"opacity",required:!1,type:{name:"number"}},visible:{defaultValue:null,description:"layer visibility",name:"visible",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"layer title",name:"title",required:!1,type:{name:"string"}},listMode:{defaultValue:{value:"hide"},description:"layer list view mode",name:"listMode",required:!1,type:{name:"enum",value:[{value:'"show"'},{value:'"hide"'},{value:'"hide-children"'}]}},clusterTitle:{defaultValue:{value:"This cluster contains {cluster_count} events"},description:"cluster popup title\ntemplate variable\n{cluster_count}\n{cluster_avg_[FIELD]}",name:"clusterTitle",required:!1,type:{name:"string"}},clusterContent:{defaultValue:{value:"[]"},description:"",name:"clusterContent",required:!1,type:{name:"ContentProperties[]"}},eventTitle:{defaultValue:null,description:"",name:"eventTitle",required:!1,type:{name:"string"}},eventContent:{defaultValue:{value:"[]"},description:"",name:"eventContent",required:!1,type:{name:"ContentProperties[]"}},fields:{defaultValue:null,description:"",name:"fields",required:!1,type:{name:"FieldProperties[]"}},fieldInfos:{defaultValue:{value:"[]"},description:"",name:"fieldInfos",required:!1,type:{name:"FieldInfoProperties[]"}},defaultColor:{defaultValue:{value:"#e84118"},description:"",name:"defaultColor",required:!1,type:{name:"string"}},colorMap:{defaultValue:{value:"(() => {\n  return PALETTES.GlobalWarming.slice(0, 7).map((color, idx) => ({\n    value: idx * 100 + 2,\n    color,\n  }));\n})()"},description:"",name:"colorMap",required:!1,type:{name:"ColorStopProperties[]"}},actions:{defaultValue:{value:"[]"},description:"",name:"actions",required:!1,type:{name:"ActionButtonProperties[]"}},clusterActions:{defaultValue:{value:"[]"},description:"",name:"clusterActions",required:!1,type:{name:"ActionButtonProperties[]"}},onActionClick:{defaultValue:null,description:"",name:"onActionClick",required:!1,type:{name:"((id: string, options?: any) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/layers/ClusterLayer.tsx#ClusterLayer"]={docgenInfo:ClusterLayer.__docgenInfo,name:"ClusterLayer",path:"packages/map/src/layers/ClusterLayer.tsx#ClusterLayer"})}catch(__react_docgen_typescript_loader_error){}const HeatmapLayer_DEFAULT_COLORMAP=PALETTES.GlobalWarming.map(((color,idx)=>({ratio:(idx+1)/7,color}))),HeatmapLayer=({events,title,opacity,visible,countField,listMode="hide",colorStops=HeatmapLayer_DEFAULT_COLORMAP,zIndex,baseColor})=>{const{map,view}=useMapContext(),refLayer=(0,react.useRef)();return(0,react.useEffect)((()=>{if(map&&view){const blob=new Blob([JSON.stringify(makeFeatures(events))],{type:"application/json"}),url=URL.createObjectURL(blob),layer=new GeoJSONLayer.default({url,title,listMode,visible,opacity,outFields:["*"],objectIdField:"id",popupEnabled:!1,renderer:new HeatmapRenderer.Z({field:countField,colorStops:[{ratio:0,color:"rgba(0,0,0,0)"},...colorStops],minDensity:0,maxDensity:.25,radius:8})});return layer.on("layerview-create",(()=>{void 0!==zIndex&&map.reorder(layer,zIndex)})),map.add(layer),refLayer.current=layer,()=>{URL.revokeObjectURL(url),map?.remove(layer)}}}),[events]),null};try{HeatmapLayer.displayName="HeatmapLayer",HeatmapLayer.__docgenInfo={description:"",displayName:"HeatmapLayer",props:{events:{defaultValue:null,description:"map events",name:"events",required:!0,type:{name:"MapEvent[]"}},zIndex:{defaultValue:null,description:"layer zIndex",name:"zIndex",required:!1,type:{name:"number"}},opacity:{defaultValue:null,description:"layer opacity",name:"opacity",required:!1,type:{name:"number"}},visible:{defaultValue:null,description:"layer visibility",name:"visible",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"layer title",name:"title",required:!1,type:{name:"string"}},listMode:{defaultValue:{value:"hide"},description:"layer list view mode",name:"listMode",required:!1,type:{name:"enum",value:[{value:'"show"'},{value:'"hide"'},{value:'"hide-children"'}]}},baseColor:{defaultValue:null,description:"base color for color stops",name:"baseColor",required:!1,type:{name:"string"}},countField:{defaultValue:null,description:"heatmap count field",name:"countField",required:!1,type:{name:"string"}},colorStops:{defaultValue:{value:"(() => {\n  return PALETTES.GlobalWarming.map((color, idx) => ({\n    ratio: (idx + 1) / 7,\n    color,\n  }));\n})()"},description:"color stops",name:"colorStops",required:!1,type:{name:"ColorStopProperties[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/layers/HeatmapLayer.tsx#HeatmapLayer"]={docgenInfo:HeatmapLayer.__docgenInfo,name:"HeatmapLayer",path:"packages/map/src/layers/HeatmapLayer.tsx#HeatmapLayer"})}catch(__react_docgen_typescript_loader_error){}var UniqueValueRenderer=__webpack_require__("./node_modules/@arcgis/core/renderers/UniqueValueRenderer.js");const LocationLayer=({layerRef,title,events,colors,defaultColor="#e11d48",uniqField,marker=ICON_MARKER})=>{const{view,map}=useMapContext(),refLayer=(0,react.useRef)(),refLayerView=(0,react.useRef)(),refHilight=(0,react.useRef)();return(0,react.useImperativeHandle)(layerRef,(()=>({hilight:ids=>{refHilight.current&&(refHilight.current.feature.visible=!0,view?.graphics.remove(refHilight.current.clone));const layer=refLayer.current;if(layer){const query=layer.createQuery();query.objectIds=[ids],layer.queryFeatures(query).then((feats=>{refHilight.current={feature:feats.features[0],clone:feats.features[0].clone()},refHilight.current.feature.visible=!1,refHilight.current.clone.symbol={type:"simple-marker",outline:{color:[255,255,255],width:1},color:"#cc0000",size:48,xoffset:0,yoffset:24,path:marker},view?.graphics.add(refHilight.current.clone)}))}},unhilight:()=>{refHilight.current&&(refHilight.current.feature.visible=!0,view?.graphics.remove(refHilight.current.clone))}})),[]),(0,react.useEffect)((()=>{if(view&&map&&events.length>0){const blob=new Blob([JSON.stringify(makeFeatures(events))],{type:"application/json"}),markerSymbol={type:"simple-marker",outline:{color:[255,255,255],width:1},color:defaultColor,size:32,xoffset:0,yoffset:16,path:marker},url=URL.createObjectURL(blob),layer=new GeoJSONLayer.default({url,title,outFields:["*"],objectIdField:"id",renderer:uniqField?new UniqueValueRenderer.Z({field:uniqField,defaultSymbol:markerSymbol,legendOptions:{title:"Colors extracted from data"},uniqueValueInfos:colors?.map((({color,value,label})=>({value,label:label??value,symbol:{...markerSymbol,color}})))}):new SimpleRenderer.Z({symbol:markerSymbol})});layer.on("layerview-create",(()=>{view.goTo(layer.fullExtent)})),view.whenLayerView(layer).then((layerView=>{refLayerView.current=layerView}));const clickHandle=view.on("click",console.log);return map.add(layer),refLayer.current=layer,()=>{try{URL.revokeObjectURL(url)}catch(_){}clickHandle.remove(),map?.remove(layer)}}}),[events,marker,view,colors,uniqField]),null};try{LocationLayer.displayName="LocationLayer",LocationLayer.__docgenInfo={description:"",displayName:"LocationLayer",props:{layerRef:{defaultValue:null,description:"",name:"layerRef",required:!1,type:{name:"RefObject<{ hilight: (ids: string) => void; unhilight: () => void; }>"}},title:{defaultValue:null,description:"map title",name:"title",required:!1,type:{name:"string"}},events:{defaultValue:null,description:"events",name:"events",required:!0,type:{name:"MapEvent[]"}},marker:{defaultValue:{value:"M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z"},description:"marker svg path",name:"marker",required:!1,type:{name:"string"}},defaultColor:{defaultValue:{value:"#e11d48"},description:"default color from simple renderer",name:"defaultColor",required:!1,type:{name:"string"}},uniqField:{defaultValue:null,description:"field for uniq color renderer",name:"uniqField",required:!1,type:{name:"string"}},colors:{defaultValue:null,description:"colors by uniq value",name:"colors",required:!1,type:{name:"{ value: string; color: string; label?: string; }[]"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"((id: string) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/layers/LocationLayer.tsx#LocationLayer"]={docgenInfo:LocationLayer.__docgenInfo,name:"LocationLayer",path:"packages/map/src/layers/LocationLayer.tsx#LocationLayer"})}catch(__react_docgen_typescript_loader_error){}var Graphic=__webpack_require__("./node_modules/@arcgis/core/Graphic.js");const Marker=({location,color="#8b5cf6",marker=ICON_MARKER})=>{const{view}=useMapContext();return(0,react.useEffect)((()=>{try{const[lon,lat]=convertLatLng(location),point={type:"point",longitude:lon,latitude:lat},markerSymbol={type:"simple-marker",color:colorArray(color),outline:{color:[255,255,255],width:1},size:32,xoffset:0,yoffset:16,path:marker},pointGraphic=new Graphic.Z({geometry:point,symbol:markerSymbol}),graphic=view?.graphics.add(pointGraphic);return view?.on("layerview-create",(()=>{view?.goTo({center:[lon,lat],zoom:11})})),()=>{graphic?.removeAll()}}catch{}}),[location,color,marker,view]),null};try{Marker.displayName="Marker",Marker.__docgenInfo={description:"",displayName:"Marker",props:{location:{defaultValue:null,description:"",name:"location",required:!0,type:{name:"LngLatLike"}},color:{defaultValue:{value:"#8b5cf6"},description:"",name:"color",required:!1,type:{name:"string"}},marker:{defaultValue:{value:"M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z"},description:"",name:"marker",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/layers/Marker.tsx#Marker"]={docgenInfo:Marker.__docgenInfo,name:"Marker",path:"packages/map/src/layers/Marker.tsx#Marker"})}catch(__react_docgen_typescript_loader_error){}const PLACEMENT_MAP={"top-start":"top-leading","top-end":"top-trailing"},Action=({icon,tooltip,isDisabled,position="top-start",index,onClick})=>{const refWidget=(0,react.useRef)(null),{map,view}=useMapContext();return(0,react.useEffect)((()=>{if(view){const widget=refWidget.current;return view.ui.add(widget,{index,position:PLACEMENT_MAP[position]}),()=>{view.ui.remove(widget)}}}),[]),(0,jsx_runtime.jsx)("div",{className:"esri-widget",ref:refWidget,children:map&&view&&(0,jsx_runtime.jsx)("button",{className:"esri-widget--button esri-widget esri-interactive","data-tooltip":tooltip,"data-tooltip-placement":"right",onClick:()=>onClick({map,view}),disabled:isDisabled,children:(0,jsx_runtime.jsx)(core_dist.Ng,{className:"esri-icon",icon})})})};try{Action.displayName="Action",Action.__docgenInfo={description:"AxMap toolbar action button",displayName:"Action",props:{icon:{defaultValue:null,description:"",name:"icon",required:!0,type:{name:"string"}},isDisabled:{defaultValue:null,description:"",name:"isDisabled",required:!1,type:{name:"boolean"}},position:{defaultValue:{value:"top-start"},description:"",name:"position",required:!1,type:{name:"enum",value:[{value:'"top-start"'},{value:'"top-end"'}]}},tooltip:{defaultValue:null,description:"",name:"tooltip",required:!1,type:{name:"string"}},index:{defaultValue:null,description:"",name:"index",required:!1,type:{name:"number"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!0,type:{name:"({ map, view }: { map: Map; view: MapView; }) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/tools/Action.tsx#Action"]={docgenInfo:Action.__docgenInfo,name:"Action",path:"packages/map/src/tools/Action.tsx#Action"})}catch(__react_docgen_typescript_loader_error){}var BasemapGallery=__webpack_require__("./node_modules/@arcgis/core/widgets/BasemapGallery.js"),Expand=__webpack_require__("./node_modules/@arcgis/core/widgets/Expand.js");const Basemap_Basemap=()=>{const{view,basemaps}=useMapContext();return(0,react.useEffect)((()=>{if(view){const basemapGallery=new BasemapGallery.Z({view,source:Array.from(basemaps.values())}),basemapExpand=new Expand.Z({view,content:basemapGallery,autoCollapse:!0,group:"geomap",expandTooltip:"Open Basemap list",collapseTooltip:"Hide Basemap list"});return view.ui.add(basemapExpand,{index:-5,position:"top-trailing"}),()=>{view.ui.remove(basemapExpand)}}}),[basemaps]),null};try{Basemap_Basemap.displayName="Basemap",Basemap_Basemap.__docgenInfo={description:"AxMap toolbar basemap selector",displayName:"Basemap",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/tools/Basemap.tsx#Basemap"]={docgenInfo:Basemap_Basemap.__docgenInfo,name:"Basemap",path:"packages/map/src/tools/Basemap.tsx#Basemap"})}catch(__react_docgen_typescript_loader_error){}var LayerList=__webpack_require__("./node_modules/@arcgis/core/widgets/LayerList.js");const Layers=()=>{const{view}=useMapContext();return(0,react.useEffect)((()=>{if(view){const layerList=new LayerList.Z({view}),layerExpand=new Expand.Z({view,content:layerList,autoCollapse:!0,group:"geomap",expandTooltip:"Open Layers list",collapseTooltip:"Hide Layers list"});return view.ui.add(layerExpand,{index:-4,position:"top-trailing"}),()=>{view.ui.remove(layerExpand)}}}),[]),null};try{Layers.displayName="Layers",Layers.__docgenInfo={description:"AxMap toolbar basemap selector",displayName:"Layers",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/tools/Layers.tsx#Layers"]={docgenInfo:Layers.__docgenInfo,name:"Layers",path:"packages/map/src/tools/Layers.tsx#Layers"})}catch(__react_docgen_typescript_loader_error){}var Extent=__webpack_require__("./node_modules/@arcgis/core/geometry/Extent.js");const HomeButton=()=>{const{map,view,defaultViewport}=useMapContext(),gotoHome=(0,react.useCallback)((()=>{const extent=map?.allLayers.reduce(((extent,layer)=>["esri.layers.GeoJSONLayer"].includes(layer.declaredClass)&&layer.fullExtent?extent.union(layer.fullExtent):extent),new Extent.Z);view?.goTo(extent)}),[view,defaultViewport]);return(0,jsx_runtime.jsx)("button",{className:"esri-widget--button esri-widget esri-interactive",onClick:gotoHome,children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-home"})})},Navigator=()=>{const{view}=useMapContext(),now=(0,react.useRef)(-1),history=(0,react.useRef)([]),watchHandle=(0,react.useRef)(),[{prev,next},setActions]=(0,react.useState)({prev:!1,next:!1}),handleChange=(0,core_dist.Nr)((()=>{if(view){const newExtent={zoom:view.zoom,center:[view.center.longitude,view.center.latitude]};(0,dist.isEqual)(newExtent,history.current[now.current])||(history.current.splice(now.current+1,99,newExtent),history.current=history.current.slice(-50),now.current=history.current.length-1,setActions({prev:history.current.length>1,next:!1}))}}),250),startWatch=(0,react.useRef)((view=>{watchHandle.current?.remove(),watchHandle.current=view.watch("extent",handleChange)})),handleNavigate=(0,react.useCallback)(((diff=0)=>{watchHandle.current?.remove(),now.current+=diff,setActions({prev:now.current>0,next:now.current<history.current.length-1}),view?.goTo(history.current[now.current]).then((()=>{view&&startWatch.current(view)}))}),[view,handleChange]);return(0,react.useEffect)((()=>{view&&startWatch.current(view)}),[view]),(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)("button",{disabled:!prev,onClick:()=>handleNavigate(-1),className:"esri-widget--button esri-widget esri-interactive",children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-left-arrow"})}),(0,jsx_runtime.jsx)("button",{disabled:!next,onClick:()=>handleNavigate(1),className:"esri-widget--button esri-widget esri-interactive",children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-right-arrow"})})]})},Navigation=()=>{const refWidget=(0,react.useRef)(null),{view}=useMapContext();return(0,react.useEffect)((()=>{if(view){const widget=refWidget.current;return view.ui.add(widget,{index:-2,position:"top-leading"}),()=>{view.ui.remove(widget)}}}),[]),(0,jsx_runtime.jsxs)("div",{className:"esri-widget",ref:refWidget,children:[(0,jsx_runtime.jsx)(HomeButton,{}),view&&(0,jsx_runtime.jsx)(Navigator,{})]})};try{Navigation.displayName="Navigation",Navigation.__docgenInfo={description:"AxMap toolbar view changes with history",displayName:"Navigation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/tools/Navigation.tsx#Navigation"]={docgenInfo:Navigation.__docgenInfo,name:"Navigation",path:"packages/map/src/tools/Navigation.tsx#Navigation"})}catch(__react_docgen_typescript_loader_error){}var GraphicsLayer=__webpack_require__("./node_modules/@arcgis/core/layers/GraphicsLayer.js"),SketchViewModel=__webpack_require__("./node_modules/@arcgis/core/widgets/Sketch/SketchViewModel.js");const SelectionSymbol={type:"simple-fill",color:"rgba(183,146,68,0.1)",outline:{width:1,color:"#b79244"}},SelectedSymbol={type:"simple-fill",color:"rgba(64,134,122,0.1)",outline:{width:2,color:"#40867A"}},Selection=(0,react.memo)((({onUpdate,filters=[]})=>{const refWidget=(0,react.useRef)(null),refLayer=(0,react.useRef)(),[sketchModel,setSketchModel]=(0,react.useState)(),{view,map}=useMapContext(),{getGeometry}=useProjection(),[sketchState,setSketchState]=(0,react.useState)("idle"),onChange=(0,react.useCallback)((async()=>{const graphics=refLayer.current?.graphics;if(graphics){const geos=await Promise.all(graphics.map((async graphic=>await getGeometry(graphic.geometry).then((geo=>geo?geo.rings[0]:[])))));onUpdate?.(geos)}}),[]);return(0,react.useEffect)((()=>{const createHandle=sketchModel?.on("create",(({graphic,tool,state})=>{"cancel"===state&&setSketchState("idle"),"complete"===state&&(graphic.set("symbol",SelectedSymbol),setSketchState("idle"),onChange())})),updateHandle=sketchModel?.on("update",(({graphics,state})=>{"start"===state&&setSketchState("edit"),"complete"===state&&(setSketchState("idle"),onChange())})),deleteHandle=sketchModel?.on("delete",(({graphics,tool})=>{setSketchState("idle"),onChange()}));return()=>{createHandle?.remove(),updateHandle?.remove(),deleteHandle?.remove()}}),[sketchModel]),(0,react.useEffect)((()=>{if(view&&map){const widget=refWidget.current,layer=new GraphicsLayer.Z({listMode:"hide",id:"graphic-layer"}),sketch=new SketchViewModel.Z({view,layer,defaultUpdateOptions:{toggleToolOnClick:!1},updateOnGraphicClick:!1,polygonSymbol:SelectionSymbol});refLayer.current=layer,setSketchModel(sketch);const eventHandle=view?.popup.on?.("trigger-action",(e=>{"edit"===e.action.id&&(sketch.update(view.popup.selectedFeature),view.popup.close()),"add-target"===e.action.id&&(getGeometry(view.popup.selectedFeature.geometry).then((geo=>console.log(geo?geo.rings[0]:[]))),view.popup.close())})),handleKeydown=view.on("key-down",(evt=>{"Control"!==evt.key||evt.repeat||sketch.create("circle")})),handleKeyup=view.on("key-up",(evt=>{"Control"===evt.key&&sketch.cancel()}));return view.ui.add(widget,{index:-2,position:"top-trailing"}),map.add(layer),view.on("layerview-create",(()=>{map.reorder(layer,99)})),()=>{eventHandle?.remove(),handleKeydown.remove(),handleKeyup.remove(),view.ui.remove(widget),map.remove(layer)}}}),[]),(0,react.useEffect)((()=>{refLayer.current?.graphics.removeAll(),filters.length>0&&refLayer.current?.graphics.addMany(filters?.map((rings=>new Graphic.Z({geometry:{type:"polygon",rings:[rings]},popupTemplate:{actions:[{id:"add-target",type:"button",className:"esri-icon-tracking",title:"Add to Target"},{id:"edit",type:"button",className:"esri-icon-edit",title:"Edit"}]},symbol:SelectedSymbol}))))}),[filters]),(0,jsx_runtime.jsxs)("div",{className:"esri-widget",ref:refWidget,children:[(0,jsx_runtime.jsx)("span",{className:"text-xs text-center block",children:"Draw"}),"idle"===sketchState&&(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)("button",{"data-tooltip":"Circle","data-tooltip-placement":"left",className:"esri-widget--button esri-widget esri-interactive",onClick:()=>(setSketchState("create"),sketchModel?.create("circle")),children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-radio-unchecked"})}),(0,jsx_runtime.jsx)("button",{"data-tooltip":"Rectangle","data-tooltip-placement":"left",className:"esri-widget--button esri-widget esri-interactive",onClick:()=>(setSketchState("create"),sketchModel?.create("rectangle")),children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-checkbox-unchecked"})}),(0,jsx_runtime.jsx)("button",{"data-tooltip":"Polygon","data-tooltip-placement":"left",className:"esri-widget--button esri-widget esri-interactive",onClick:()=>(setSketchState("create"),sketchModel?.create("polygon")),children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-polygon"})})]}),("create"===sketchState||"edit"===sketchState)&&(0,jsx_runtime.jsx)("button",{"data-tooltip":"Cancel","data-tooltip-placement":"left",className:"esri-widget--button esri-widget esri-interactive",onClick:()=>sketchModel?.cancel(),children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-close"})}),"edit"===sketchState&&(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)("button",{"data-tooltip":"Add to target","data-tooltip-placement":"left",className:"esri-widget--button esri-widget esri-interactive",onClick:()=>{sketchModel?.updateGraphics&&getGeometry(sketchModel?.updateGraphics.getItemAt(0).geometry)},children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-locate-circled"})}),(0,jsx_runtime.jsx)("button",{"data-tooltip":"Delete","data-tooltip-placement":"left",className:"esri-widget--button esri-widget esri-interactive",onClick:()=>sketchModel?.delete(),children:(0,jsx_runtime.jsx)("span",{className:"esri-icon esri-icon-trash text-danger"})})]})]})}));Selection.displayName="Map.tool.Selection";try{Selection.displayName="Map.tool.Selection",Selection.__docgenInfo={description:"",displayName:"Map.tool.Selection",props:{filters:{defaultValue:null,description:"",name:"filters",required:!1,type:{name:"number[][][]"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((areas: number[][][]) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/tools/Selection.tsx#Map.tool.Selection"]={docgenInfo:Map.tool.Selection.__docgenInfo,name:"Map.tool.Selection",path:"packages/map/src/tools/Selection.tsx#Map.tool.Selection"})}catch(__react_docgen_typescript_loader_error){}var Zoom=__webpack_require__("./node_modules/@arcgis/core/widgets/Zoom.js");const Zoom_Zoom=()=>{const{view,basemaps}=useMapContext();return(0,react.useEffect)((()=>{if(view){const zoomTool=new Zoom.Z({view});return view?.ui.add(zoomTool,{index:-1,position:"top-leading"}),()=>{view?.ui.remove(zoomTool)}}}),[basemaps]),null};try{Zoom_Zoom.displayName="Zoom",Zoom_Zoom.__docgenInfo={description:"AxMap toolbar zoom controls",displayName:"Zoom",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/tools/Zoom.tsx#Zoom"]={docgenInfo:Zoom_Zoom.__docgenInfo,name:"Zoom",path:"packages/map/src/tools/Zoom.tsx#Zoom"})}catch(__react_docgen_typescript_loader_error){}const MapViewer=props=>(0,jsx_runtime.jsx)(MapProvider,{...props});try{MapViewer.displayName="MapViewer",MapViewer.__docgenInfo={description:"MapViewer using wrapper for arcgis",displayName:"MapViewer",props:{sources:{defaultValue:null,description:"",name:"sources",required:!0,type:{name:"MapSource[]"}},defaultSource:{defaultValue:null,description:"",name:"defaultSource",required:!0,type:{name:"string"}},mapRef:{defaultValue:null,description:"",name:"mapRef",required:!1,type:{name:"RefObject<{ exportMap: () => Promise<{ image: string; extent: AnyObject; }>; }>"}},minZoom:{defaultValue:null,description:"",name:"minZoom",required:!1,type:{name:"number"}},maxZoom:{defaultValue:null,description:"",name:"maxZoom",required:!1,type:{name:"number"}},defaultViewport:{defaultValue:null,description:"",name:"defaultViewport",required:!1,type:{name:"MapViewport"}},onLoading:{defaultValue:null,description:"",name:"onLoading",required:!1,type:{name:"((isLoading: boolean) => void)"}},onViewportChange:{defaultValue:null,description:"",name:"onViewportChange",required:!1,type:{name:"((viewport: MapViewport) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/map/src/viewer/MapViewer.tsx#MapViewer"]={docgenInfo:MapViewer.__docgenInfo,name:"MapViewer",path:"packages/map/src/viewer/MapViewer.tsx#MapViewer"})}catch(__react_docgen_typescript_loader_error){}const AxMap={Viewer:MapViewer,Marker,layers:{Cluster:ClusterLayer,Heatmap:HeatmapLayer,Locations:LocationLayer},tools:{Zoom:Zoom_Zoom,Basemap:Basemap_Basemap,Navigation,Selection,Comparison,Action,Layers}};MapViewer.displayName="AxMap.Viewer",Marker.displayName="AxMap.Marker",Action.displayName="AxMap.tools.Action",Basemap_Basemap.displayName="AxMap.tools.Basemap",Navigation.displayName="AxMap.tools.Navigation",Layers.displayName="AxMap.tools.Layers",Comparison.displayName="AxMap.tools.Comparison",Selection.displayName="AxMap.tools.Selection",Zoom_Zoom.displayName="AxMap.tools.Zoom",ClusterLayer.displayName="AxMap.layers.Cluster",HeatmapLayer.displayName="AxMap.layers.Heatmap",LocationLayer.displayName="AxMap.layers.Locations"},"./assets/thumbs/thumb-vec.png":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__.p+"static/media/thumb-vec.ff4a6bfd.png"}}]);