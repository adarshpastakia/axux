{"version":3,"file":"42217.92a33d8d.iframe.bundle.js","mappings":";;;;AAQA;;;;;AAKA;;;;;;AAMA;;AAEA;;AAEA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;AAOA;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;ACzFA;;;;;AAKA;;;;;;;;;AASA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;;AAEA;;AAEA;;;AAGA;AACA;;;;;;;;;AASA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;ACzDA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;AAOA;;;;;;;AC9EA;;;;AAIA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;ACpBA;;;;;;;;;ACEA;;;AAGA;;;AAGA;;;AAGA;;;;;;AAMA;;;;;;AClBA;AACA;;;;;;;ACAA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;;;;;;AASA;;;AAGA;AACA;AACA;;AAEA;;;;;;;AAOA;;;;;;AAMA;;;AAGA;AACA;AACA;;;AAGA;;;;;ACnDA;;;;;AAKA;;;;;;;;;;;AAWA;;;AAGA;;;;;;AClBA;AACA;;;ACJA;AACA;;AAEA;;;AAGA;;;AAGA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;;;;;;;AAOA;;;;;;;;;AASA;;;;;AAKA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;ACxFA;;AAEA;;AAEA;;AAEA;;ACPA;;AAEA;;AAEA;;AAEA;;AAEA;ACTA;AACA;;ACAA;;;;;;;ACKA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;AAGA;;;;;;;AAOA","sources":["webpack://axux/./node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/RealisticTree.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/SSAO.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/SSAOBlur.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/DecodeSymbolColor.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlphaBlend.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as s,NormalType as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as u}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as p}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ComputeNormalTexture as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as b,addAmbientBoostFactor as f,addLightingGlobalFactor as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightIntensity as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{multipassTerrainTest as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{Normals as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as T}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as L,PBRMode as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as M,ReadShadowMapDraw as O}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{colorTextureUV as P,normalTextureUV as $,emissiveTextureUV as E,occlusionTextureUV as N,metallicRoughnessTextureUV as A}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js\";import{VisualVariables as S}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as V}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as D}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as _}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as U,addCameraPosition as B}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as I}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as R}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as z}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as W}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as k}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as G}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as q}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function H(H){const J=new W,{vertex:K,fragment:Q,varyings:X}=J;if(U(K,H),J.include(n),X.add(\"vpos\",\"vec3\"),J.include(S,H),J.include(l,H),J.include(u,H),H.hasColorTextureTransform&&J.include(P),H.output===o.Color||H.output===o.Alpha){H.hasNormalTextureTransform&&J.include($),H.hasEmissionTextureTransform&&J.include(E),H.hasOcclusionTextureTransform&&J.include(N),H.hasMetallicRoughnessTextureTransform&&J.include(A),B(K,H),J.include(s,H),J.include(i,H);const o=H.normalType===t.Attribute||H.normalType===t.Compressed;o&&H.offsetBackfaces&&J.include(r),J.include(v,H),J.include(g,H),H.instancedColor&&J.attributes.add(q.INSTANCECOLOR,\"vec4\"),X.add(\"vPositionLocal\",\"vec3\"),J.include(c,H),J.include(e,H),J.include(d,H),J.include(m,H),K.uniforms.add(new I(\"externalColor\",(e=>e.externalColor))),X.add(\"vcolorExt\",\"vec4\"),H.multipassEnabled&&X.add(\"depth\",\"float\"),K.code.add(z`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${H.instancedColor?\"vcolorExt *= instanceColor * 0.003921568627451;\":\"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${z.float(V)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        } else {\n          vpos = getVertexInLocalOriginSpace();\n          vPositionLocal = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${o?z`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));`:\"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${H.hasVertexTangents?\"vTangent = dpTransformVertexTangent(tangent);\":\"\"}\n          gl_Position = transformPosition(proj, view, vpos);\n          ${o&&H.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n        }\n\n        ${H.multipassEnabled?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n        ${H.hasColorTextureTransform?z`forwardColorUV();`:\"\"}\n        ${H.hasNormalTextureTransform?z`forwardNormalUV();`:\"\"}\n        ${H.hasEmissionTextureTransform?z`forwardEmissiveUV();`:\"\"}\n        ${H.hasOcclusionTextureTransform?z`forwardOcclusionUV();`:\"\"}\n        ${H.hasMetallicRoughnessTextureTransform?z`forwardMetallicRoughnessUV();`:\"\"}\n      }\n    `)}switch(H.output){case o.Alpha:J.include(a,H),J.include(D,H),J.include(y,H),Q.uniforms.add(new R(\"opacity\",(e=>e.opacity)),new R(\"layerOpacity\",(e=>e.layerOpacity))),H.hasColorTexture&&Q.uniforms.add(new k(\"tex\",(e=>e.texture))),Q.include(_),Q.code.add(z`\n      void main() {\n        discardBySlice(vpos);\n        ${H.multipassEnabled?\"terrainDepthTest(depth);\":\"\"}\n        ${H.hasColorTexture?z`\n                vec4 texColor = texture(tex, ${H.hasColorTextureTransform?z`colorUV`:z`vuv0`});\n                ${H.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:z`vec4 texColor = vec4(1.0);`}\n        ${H.hasVertexColors?z`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:z`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        fragColor = vec4(opacity_);\n      }\n    `);break;case o.Color:J.include(a,H),J.include(b,H),J.include(h,H),J.include(D,H),J.include(H.instancedDoublePrecision?M:O,H),J.include(y,H),B(Q,H),Q.uniforms.add(K.uniforms.get(\"localOrigin\"),new F(\"ambient\",(e=>e.ambient)),new F(\"diffuse\",(e=>e.diffuse)),new R(\"opacity\",(e=>e.opacity)),new R(\"layerOpacity\",(e=>e.layerOpacity))),H.hasColorTexture&&Q.uniforms.add(new k(\"tex\",(e=>e.texture))),J.include(L,H),J.include(T,H),Q.include(_),J.include(C,H),f(Q),w(Q),x(Q),Q.code.add(z`\n      void main() {\n        discardBySlice(vpos);\n        ${H.multipassEnabled?\"terrainDepthTest(depth);\":\"\"}\n        ${H.hasColorTexture?z`\n                vec4 texColor = texture(tex, ${H.hasColorTextureTransform?z`colorUV`:z`vuv0`});\n                ${H.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:z`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${H.normalType===t.ScreenDerivative?z`\n                vec3 normal = screenDerivativeNormal(vPositionLocal);`:z`\n                shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n        ${H.pbrMode===j.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        vec3 posWorld = vpos + localOrigin;\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);\n        float shadow = ${H.receiveShadows?\"readShadowMap(vpos, linearDepth)\":H.spherical?\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\":\"0.0\"};\n\n        vec3 matColor = max(ambient, diffuse);\n        ${H.hasVertexColors?z`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:z`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${H.hasNormalTexture?z`\n                mat3 tangentSpace = ${H.hasVertexTangents?\"computeTangentSpace(normal);\":\"computeTangentSpace(normal, vpos, vuv0);\"}\n                vec3 shadingNormal = computeTextureNormal(tangentSpace, ${H.hasNormalTextureTransform?z`normalUV`:\"vuv0\"});`:z`vec3 shadingNormal = normal;`}\n        vec3 normalGround = ${H.spherical?z`normalize(posWorld);`:z`vec3(0.0, 0.0, 1.0);`}\n\n        ${H.snowCover?z`\n                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n                albedo = mix(albedo, vec3(1), snow);\n                shadingNormal = mix(shadingNormal, normal, snow);\n                ssao = mix(ssao, 1.0, snow);`:\"\"}\n\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n        ${H.pbrMode===j.Normal||H.pbrMode===j.Schematic?z`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${H.snowCover?z`\n                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                        emission = mix(emission, vec3(0.0), snow);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:z`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${H.transparencyPassType===G.Color?z`fragColor = premultiplyAlpha(fragColor);`:\"\"}\n      }\n    `)}return J.include(p,H),J}const J=Object.freeze(Object.defineProperty({__proto__:null,build:H},Symbol.toStringTag,{value:\"Module\"}));export{J as D,H as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as m}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as p,addAmbientBoostFactor as b,addLightingGlobalFactor as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as h,addMainLightIntensity as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{multipassTerrainTest as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PhysicallyBasedRendering as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as y,PBRMode as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as L,ReadShadowMapDraw as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as P,addCameraPosition as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as T}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as N}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as F}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as V}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as _}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as B}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function I(I){const R=new V,{vertex:z,fragment:k,varyings:U}=R;return P(z,I),R.include(s),U.add(\"vpos\",\"vec3\"),R.include(M,I),R.include(l,I),R.include(g,I),I.output!==r.Color&&I.output!==r.Alpha||(S(R.vertex,I),R.include(t,I),R.include(a,I),I.offsetBackfaces&&R.include(o),I.instancedColor&&R.attributes.add(B.INSTANCECOLOR,\"vec4\"),U.add(\"vNormalWorld\",\"vec3\"),U.add(\"localvpos\",\"vec3\"),I.multipassEnabled&&U.add(\"depth\",\"float\"),R.include(d,I),R.include(e,I),R.include(n,I),R.include(c,I),z.uniforms.add(new T(\"externalColor\",(e=>e.externalColor))),U.add(\"vcolorExt\",\"vec4\"),z.code.add(F`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${I.instancedColor?\"vcolorExt *= instanceColor * 0.003921568627451;\":\"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${F.float(O)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          } else {\n            vpos = getVertexInLocalOriginSpace();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${I.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n          }\n          ${I.multipassEnabled?F`depth = (view * vec4(vpos, 1.0)).z;`:\"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)),I.output===r.Alpha&&(R.include(i,I),R.include(A,I),R.include(f,I),k.uniforms.add(new N(\"opacity\",(e=>e.opacity)),new N(\"layerOpacity\",(e=>e.layerOpacity))),I.hasColorTexture&&k.uniforms.add(new D(\"tex\",(e=>e.texture))),k.include(E),k.code.add(F`\n      void main() {\n        discardBySlice(vpos);\n        ${I.multipassEnabled?F`terrainDepthTest(depth);`:\"\"}\n        ${I.hasColorTexture?F`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform?F`colorUV`:F`vuv0`});\n                ${I.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:F`vec4 texColor = vec4(1.0);`}\n        ${I.hasVertexColors?F`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:F`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n\n        fragColor = vec4(opacity_);\n      }\n    `)),I.output===r.Color&&(R.include(i,I),R.include(p,I),R.include(v,I),R.include(A,I),R.include(I.instancedDoublePrecision?L:j,I),R.include(f,I),S(R.fragment,I),h(k),b(k),u(k),k.uniforms.add(z.uniforms.get(\"localOrigin\"),z.uniforms.get(\"view\"),new $(\"ambient\",(e=>e.ambient)),new $(\"diffuse\",(e=>e.diffuse)),new N(\"opacity\",(e=>e.opacity)),new N(\"layerOpacity\",(e=>e.layerOpacity))),I.hasColorTexture&&k.uniforms.add(new D(\"tex\",(e=>e.texture))),R.include(y,I),R.include(x,I),k.include(E),w(k),k.code.add(F`\n      void main() {\n        discardBySlice(vpos);\n        ${I.multipassEnabled?F`terrainDepthTest(depth);`:\"\"}\n        ${I.hasColorTexture?F`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform?F`colorUV`:F`vuv0`});\n                ${I.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:F`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${I.pbrMode===C.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${I.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":I.spherical?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${I.hasVertexColors?F`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:F`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${I.snowCover?F`albedo = mix(albedo, vec3(1), 0.9);`:F``}\n        ${F`\n            vec3 shadingNormal = normalize(vNormalWorld);\n            albedo *= 1.2;\n            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\n            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n            float treeRadialFalloff = vColor.r;\n            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n            additionalLight += backLightFactor * mainLightIntensity;`}\n        ${I.pbrMode===C.Normal||I.pbrMode===C.Schematic?I.spherical?F`vec3 normalGround = normalize(vpos + localOrigin);`:F`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:F``}\n        ${I.pbrMode===C.Normal||I.pbrMode===C.Schematic?F`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${I.snowCover?F`\n                        mrr = vec3(0.0, 1.0, 0.04);\n                        emission = vec3(0.0);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:F`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${I.transparencyPassType===_.Color?F`fragColor = premultiplyAlpha(fragColor);`:F``}\n      }\n    `)),R.include(m,I),R}const R=Object.freeze(Object.defineProperty({__proto__:null,build:I},Symbol.toStringTag,{value:\"Module\"}));export{R,I as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{s as e}from\"./vec2.js\";import{a as r}from\"./vec2f64.js\";import{ScreenSpacePass as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{CameraSpace as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";import{Float2PassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatPassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as i}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as c}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as l}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";const u=16;function f(){const r=new c,f=r.fragment;return r.include(t),f.include(o),r.include(a),f.uniforms.add(new s(\"radius\",((e,r)=>d(r.camera)))),f.code.add(i`vec3 sphere[16];\nvoid fillSphere() {\nsphere[0] = vec3(0.186937, 0.0, 0.0);\nsphere[1] = vec3(0.700542, 0.0, 0.0);\nsphere[2] = vec3(-0.864858, -0.481795, -0.111713);\nsphere[3] = vec3(-0.624773, 0.102853, -0.730153);\nsphere[4] = vec3(-0.387172, 0.260319, 0.007229);\nsphere[5] = vec3(-0.222367, -0.642631, -0.707697);\nsphere[6] = vec3(-0.01336, -0.014956, 0.169662);\nsphere[7] = vec3(0.122575, 0.1544, -0.456944);\nsphere[8] = vec3(-0.177141, 0.85997, -0.42346);\nsphere[9] = vec3(-0.131631, 0.814545, 0.524355);\nsphere[10] = vec3(-0.779469, 0.007991, 0.624833);\nsphere[11] = vec3(0.308092, 0.209288,0.35969);\nsphere[12] = vec3(0.359331, -0.184533, -0.377458);\nsphere[13] = vec3(0.192633, -0.482999, -0.065284);\nsphere[14] = vec3(0.233538, 0.293706, -0.055139);\nsphere[15] = vec3(0.417709, -0.386701, 0.442449);\n}\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn - bias, 0.0);\n}`),f.code.add(i`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`),f.uniforms.add(new n(\"nearFar\",((e,r)=>r.camera.nearFar)),new l(\"normalMap\",(e=>e.normalTexture)),new l(\"depthMap\",(e=>e.depthTexture)),new s(\"projScale\",(e=>e.projScale)),new l(\"rnm\",(e=>e.noiseTexture)),new n(\"rnmScale\",((r,t)=>e(m,t.camera.fullWidth/r.noiseTexture.descriptor.width,t.camera.fullHeight/r.noiseTexture.descriptor.height))),new s(\"intensity\",(e=>e.intensity)),new n(\"screenSize\",((r,t)=>e(m,t.camera.fullWidth,t.camera.fullHeight)))),r.outputs.add(\"fragOcclusion\",\"float\"),f.code.add(i`\n    void main(void) {\n      fillSphere();\n      vec3 fres = normalize(2.0 * texture(rnm, uv * rnmScale).xyz - 1.0);\n      float currentPixelDepth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n      if (-currentPixelDepth > nearFar.y || -currentPixelDepth < nearFar.x) {\n        fragOcclusion = 0.0;\n        return;\n      }\n\n      vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy, currentPixelDepth);\n\n      // get the normal of current fragment\n      vec4 norm4 = texture(normalMap, uv);\n      vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n      bool isTerrain = norm4.w < 0.5;\n\n      float sum = 0.0;\n      vec3 tapPixelPos;\n\n      // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n      // bug or deviation from CE somewhere else?\n      float ps = projScale / (2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n      for(int i = 0; i < ${i.int(u)}; ++i) {\n        vec2 unitOffset = reflect(sphere[i], fres).xy;\n        vec2 offset = vec2(-unitOffset * radius * ps);\n\n        //don't use current or very nearby samples\n        if( abs(offset.x) < 2.0 || abs(offset.y) < 2.0){\n          continue;\n        }\n\n        vec2 tc = vec2(gl_FragCoord.xy + offset);\n        if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n        vec2 tcTap = tc / screenSize;\n        float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap, nearFar);\n\n        if (isTerrain) {\n          if (texture(normalMap, tcTap).w < 0.5) {\n            continue;\n          }\n        }\n\n        tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n        sum += aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n      }\n\n      // output the result\n      float A = max(1.0 - sum * intensity / float(${i.int(u)}), 0.0);\n\n      // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4) / 2.2\n      A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;\n\n      fragOcclusion = A;\n    }\n  `),r}function d(e){return Math.max(10,20*e.computeScreenPixelSizeAtDist(Math.abs(4*e.relativeElevation)))}const m=r(),p=Object.freeze(Object.defineProperty({__proto__:null,build:f,getRadius:d},Symbol.toStringTag,{value:\"Module\"}));export{p as S,f as b,d as g};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{o as e}from\"./vec3.js\";import{ScreenSpacePass as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{ReadLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{Float2DrawUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Float2DrawUniform.js\";import{Float2PassUniform as a}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatPassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as s}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DDrawUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";const f=4;function u(){const u=new s,c=u.fragment;u.include(r);const m=(f+1)/2,p=1/(2*m*m);return c.include(o),c.uniforms.add(new d(\"depthMap\",(e=>e.depthTexture)),new i(\"tex\",(e=>e.colorTexture)),new t(\"blurSize\",(e=>e.blurSize)),new n(\"projScale\",((r,o)=>{const t=e(o.camera.eye,o.camera.center);return t>5e4?Math.max(0,r.projScale-(t-5e4)):r.projScale})),new a(\"nearFar\",((e,r)=>r.camera.nearFar))),c.code.add(l`\n    void blurFunction(vec2 uv, float r, float center_d, float sharpness, inout float wTotal, inout float bTotal) {\n      float c = texture(tex, uv).r;\n      float d = linearDepthFromTexture(depthMap, uv, nearFar);\n\n      float ddiff = d - center_d;\n\n      float w = exp(-r * r * ${l.float(p)} - ddiff * ddiff * sharpness);\n      wTotal += w;\n      bTotal += w * c;\n    }\n  `),u.outputs.add(\"fragBlur\",\"float\"),c.code.add(l`\n    void main(void) {\n      float b = 0.0;\n      float w_total = 0.0;\n\n      float center_d = linearDepthFromTexture(depthMap, uv, nearFar);\n\n      float sharpness = -0.05 * projScale / center_d;\n      for (int r = -${l.int(f)}; r <= ${l.int(f)}; ++r) {\n        float rf = float(r);\n        vec2 uvOffset = uv + rf * blurSize;\n        blurFunction(uvOffset, rf, center_d, sharpness, w_total, b);\n      }\n\n      fragBlur = b / w_total;\n    }\n  `),u}const c=Object.freeze(Object.defineProperty({__proto__:null,build:u},Symbol.toStringTag,{value:\"Module\"}));export{c as S,u as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{glsl as o}from\"../shaderModules/interfaces.js\";function e(e){e.vertex.code.add(o`vec4 offsetBackfacingClipPosition(vec4 posClip, vec3 posWorld, vec3 normalWorld, vec3 camPosWorld) {\nvec3 camToVert = posWorld - camPosWorld;\nbool isBackface = dot(camToVert, normalWorld) > 0.0;\nif (isBackface) {\nposClip.z += 0.0000003 * posClip.w;\n}\nreturn posClip;\n}`)}export{e as Offset};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{ColorMixModeEnum as o}from\"../../../../../layers/support/symbolColorUtils.js\";import{glsl as l}from\"../../../../core/shaderModules/interfaces.js\";function e(e){e.vertex.code.add(l`\n    vec4 decodeSymbolColor(vec4 symbolColor, out int colorMixMode) {\n      float symbolAlpha = 0.0;\n\n      const float maxTint = 85.0;\n      const float maxReplace = 170.0;\n      const float scaleAlpha = 3.0;\n\n      if (symbolColor.a > maxReplace) {\n        colorMixMode = ${l.int(o.Multiply)};\n        symbolAlpha = scaleAlpha * (symbolColor.a - maxReplace);\n      } else if (symbolColor.a > maxTint) {\n        colorMixMode = ${l.int(o.Replace)};\n        symbolAlpha = scaleAlpha * (symbolColor.a - maxTint);\n      } else if (symbolColor.a > 0.0) {\n        colorMixMode = ${l.int(o.Tint)};\n        symbolAlpha = scaleAlpha * symbolColor.a;\n      } else {\n        colorMixMode = ${l.int(o.Multiply)};\n        symbolAlpha = 0.0;\n      }\n\n      return vec4(symbolColor.r, symbolColor.g, symbolColor.b, symbolAlpha);\n    }\n  `)}export{e as DecodeSymbolColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{DecodeSymbolColor as o}from\"../../../collections/Component/Material/shader/DecodeSymbolColor.glsl.js\";import{IntegerPassUniform as r}from\"../../shaderModules/IntegerPassUniform.js\";import{glsl as e}from\"../../shaderModules/interfaces.js\";import{VertexAttribute as l}from\"../../../lib/VertexAttribute.js\";import{colorMixModes as d}from\"../../../materials/internal/MaterialUtil.js\";function i(i,t){t.hasSymbolColors?(i.include(o),i.attributes.add(l.SYMBOLCOLOR,\"vec4\"),i.varyings.add(\"colorMixMode\",\"mediump float\"),i.vertex.code.add(e`int symbolColorMixMode;\nvec4 getSymbolColor() {\nreturn decodeSymbolColor(symbolColor, symbolColorMixMode) * 0.003921568627451;\n}\nvoid forwardColorMixMode() {\ncolorMixMode = float(symbolColorMixMode) + 0.5;\n}`)):(i.fragment.uniforms.add(new r(\"colorMixMode\",(o=>d[o.colorMixMode]))),i.vertex.code.add(e`vec4 getSymbolColor() { return vec4(1.0); }\nvoid forwardColorMixMode() {}`))}export{i as SymbolColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{addNearFar as o}from\"../ForwardLinearDepth.glsl.js\";import{ShaderOutput as e}from\"../ShaderOutput.js\";import{SliceDraw as r}from\"../Slice.glsl.js\";import{Transform as t}from\"../Transform.glsl.js\";import{NormalAttribute as i,NormalType as a}from\"../attributes/NormalAttribute.glsl.js\";import{ObjectAndLayerIdColor as s}from\"../attributes/ObjectAndLayerIdColor.glsl.js\";import{TextureCoordinateAttribute as l}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexNormal as d}from\"../attributes/VertexNormal.glsl.js\";import{OutputDepth as n}from\"../output/OutputDepth.glsl.js\";import{OutputHighlight as c}from\"../output/OutputHighlight.glsl.js\";import{VisualVariables as u}from\"../shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as p}from\"../util/AlphaDiscard.glsl.js\";import{addProjViewLocalOrigin as m}from\"../util/View.glsl.js\";import{glsl as v}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as f}from\"../../shaderModules/Texture2DPassUniform.js\";import{AlphaDiscardMode as g}from\"../../../lib/basicInterfaces.js\";function h(h,x){const{vertex:j,fragment:O}=h,w=x.hasColorTexture&&x.alphaDiscardMode!==g.Opaque;switch(x.output){case e.Depth:case e.Shadow:case e.ShadowHighlight:case e.ShadowExcludeHighlight:case e.ObjectAndLayerIdColor:m(j,x),h.include(t,x),h.include(l,x),h.include(u,x),h.include(n,x),h.include(r,x),h.include(s,x),o(h),h.varyings.add(\"depth\",\"float\"),w&&O.uniforms.add(new f(\"tex\",(o=>o.texture))),j.code.add(v`void main(void) {\nvpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);\nforwardTextureCoordinates();\nforwardObjectAndLayerIdColor();\n}`),h.include(p,x),O.code.add(v`\n          void main(void) {\n            discardBySlice(vpos);\n            ${w?v`\n                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v`colorUV`:v`vuv0`});\n                    discardOrAdjustAlpha(texColor);`:\"\"}\n            ${x.output===e.ObjectAndLayerIdColor?v`outputObjectAndLayerIdColor();`:v`outputDepth(depth);`}\n          }\n        `);break;case e.Normal:{m(j,x),h.include(t,x),h.include(i,x),h.include(d,x),h.include(l,x),h.include(u,x),w&&O.uniforms.add(new f(\"tex\",(o=>o.texture))),x.normalType===a.ScreenDerivative&&h.varyings.add(\"vPositionView\",\"vec3\");const o=x.normalType===a.Attribute||x.normalType===a.Compressed;j.code.add(v`\n          void main(void) {\n            vpos = getVertexInLocalOriginSpace();\n\n            ${o?v`vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:v`\n                  // Get vertex position in camera space for screen-space derivative normals\n                  vPositionView = (view * vec4(vpos, 1.0)).xyz;\n                `}\n            vpos = subtractOrigin(vpos);\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            forwardTextureCoordinates();\n          }\n        `),h.include(r,x),h.include(p,x),O.code.add(v`\n          void main() {\n            discardBySlice(vpos);\n            ${w?v`\n                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v`colorUV`:v`vuv0`});\n                    discardOrAdjustAlpha(texColor);`:\"\"}\n\n            ${x.normalType===a.ScreenDerivative?v`vec3 normal = screenDerivativeNormal(vPositionView);`:v`\n                  vec3 normal = normalize(vNormalWorld);\n                  if (gl_FrontFacing == false){\n                    normal = -normal;\n                  }`}\n            fragColor = vec4(0.5 + 0.5 * normal, 1.0);\n          }\n        `);break}case e.Highlight:m(j,x),h.include(t,x),h.include(l,x),h.include(u,x),w&&O.uniforms.add(new f(\"tex\",(o=>o.texture))),j.code.add(v`void main(void) {\nvpos = getVertexInLocalOriginSpace();\nvpos = subtractOrigin(vpos);\nvpos = addVerticalOffset(vpos, localOrigin);\ngl_Position = transformPosition(proj, view, vpos);\nforwardTextureCoordinates();\n}`),h.include(r,x),h.include(p,x),h.include(c,x),O.code.add(v`\n          void main() {\n            discardBySlice(vpos);\n            ${w?v`\n                    vec4 texColor = texture(tex, ${x.hasColorTextureTransform?v`colorUV`:v`vuv0`});\n                    discardOrAdjustAlpha(texColor);`:\"\"}\n            outputHighlight();\n          }\n        `)}}export{h as DefaultMaterialAuxiliaryPasses};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{TextureCoordinateAttributeType as e}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTextureCoordinates as t}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{NormalsDoubleSidedMode as n}from\"./Normals.glsl.js\";import{glsl as a}from\"../../shaderModules/interfaces.js\";import{Texture2DDrawUniform as r}from\"../../shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as o}from\"../../shaderModules/Texture2DPassUniform.js\";import{BindType as s}from\"../../shaderTechnique/BindType.js\";import{VertexAttribute as d}from\"../../../lib/VertexAttribute.js\";function m(m,c){const i=m.fragment;c.hasVertexTangents?(m.attributes.add(d.TANGENT,\"vec4\"),m.varyings.add(\"vTangent\",\"vec4\"),c.doubleSidedMode===n.WindingOrder?i.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`):i.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)):i.code.add(a`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`),c.textureCoordinateType!==e.None&&(m.include(t,c),i.uniforms.add(c.pbrTextureBindType===s.Pass?new o(\"normalTexture\",(e=>e.textureNormal)):new r(\"normalTexture\",(e=>e.textureNormal))),i.code.add(a`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\nvec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;\nreturn tangentSpace * rawNormal;\n}`))}export{m as ComputeNormalTexture};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as s}from\"../../shaderModules/Texture2DPassUniform.js\";import{blurSizePixels as r}from\"../../../effects/ssao/SSAO.js\";function t(t,o){const a=t.fragment;o.receiveAmbientOcclusion?(a.uniforms.add(new s(\"ssaoTex\",((e,s)=>s.ssao?.colorTexture))),a.constants.add(\"blurSizePixelsInverse\",\"float\",1/r),a.code.add(e`float evaluateAmbientOcclusionInverse() {\nvec2 ssaoTextureSizeInverse = 1.0 / vec2(textureSize(ssaoTex, 0));\nreturn texture(ssaoTex, gl_FragCoord.xy * blurSizePixelsInverse * ssaoTextureSizeInverse).r;\n}\nfloat evaluateAmbientOcclusion() {\nreturn 1.0 - evaluateAmbientOcclusionInverse();\n}`)):a.code.add(e`float evaluateAmbientOcclusionInverse() { return 1.0; }\nfloat evaluateAmbientOcclusion() { return 0.0; }`)}export{t as EvaluateAmbientOcclusion};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{neverReached as i}from\"../../../../../../core/compilerUtils.js\";import{EvaluateAmbientLighting as n}from\"./EvaluateAmbientLighting.glsl.js\";import{EvaluateAmbientOcclusion as e}from\"./EvaluateAmbientOcclusion.glsl.js\";import{addMainLightDirection as o,addMainLightIntensity as t,MainLighting as a}from\"./MainLighting.glsl.js\";import{PhysicallyBasedRendering as r}from\"./PhysicallyBasedRendering.glsl.js\";import{PBRMode as l}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as c}from\"./PiUtils.glsl.js\";import{BooleanPassUniform as d}from\"../../shaderModules/BooleanPassUniform.js\";import{FloatPassUniform as s}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as m}from\"../../shaderModules/interfaces.js\";import{ambientBoost as g}from\"../../../lighting/SceneLighting.js\";function u(i){i.constants.add(\"ambientBoostFactor\",\"float\",g)}function h(i){i.uniforms.add(new s(\"lightingGlobalFactor\",((i,n)=>n.lighting.globalFactor)))}function p(g,p){const v=g.fragment;switch(g.include(e,p),p.pbrMode!==l.Disabled&&g.include(r,p),g.include(n,p),g.include(c),v.code.add(m`\n    const float GAMMA_SRGB = 2.1;\n    const float INV_GAMMA_SRGB = 0.4761904;\n    ${p.pbrMode===l.Disabled?\"\":\"const vec3 GROUND_REFLECTANCE = vec3(0.2);\"}\n  `),u(v),h(v),o(v),v.code.add(m`\n    float additionalDirectedAmbientLight(vec3 vPosWorld) {\n      float vndl = dot(${p.spherical?m`normalize(vPosWorld)`:m`vec3(0.0, 0.0, 1.0)`}, mainLightDirection);\n      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));\n    }\n  `),t(v),v.code.add(m`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {\nfloat additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);\nreturn (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * mainLightIntensity;\n}`),p.pbrMode){case l.Disabled:case l.WaterOnIntegratedMesh:case l.Water:g.include(a),v.code.add(m`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight)\n{\nvec3 mainLighting = evaluateMainLighting(normalWorld, shadow);\nvec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);\nvec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\nvec3 totalLight = mainLighting + ambientLighting + additionalLight;\ntotalLight = min(totalLight, vec3(PI));\nvec3 outColor = vec3((albedoLinear / PI) * totalLight);\nreturn pow(outColor, vec3(INV_GAMMA_SRGB));\n}`);break;case l.Normal:case l.Schematic:v.code.add(m`const float fillLightIntensity = 0.25;\nconst float horizonLightDiffusion = 0.4;\nconst float additionalAmbientIrradianceFactor = 0.02;\nvec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight, vec3 viewDir, vec3 normalGround, vec3 mrr, vec3 _emission, float additionalAmbientIrradiance)\n{\nvec3 viewDirection = -viewDir;\nvec3 h = normalize(viewDirection + mainLightDirection);\nPBRShadingInfo inputs;\ninputs.NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);\ninputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);\ninputs.NdotH = clamp(dot(normal, h), 0.0, 1.0);\ninputs.VdotH = clamp(dot(viewDirection, h), 0.0, 1.0);\ninputs.NdotNG = clamp(dot(normal, normalGround), -1.0, 1.0);\nvec3 reflectedView = normalize(reflect(viewDirection, normal));\ninputs.RdotNG = clamp(dot(reflectedView, normalGround), -1.0, 1.0);\ninputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\ninputs.ssao = ssao;\ninputs.metalness = mrr[0];\ninputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`),v.code.add(m`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;\ninputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));\ninputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`),p.useFillLights?v.uniforms.add(new d(\"hasFillLights\",((i,n)=>n.enableFillLights))):v.constants.add(\"hasFillLights\",\"bool\",!1),v.code.add(m`vec3 ambientDir = vec3(5.0 * normalGround[1] - normalGround[0] * normalGround[2], - 5.0 * normalGround[0] - normalGround[2] * normalGround[1], normalGround[1] * normalGround[1] + normalGround[0] * normalGround[0]);\nambientDir = ambientDir != vec3(0.0) ? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));\ninputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;\nvec3 mainLightIrradianceComponent = inputs.NdotL * (1.0 - shadow) * mainLightIntensity;\nvec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;\ninputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;\ninputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`),v.uniforms.add(new s(\"lightingSpecularStrength\",((i,n)=>n.lighting.mainLight.specularStrength)),new s(\"lightingEnvironmentStrength\",((i,n)=>n.lighting.mainLight.environmentStrength))),v.code.add(m`vec3 horizonRingDir = inputs.RdotNG * normalGround - reflectedView;\nvec3 horizonRingH = normalize(viewDirection + horizonRingDir);\ninputs.NdotH_Horizon = dot(normal, horizonRingH);\nvec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(inputs.NdotH, inputs.roughness) * mainLightIntensity * (1.0 - shadow);\nvec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;\nfloat normalDirectionModifier = mix(1., min(mix(0.1, 2.0, (inputs.NdotNG + 1.) * 0.5), 1.0), clamp(inputs.roughness * 5.0, 0.0 , 1.0));\ninputs.skyRadianceToSurface = (ambientLightRadianceComponent + horizonLightRadianceComponent) * normalDirectionModifier + mainLightRadianceComponent;\ninputs.groundRadianceToSurface = 0.5 * GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) * normalDirectionModifier + mainLightRadianceComponent;\ninputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE[1]);`),v.code.add(m`\n        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);\n        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;\n        vec3 emissionComponent = _emission == vec3(0.0) ? _emission : pow(_emission, vec3(GAMMA_SRGB));\n        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;\n        ${p.pbrMode!==l.Schematic||p.hasColorTexture?m`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs), vec3(INV_GAMMA_SRGB));`:m`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));`}\n        return outColor;\n      }\n    `);break;case l.Terrain:case l.TerrainWithWater:g.include(a),v.code.add(m`const float roughnessTerrain = 0.5;\nconst float specularityTerrain = 0.5;\nconst vec3 fresnelReflectionTerrain = vec3(0.04);\nvec3 evaluateTerrainLighting(vec3 n, vec3 c, float shadow, float ssao, vec3 al, vec3 vd, vec3 nup) {\nvec3 viewDirection = -vd;\nvec3 h = normalize(viewDirection + mainLightDirection);\nfloat NdotL = clamp(dot(n, mainLightDirection), 0.001, 1.0);\nfloat NdotV = clamp(abs(dot(n, viewDirection)), 0.001, 1.0);\nfloat NdotH = clamp(dot(n, h), 0.0, 1.0);\nfloat NdotNG = clamp(dot(n, nup), -1.0, 1.0);\nvec3 albedoLinear = pow(c, vec3(GAMMA_SRGB));\nfloat lightness = 0.3 * albedoLinear[0] + 0.5 * albedoLinear[1] + 0.2 * albedoLinear[2];\nvec3 f0 = (0.85 * lightness + 0.15) * fresnelReflectionTerrain;\nvec3 f90 =  vec3(clamp(dot(f0, vec3(50.0 * 0.33)), 0.0, 1.0));\nvec3 mainLightIrradianceComponent = (1. - shadow) * NdotL * mainLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(n, ssao) + al;\nvec3 ambientSky = ambientLightIrradianceComponent + mainLightIrradianceComponent;\nvec3 indirectDiffuse = ((1.0 - NdotNG) * mainLightIrradianceComponent + (1.0 + NdotNG ) * ambientSky) * 0.5;\nvec3 outDiffColor = albedoLinear * (1.0 - f0) * indirectDiffuse / PI;\nvec3 mainLightRadianceComponent = normalDistribution(NdotH, roughnessTerrain) * mainLightIntensity;\nvec2 dfg = prefilteredDFGAnalytical(roughnessTerrain, NdotV);\nvec3 specularColor = f0 * dfg.x + f90 * dfg.y;\nvec3 specularComponent = specularityTerrain * specularColor * mainLightRadianceComponent;\nvec3 outColorLinear = outDiffColor + specularComponent;\nvec3 outColor = pow(outColorLinear, vec3(INV_GAMMA_SRGB));\nreturn outColor;\n}`);break;default:i(p.pbrMode);case l.COUNT:}}export{p as EvaluateSceneLighting,u as addAmbientBoostFactor,h as addLightingGlobalFactor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{neverReached as a}from\"../../../../../../core/compilerUtils.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function e(e,o){const n=e.fragment;switch(n.code.add(r`struct ShadingNormalParameters {\nvec3 normalView;\nvec3 viewDirection;\n} shadingParams;`),o.doubleSidedMode){case i.None:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn normalize(params.normalView);\n}`);break;case i.View:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn dot(params.normalView, params.viewDirection) > 0.0 ? normalize(-params.normalView) : normalize(params.normalView);\n}`);break;case i.WindingOrder:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn gl_FrontFacing ? normalize(params.normalView) : normalize(-params.normalView);\n}`);break;default:a(o.doubleSidedMode);case i.COUNT:}}var i;!function(a){a[a.None=0]=\"None\",a[a.View=1]=\"View\",a[a.WindingOrder=2]=\"WindingOrder\",a[a.COUNT=3]=\"COUNT\"}(i||(i={}));export{e as Normals,i as NormalsDoubleSidedMode};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{c as r}from\"../../../../../../chunks/mat3f32.js\";import{glsl as e}from\"../../shaderModules/interfaces.js\";import{Matrix3PassUniform as o}from\"../../shaderModules/Matrix3PassUniform.js\";function a(a){a.vertex.uniforms.add(new o(\"colorTextureTransformMatrix\",(e=>null!=e.colorTextureTransformMatrix?e.colorTextureTransformMatrix:r()))),a.varyings.add(\"colorUV\",\"vec2\"),a.vertex.code.add(e`void forwardColorUV(){\ncolorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function s(a){a.vertex.uniforms.add(new o(\"normalTextureTransformMatrix\",(e=>null!=e.normalTextureTransformMatrix?e.normalTextureTransformMatrix:r()))),a.varyings.add(\"normalUV\",\"vec2\"),a.vertex.code.add(e`void forwardNormalUV(){\nnormalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function i(a){a.vertex.uniforms.add(new o(\"emissiveTextureTransformMatrix\",(e=>null!=e.emissiveTextureTransformMatrix?e.emissiveTextureTransformMatrix:r()))),a.varyings.add(\"emissiveUV\",\"vec2\"),a.vertex.code.add(e`void forwardEmissiveUV(){\nemissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function n(a){a.vertex.uniforms.add(new o(\"occlusionTextureTransformMatrix\",(e=>null!=e.occlusionTextureTransformMatrix?e.occlusionTextureTransformMatrix:r()))),a.varyings.add(\"occlusionUV\",\"vec2\"),a.vertex.code.add(e`void forwardOcclusionUV(){\nocclusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function t(a){a.vertex.uniforms.add(new o(\"metallicRoughnessTextureTransformMatrix\",(e=>null!=e.metallicRoughnessTextureTransformMatrix?e.metallicRoughnessTextureTransformMatrix:r()))),a.varyings.add(\"metallicRoughnessUV\",\"vec2\"),a.vertex.code.add(e`void forwardMetallicRoughnessUV(){\nmetallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}export{a as colorTextureUV,i as emissiveTextureUV,t as metallicRoughnessTextureUV,s as normalTextureUV,n as occlusionTextureUV};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{symbolAlphaCutoff as o}from\"./AlphaCutoff.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function d(d){d.fragment.code.add(r`\n    #define discardOrAdjustAlpha(color) { if (color.a < ${r.float(o)}) { discard; } }\n  `)}export{d as DiscardOrAdjustAlphaBlend};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{DiscardOrAdjustAlphaBlend as a}from\"./DiscardOrAdjustAlphaBlend.glsl.js\";import{FloatDrawUniform as e}from\"../../shaderModules/FloatDrawUniform.js\";import{FloatPassUniform as r}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as o}from\"../../shaderModules/interfaces.js\";import{AlphaDiscardMode as d}from\"../../../lib/basicInterfaces.js\";function s(a,e){l(a,e,new r(\"textureAlphaCutoff\",(a=>a.textureAlphaCutoff)))}function t(a,r){l(a,r,new e(\"textureAlphaCutoff\",(a=>a.textureAlphaCutoff)))}function l(e,r,s){const t=e.fragment;switch(r.alphaDiscardMode!==d.Mask&&r.alphaDiscardMode!==d.MaskBlend||t.uniforms.add(s),r.alphaDiscardMode){case d.Blend:return e.include(a);case d.Opaque:t.code.add(o`void discardOrAdjustAlpha(inout vec4 color) {\ncolor.a = 1.0;\n}`);break;case d.Mask:t.code.add(o`#define discardOrAdjustAlpha(color) { if (color.a < textureAlphaCutoff) { discard; } else { color.a = 1.0; } }`);break;case d.MaskBlend:e.fragment.code.add(o`#define discardOrAdjustAlpha(color) { if (color.a < textureAlphaCutoff) { discard; } }`)}}export{t as DiscardOrAdjustAlphaDraw,s as DiscardOrAdjustAlphaPass};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{ColorMixModeEnum as e}from\"../../../../layers/support/symbolColorUtils.js\";import{ColorConversion as t}from\"./ColorConversion.glsl.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function i(i){i.include(t),i.code.add(r`\n    vec3 mixExternalColor(vec3 internalColor, vec3 textureColor, vec3 externalColor, int mode) {\n      // workaround for artifacts in OSX using Intel Iris Pro\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/10475\n      vec3 internalMixed = internalColor * textureColor;\n      vec3 allMixed = internalMixed * externalColor;\n\n      if (mode == ${r.int(e.Multiply)}) {\n        return allMixed;\n      }\n      if (mode == ${r.int(e.Ignore)}) {\n        return internalMixed;\n      }\n      if (mode == ${r.int(e.Replace)}) {\n        return externalColor;\n      }\n\n      // tint (or something invalid)\n      float vIn = rgb2v(internalMixed);\n      vec3 hsvTint = rgb2hsv(externalColor);\n      vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n      return hsv2rgb(hsvOut);\n    }\n\n    float mixExternalOpacity(float internalOpacity, float textureOpacity, float externalOpacity, int mode) {\n      // workaround for artifacts in OSX using Intel Iris Pro\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/10475\n      float internalMixed = internalOpacity * textureOpacity;\n      float allMixed = internalMixed * externalOpacity;\n\n      if (mode == ${r.int(e.Ignore)}) {\n        return internalMixed;\n      }\n      if (mode == ${r.int(e.Replace)}) {\n        return externalOpacity;\n      }\n\n      // multiply or tint (or something invalid)\n      return allMixed;\n    }\n  `)}export{i as MixExternalColor};\n"],"names":[],"sourceRoot":""}