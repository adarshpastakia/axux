{"version":3,"file":"1835.24e2b1cc.iframe.bundle.js","mappings":";;;;;;AAUA;AACA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjBA;;;AAGA;;;;AAIA;;;;;AAKA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;AAMA;;;;;;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;AAEA;;;;;;;AAOA;AACA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;AAKA;;AAEA;;;AClJA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;;;;;;;AAOA;;AAEA;;;;AAIA;AACA;;AAEA;;;;;;;;;ACtBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;AAIA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;;;AAOA;;;;AAIA;;;;;;;;;AASA;;;;;;;;AAQA;;AAEA;;;;AAIA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;AAOA;;;;;;;;AAQA;;;AAGA;AACA;;;;;;;;;;;AAWA;;;AAGA;;;;;;;;AAQA;AACA;;;AAGA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AC/PA;;ACDA;;;;;;;;;AASA;;AAEA;;AAEA;;;;;;;;;;;;AAYA;;;AAGA;;AAEA;;;AAGA;;;;AAIA;;;AAGA;;;;;;;;AAQA;;;;;;;AAOA;;AAEA;;AAEA;;;;;;;;;;;AAWA;;;;;AAKA;;AAEA;;;;;;;;;AASA;;;AAGA;;AAEA;;;;;;;;;;AAUA;;;AAGA;;ACxGA;;AAEA;;;;;;;;;;;;;;AAcA;;AAEA;;AAEA;;AAEA;;;;;;;;AChBA;;;;;;;;AAQA;;;;;;ACVA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;AAOA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAcA;;AAEA;;AAEA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;AASA;;;;AAIA;;AAEA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;;AC9FA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;AAeA;;;AAGA;;;;;;;;;;AAUA;;AAEA;;;AC3CA;;AAEA;;;ACFA;;AAEA;;;;;;;AAOA;AACA;AACA;;;;;;AAMA;;;;;AAKA;;;;;;AAMA;;;;AAIA;;AAEA;;;AAGA;;;;;AAKA;;;;;;AAMA;;;;;;;;;;;;AAYA;;;;AAIA;AACA;AACA;;AAEA;;;;;AClEA;;;;;;;;;;;;AAYA;;;ACdA;;ACDA;;AAEA;;;;AAIA;;;;AAIA;;;;;;;;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;;;;;;;ACpGA;;;;;;;;;;ACGA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;AAkBA;;;AAGA;;;;AC/EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA","sources":["webpack://axux/./node_modules/@arcgis/core/chunks/ColorMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/HUDMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/NativeLine.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/RibbonLine.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/TextureOnly.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/WaterSurface.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/FoamRendering.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/MultipassGeometryTest.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ScreenSpaceReflections.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Gamma.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/CloudsParallaxShading.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{addNearFar as e,addLinearDepth as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as t}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{VertexColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{OutputDepth as a}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{OutputHighlight as d}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{multipassTerrainTest as n}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{VisualVariables as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as g}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as u}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as c}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as v}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{glsl as b}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as h}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{TransparencyPassType as m}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as f}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function w(w){const C=new h,{vertex:j,fragment:y,attributes:L,varyings:O}=C;c(j,w),C.include(t,w),C.include(s,w),C.include(p,w),C.include(l,w),L.add(f.POSITION,\"vec3\"),w.vvColor&&L.add(f.COLORFEATUREATTRIBUTE,\"float\"),O.add(\"vColor\",\"vec4\"),O.add(\"vpos\",\"vec3\");const T=w.hasMultipassTerrain&&(w.output===o.Color||w.output===o.Alpha);T&&O.add(\"depth\",\"float\"),j.uniforms.add(new v(\"eColor\",(e=>e.color)));const A=w.output===o.Depth;A&&(C.include(a,w),e(C),r(C)),j.code.add(b`\n    void main(void) {\n      vpos = position;\n      forwardNormalizedVertexColor();\n      forwardObjectAndLayerIdColor();\n\n      ${w.hasVertexColors?\"vColor *= eColor;\":w.vvColor?\"vColor = eColor * interpolateVVColor(colorFeatureAttribute);\":\"vColor = eColor;\"}\n      ${T?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n      gl_Position = ${A?b`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);`:b`transformPosition(proj, view, vpos);`}\n    }\n  `),C.include(i,w),T&&C.include(n,w),y.include(u);const $=w.output===o.Highlight;return $&&C.include(d,w),y.code.add(b`\n  void main() {\n    discardBySlice(vpos);\n    ${T?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n    vec4 fColor = vColor;\n\n    ${w.output===o.ObjectAndLayerIdColor?b`fColor.a = 1.0;`:\"\"}\n\n    if (fColor.a < ${b.float(g)}) {\n      discard;\n    }\n\n    ${w.output===o.Alpha?b`fragColor = vec4(fColor.a);`:\"\"}\n\n    ${w.output===o.Color?b`fragColor = highlightSlice(fColor, vpos); ${w.transparencyPassType===m.Color?\"fragColor = premultiplyAlpha(fragColor);\":\"\"}`:\"\"}\n    ${$?b`outputHighlight();`:\"\"};\n    ${w.output===o.Depth?b`outputDepth(linearDepth);`:\"\"};\n    ${w.output===o.ObjectAndLayerIdColor?b`outputObjectAndLayerIdColor();`:\"\"}\n  }\n  `),C}const C=Object.freeze(Object.defineProperty({__proto__:null,build:w},Symbol.toStringTag,{value:\"Module\"}));export{C,w as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{s as e,j as o}from\"./vec2.js\";import{a as i}from\"./vec2f64.js\";import{Z as r}from\"./vec4f64.js\";import{DEFAULT_TEX_SIZE as l}from\"../views/3d/support/engineContent/sdfPrimitives.js\";import{ShaderOutput as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{ObjectAndLayerIdColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{AlignPixel as n}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";import{HUD as c}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js\";import{HUDOcclusionPass as d}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js\";import{OutputHighlight as u}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{VisualVariables as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as f,defaultMaskAlphaCutoff as g}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{RgbaFloatEncoding as b}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{ScreenSizePerspective as m,addScreenSizePerspective as h,addScreenSizePerspectiveAlignment as w}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js\";import{addPixelRatio as x}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2PassUniform as C}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float4PassUniform as P}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as j}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as S}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as z}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as y}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as A}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as O}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function $(o){const i=new z,$=o.signedDistanceFieldEnabled;if(i.include(c,o),i.include(a,o),o.occlusionPass)return i.include(d,o),i;const{vertex:B,fragment:H}=i;i.include(m),H.include(b),H.include(v),i.include(p,o),i.include(s,o),i.varyings.add(\"vcolor\",\"vec4\"),i.varyings.add(\"vtc\",\"vec2\"),i.varyings.add(\"vsize\",\"vec2\"),o.binaryHighlightOcclusionEnabled&&i.varyings.add(\"voccluded\",\"float\"),B.uniforms.add(new P(\"viewport\",((e,o)=>o.camera.fullViewport)),new C(\"screenOffset\",((o,i)=>e(F,2*o.screenOffset[0]*i.camera.pixelRatio,2*o.screenOffset[1]*i.camera.pixelRatio))),new C(\"anchorPosition\",(e=>D(e))),new P(\"materialColor\",(e=>e.color))),x(B,o),$&&(B.uniforms.add(new P(\"outlineColor\",(e=>e.outlineColor))),H.uniforms.add(new P(\"outlineColor\",(e=>L(e)?e.outlineColor:r)),new j(\"outlineSize\",(e=>L(e)?e.outlineSize:0)))),o.hasScreenSizePerspective&&(h(B),w(B)),(o.debugDrawLabelBorder||o.binaryHighlightOcclusionEnabled)&&i.varyings.add(\"debugBorderCoords\",\"vec4\"),i.attributes.add(O.UV0,\"vec2\"),i.attributes.add(O.COLOR,\"vec4\"),i.attributes.add(O.SIZE,\"vec2\"),i.attributes.add(O.AUXPOS2,\"vec4\"),B.code.add(S`\n    void main(void) {\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n      forwardObjectAndLayerIdColor();\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n      vec2 inputSize;\n      ${o.hasScreenSizePerspective?S`\n      inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n      vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n         `:S`\n      inputSize = size;\n      vec2 screenOffsetScaled = screenOffset;`}\n\n      ${o.vvSize?\"inputSize *= vvScale(auxpos2).xx;\":\"\"}\n\n      vec2 combinedSize = inputSize * pixelRatio;\n      vec4 quadOffset = vec4(0.0);\n\n      ${o.occlusionTestEnabled||o.binaryHighlightOcclusionEnabled?\"bool visible = testVisibilityHUD(posProj);\":\"\"}\n\n      ${o.binaryHighlightOcclusionEnabled?\"voccluded = visible ? 0.0 : 1.0;\":\"\"}\n    `);const T=S`vec2 uv01 = floor(uv0);\nvec2 uv = uv0 - uv01;\nquadOffset.xy = ((uv01 - anchorPosition) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;`;o.pixelSnappingEnabled&&B.include(n);const E=o.pixelSnappingEnabled?$?S`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;`:S`posProj += quadOffset;\nif (inputSize.x == size.x) {\nposProj = alignToPixelOrigin(posProj, viewport.zw);\n}`:S`posProj += quadOffset;`;B.code.add(S`\n    ${o.occlusionTestEnabled?\"if (visible) {\":\"\"}\n    ${T}\n    ${o.vvColor?\"vcolor = interpolateVVColor(auxpos2.y) * materialColor;\":\"vcolor = color / 255.0 * materialColor;\"}\n\n    ${o.output===t.ObjectAndLayerIdColor?S`vcolor.a = 1.0;`:\"\"}\n\n    bool alphaDiscard = vcolor.a < ${S.float(f)};\n    ${$?`alphaDiscard = alphaDiscard && outlineColor.a < ${S.float(f)};`:\"\"}\n    if (alphaDiscard) {\n      // \"early discard\" if both symbol color (= fill) and outline color (if applicable) are transparent\n      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n      return;\n    } else {\n      ${E}\n      gl_Position = posProj;\n    }\n\n    vtc = uv;\n\n    ${o.debugDrawLabelBorder?\"debugBorderCoords = vec4(uv01, 1.5 / combinedSize);\":\"\"}\n    vsize = inputSize;\n    ${o.occlusionTestEnabled?S`} else { vtc = vec2(0.0);\n      ${o.debugDrawLabelBorder?\"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);}\":\"}\"}`:\"\"}\n  }\n  `),H.uniforms.add(new y(\"tex\",(e=>e.texture)));const U=o.debugDrawLabelBorder?S`(isBorder > 0.0 ? 0.0 : ${S.float(g)})`:S.float(g),V=S`\n    ${o.debugDrawLabelBorder?S`\n      float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`:\"\"}\n\n    ${$?S`\n      vec4 fillPixelColor = vcolor;\n\n      // Attempt to sample texel centers to avoid that thin cross outlines\n      // disappear with large symbol sizes.\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041\n      const float txSize = ${S.float(l)};\n      const float texelSize = 1.0 / txSize;\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor = (vsize - txSize) * texelSize;\n      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d = rgba2float(texture(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist = d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);\n      fillPixelColor.a *= fillAlphaFactor;\n\n      if (outlineSize > 0.25) {\n        vec4 outlinePixelColor = outlineColor;\n        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n        outlinePixelColor.a *= outlineAlphaFactor;\n\n        if (\n          outlineAlphaFactor + fillAlphaFactor < ${U} ||\n          fillPixelColor.a + outlinePixelColor.a < ${S.float(f)}\n        ) {\n          discard;\n        }\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        fragColor = vec4(compositeColor, compositeAlpha);\n      } else {\n        if (fillAlphaFactor < ${U}) {\n          discard;\n        }\n\n        fragColor = premultiplyAlpha(fillPixelColor);\n      }\n\n      // visualize SDF:\n      // fragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      `:S`\n          vec4 texColor = texture(tex, vtc, -0.5);\n          if (texColor.a < ${U}) {\n            discard;\n          }\n          fragColor = texColor * premultiplyAlpha(vcolor);\n          `}\n\n    // Draw debug border with transparency, so that original texels along border are still partially visible\n    ${o.debugDrawLabelBorder?S`fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder * 0.5);`:\"\"}\n  `;return o.output===t.Alpha&&H.code.add(S`\n      void main() {\n        ${V}\n        fragColor = vec4(fragColor.a);\n      }\n      `),o.output===t.ObjectAndLayerIdColor&&H.code.add(S`\n      void main() {\n        ${V}\n        outputObjectAndLayerIdColor();\n      }\n      `),o.output===t.Color&&H.code.add(S`\n    void main() {\n      ${V}\n      ${o.transparencyPassType===A.FrontFace?\"fragColor.rgb /= fragColor.a;\":\"\"}\n    }\n    `),o.output===t.Highlight&&(i.include(u,o),H.code.add(S`\n    void main() {\n      ${V}\n      ${o.binaryHighlightOcclusionEnabled?S`\n          if (voccluded == 1.0) {\n            fragColor = vec4(1.0, 1.0, 0.0, 1.0);\n          } else {\n            fragColor = vec4(1.0, 0.0, 1.0, 1.0);\n          }`:\"outputHighlight();\"}\n    }\n    `)),i}function L(e){return e.outlineColor[3]>0&&e.outlineSize>0}function D(e,i=F){return e.textureIsSignedDistanceField?B(e.anchorPosition,e.distanceFieldBoundingBox,i):o(i,e.anchorPosition),i}function B(o,i,r){null!=i?e(r,o[0]*(i[2]-i[0])+i[0],o[1]*(i[3]-i[1])+i[1]):e(r,0,0)}const F=i(),H=Object.freeze(Object.defineProperty({__proto__:null,build:$,calculateAnchorPosForRendering:D},Symbol.toStringTag,{value:\"Module\"}));export{H,$ as b,D as c};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{VertexColor as r}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{OutputHighlight as t}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{LineStipple as l,computePixelSize as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js\";import{symbolAlphaCutoff as n}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{addProjViewLocalOrigin as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as p}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as c}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as g}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{VertexAttribute as m}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function u(u){const v=new g,{vertex:f,fragment:h}=v;return v.include(i,u),v.include(r,u),v.include(l,u),a(f,u),u.stippleEnabled&&(v.attributes.add(m.UV0,\"vec2\"),v.attributes.add(m.AUXPOS1,\"vec3\"),f.uniforms.add(new d(\"viewport\",((e,o)=>o.camera.fullViewport)))),v.attributes.add(m.POSITION,\"vec3\"),v.varyings.add(\"vpos\",\"vec3\"),f.code.add(c`void main(void) {\nvpos = position;\nforwardNormalizedVertexColor();\ngl_Position = transformPosition(proj, view, vpos);`),u.stippleEnabled&&(f.code.add(c`vec4 vpos2 = transformPosition(proj, view, auxpos1);\nvec2 ndcToPixel = viewport.zw * 0.5;\nfloat lineSegmentPixelSize = length((vpos2.xy / vpos2.w - gl_Position.xy / gl_Position.w) * ndcToPixel);`),u.draped?f.uniforms.add(new p(\"worldToScreenRatio\",((e,o)=>1/o.screenToPCSRatio))):f.code.add(c`vec3 segmentCenter = (position + auxpos1) * 0.5;\nfloat worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`),f.code.add(c`float discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);`),u.draped?f.code.add(c`float startPseudoScreen = uv0.y * discreteWorldToScreenRatio - mix(0.0, lineSegmentPixelSize, uv0.x);\nfloat segmentLengthPseudoScreen = lineSegmentPixelSize;`):f.code.add(c`float segmentLengthRender = length(position - auxpos1);\nfloat startPseudoScreen = mix(uv0.y, uv0.y - segmentLengthRender, uv0.x) * discreteWorldToScreenRatio;\nfloat segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`),f.uniforms.add(new p(\"stipplePatternPixelSize\",(e=>s(e)))),f.code.add(c`vec2 stippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, lineSegmentPixelSize, stipplePatternPixelSize);\nvStippleDistance = mix(stippleDistanceLimits.x, stippleDistanceLimits.y, uv0.x);\nvStippleDistance *= gl_Position.w;`)),f.code.add(c`}`),u.output===e.Highlight&&v.include(t,u),v.include(o,u),h.uniforms.add(new p(\"alphaCoverage\",((e,o)=>Math.min(1,e.width*o.camera.pixelRatio)))),u.hasVertexColors||h.uniforms.add(new d(\"constantColor\",(e=>e.color))),h.code.add(c`\n  void main() {\n    discardBySlice(vpos);\n\n    vec4 color = ${u.hasVertexColors?\"vColor\":\"constantColor\"};\n\n    float stippleAlpha = getStippleAlpha();\n    discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);\n\n    vec4 finalColor = blendStipple(vec4(color.rgb, color.a * alphaCoverage), stippleAlpha);\n\n    ${u.output===e.ObjectAndLayerIdColor?c`finalColor.a = 1.0;`:\"\"}\n\n    if (finalColor.a < ${c.float(n)}) {\n      discard;\n    }\n\n    ${u.output===e.Color?c`fragColor = highlightSlice(finalColor, vpos);`:\"\"}\n    ${u.output===e.Highlight?c`outputHighlight();`:\"\"}\n  }\n  `),v}const v=Object.freeze(Object.defineProperty({__proto__:null,build:u},Symbol.toStringTag,{value:\"Module\"}));export{v as N,u as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{addLinearDepth as e,addCalculateLinearDepth as t}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as i}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{ObjectAndLayerIdColor as r}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{RibbonVertexPosition as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js\";import{OutputDepth as a}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js\";import{LineStipple as s,computePixelSize as l}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js\";import{MarkerSizing as d}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js\";import{multipassTerrainTest as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PiUtils as c}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PiUtils.glsl.js\";import{symbolAlphaCutoff as g}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as m}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as v,addPixelRatio as f}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2PassUniform as h}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float4PassUniform as u}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as S}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4PassUniform as b}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as x}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{TransparencyPassType as L}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as w}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{LineMarkerSpace as y}from\"../views/3d/webgl-engine/shaders/LineMarkerTechniqueConfiguration.js\";import{CapType as C}from\"../views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js\";const j=1;function A(A){const R=new x,{vertex:P,fragment:F}=R,z=A.hasMultipassTerrain&&(A.output===i.Color||A.output===i.Alpha);R.include(c),R.include(n,A),R.include(s,A);const E=A.applyMarkerOffset&&!A.draped;E&&(P.uniforms.add(new D(\"markerScale\",(e=>e.markerScale))),R.include(d,{space:y.World,draped:!1})),A.output===i.Depth&&R.include(a,A),R.include(r,A),v(P,A),P.uniforms.add(new b(\"inverseProjectionMatrix\",((e,t)=>t.camera.inverseProjectionMatrix)),new h(\"nearFar\",((e,t)=>t.camera.nearFar)),new D(\"miterLimit\",(e=>\"miter\"!==e.join?0:e.miterLimit)),new u(\"viewport\",((e,t)=>t.camera.fullViewport))),P.constants.add(\"LARGE_HALF_FLOAT\",\"float\",65500),R.attributes.add(w.POSITION,\"vec3\"),R.attributes.add(w.SUBDIVISIONFACTOR,\"float\"),R.attributes.add(w.UV0,\"vec2\"),R.attributes.add(w.AUXPOS1,\"vec3\"),R.attributes.add(w.AUXPOS2,\"vec3\"),R.varyings.add(\"vColor\",\"vec4\"),R.varyings.add(\"vpos\",\"vec3\"),e(R),z&&R.varyings.add(\"depth\",\"float\");const T=A.stippleEnabled&&A.stippleScaleWithLineWidth;T&&R.varyings.add(\"vLineSizeInv\",\"float\");const W=A.capType===C.ROUND,O=T||W;O&&R.varyings.add(\"vLineWidth\",\"float\");const V=A.innerColorEnabled||W;V&&R.varyings.add(\"vLineDistance\",\"float\");const N=A.stippleEnabled&&W,I=A.falloffEnabled||N;I&&R.varyings.add(\"vLineDistanceNorm\",\"float\"),W&&(R.varyings.add(\"vSegmentSDF\",\"float\"),R.varyings.add(\"vReverseSegmentSDF\",\"float\")),P.code.add(S`#define PERPENDICULAR(v) vec2(v.y, -v.x);\nfloat interp(float ncp, vec4 a, vec4 b) {\nreturn (-ncp - a.z) / (b.z - a.z);\n}\nvec2 rotate(vec2 v, float a) {\nfloat s = sin(a);\nfloat c = cos(a);\nmat2 m = mat2(c, -s, s, c);\nreturn m * v;\n}`),P.code.add(S`vec4 projectAndScale(vec4 pos) {\nvec4 posNdc = proj * pos;\nposNdc.xy *= viewport.zw / posNdc.w;\nreturn posNdc;\n}`),t(R),P.code.add(S`\n    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {\n      float vnp = nearFar[0] * 0.99;\n\n      if(pos.z > -nearFar[0]) {\n        //current pos behind ncp --> we need to clip\n        if (!isStartVertex) {\n          if(prev.z < -nearFar[0]) {\n            //previous in front of ncp\n            pos = mix(prev, pos, interp(vnp, prev, pos));\n            next = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        } else {\n          if(next.z < -nearFar[0]) {\n            //next in front of ncp\n            pos = mix(pos, next, interp(vnp, pos, next));\n            prev = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        }\n      } else {\n        //current position visible\n        if (prev.z > -nearFar[0]) {\n          //previous behind ncp\n          prev = mix(pos, prev, interp(vnp, pos, prev));\n        }\n        if (next.z > -nearFar[0]) {\n          //next behind ncp\n          next = mix(next, pos, interp(vnp, next, pos));\n        }\n      }\n\n      ${z?\"depth = pos.z;\":\"\"}\n      linearDepth = calculateLinearDepth(nearFar,pos.z);\n\n      pos = projectAndScale(pos);\n      next = projectAndScale(next);\n      prev = projectAndScale(prev);\n    }\n  `),f(P,A),P.code.add(S`\n  void main(void) {\n    // unpack values from uv0.y\n    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;\n\n    float coverage = 1.0;\n\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      bool isJoin = abs(uv0.y) < 3.0;\n\n      float lineSize = getSize();\n      float lineWidth = lineSize * pixelRatio;\n\n      ${O?S`vLineWidth = lineWidth;`:\"\"}\n      ${T?S`vLineSizeInv = 1.0 / lineSize;`:\"\"}\n\n      // convert sub-pixel coverage to alpha\n      if (lineWidth < 1.0) {\n        coverage = lineWidth;\n        lineWidth = 1.0;\n      }else{\n        // Ribbon lines cannot properly render non-integer sizes. Round width to integer size if\n        // larger than one for better quality. Note that we do render < 1 pixels more or less correctly\n        // so we only really care to round anything larger than 1.\n        lineWidth = floor(lineWidth + 0.5);\n      }\n\n      vec4 pos  = view * vec4(position.xyz, 1.0);\n      vec4 prev = view * vec4(auxpos1.xyz, 1.0);\n      vec4 next = view * vec4(auxpos2.xyz, 1.0);\n  `),E&&P.code.add(S`vec4 other = isStartVertex ? next : prev;\nbool markersHidden = areWorldMarkersHidden(pos, other);\nif(!isJoin && !markersHidden) {\npos.xyz += normalize(other.xyz - pos.xyz) * getWorldMarkerSize(pos) * 0.5;\n}`),P.code.add(S`clipAndTransform(pos, prev, next, isStartVertex);\nvec2 left = (pos.xy - prev.xy);\nvec2 right = (next.xy - pos.xy);\nfloat leftLen = length(left);\nfloat rightLen = length(right);`);(A.stippleEnabled||W)&&P.code.add(S`\n      float isEndVertex = float(!isStartVertex);\n      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);\n      vec2 segment = mix(right, left, isEndVertex);\n      ${W?S`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);`:\"\"}\n    `),P.code.add(S`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);\nright = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);\nvec2 capDisplacementDir = vec2(0, 0);\nvec2 joinDisplacementDir = vec2(0, 0);\nfloat displacementLen = lineWidth;\nif (isJoin) {\nbool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;\njoinDisplacementDir = normalize(left + right);\njoinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\nif (leftLen > 0.001 && rightLen > 0.001) {\nfloat nDotSeg = dot(joinDisplacementDir, left);\ndisplacementLen /= length(nDotSeg * left - joinDisplacementDir);\nif (!isOutside) {\ndisplacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\n}\n}\nif (isOutside && (displacementLen > miterLimit * lineWidth)) {`),A.roundJoins?P.code.add(S`\n        vec2 startDir = leftLen < 0.001 ? right : left;\n        startDir = PERPENDICULAR(startDir);\n\n        vec2 endDir = rightLen < 0.001 ? left : right;\n        endDir = PERPENDICULAR(endDir);\n\n        float factor = ${A.stippleEnabled?S`min(1.0, subdivisionFactor * ${S.float((j+2)/(j+1))})`:S`subdivisionFactor`};\n\n        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));\n        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);\n      `):P.code.add(S`if (leftLen < 0.001) {\njoinDisplacementDir = right;\n}\nelse if (rightLen < 0.001) {\njoinDisplacementDir = left;\n}\nelse {\njoinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;\n}\njoinDisplacementDir = PERPENDICULAR(joinDisplacementDir);`);const $=A.capType!==C.BUTT;return P.code.add(S`\n        displacementLen = lineWidth;\n      }\n    } else {\n      // CAP handling ---------------------------------------------------\n      joinDisplacementDir = isStartVertex ? right : left;\n      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n\n      ${$?S`capDisplacementDir = isStartVertex ? -right : left;`:\"\"}\n    }\n  `),P.code.add(S`\n    // Displacement (in pixels) caused by join/or cap\n    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;\n\n    ${I||V?S`float lineDistNorm = sign(uv0.y) * pos.w;`:\"\"}\n\n    ${V?S`vLineDistance = lineWidth * lineDistNorm;`:\"\"}\n    ${I?S`vLineDistanceNorm = lineDistNorm;`:\"\"}\n\n    pos.xy += dpos;\n  `),W&&P.code.add(S`vec2 segmentDir = normalize(segment);\nvSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;\nvReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`),A.stippleEnabled&&(A.draped?P.uniforms.add(new D(\"worldToScreenRatio\",((e,t)=>1/t.screenToPCSRatio))):P.code.add(S`vec3 segmentCenter = mix((auxpos2 + position) * 0.5, (position + auxpos1) * 0.5, isEndVertex);\nfloat worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`),P.code.add(S`float segmentLengthScreenDouble = length(segment);\nfloat segmentLengthScreen = segmentLengthScreenDouble * 0.5;\nfloat discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);\nfloat segmentLengthRender = length(mix(auxpos2 - position, position - auxpos1, isEndVertex));\nvStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`),A.draped?P.code.add(S`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;\nfloat startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`):P.code.add(S`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;\nfloat segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`),P.uniforms.add(new D(\"stipplePatternPixelSize\",(e=>l(e)))),P.code.add(S`\n      float patternLength = ${A.stippleScaleWithLineWidth?\"lineSize * \":\"\"} stipplePatternPixelSize;\n\n      // Compute the coordinates at both start and end of the line segment, because we need both to clamp to in the fragment shader\n      vStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);\n\n      vStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);\n\n      // Adjust the coordinate to the displaced position (the pattern is shortened/overextended on the in/outside of joins)\n      if (segmentLengthScreenDouble >= 0.001) {\n        // Project the actual vertex position onto the line segment. Note that the resulting factor is within [0..1] at the\n        // original vertex positions, and slightly outside of that range at the displaced positions\n        vec2 stippleDisplacement = pos.xy - segmentOrigin;\n        float stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);\n\n        // Apply this offset to the actual vertex coordinate (can be screen or pseudo-screen space)\n        vStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);\n      }\n\n      // Cancel out perspective correct interpolation because we want this length the really represent the screen distance\n      vStippleDistanceLimits *= pos.w;\n      vStippleDistance *= pos.w;\n\n      // Disable stipple distance limits on caps\n      vStippleDistanceLimits = isJoin ?\n                                 vStippleDistanceLimits :\n                                 isStartVertex ?\n                                  vec2(-1e038, vStippleDistanceLimits.y) :\n                                  vec2(vStippleDistanceLimits.x, 1e038);\n    `)),P.code.add(S`\n      // Convert back into NDC\n      pos.xy = (pos.xy / viewport.zw) * pos.w;\n\n      vColor = getColor();\n      vColor.a *= coverage;\n\n      ${A.wireframe&&!A.draped?\"pos.z -= 0.001 * pos.w;\":\"\"}\n\n      // transform final position to camera space for slicing\n      vpos = (inverseProjectionMatrix * pos).xyz;\n      gl_Position = pos;\n      forwardObjectAndLayerIdColor();\n    }\n  }\n  `),z&&R.include(p,A),R.include(o,A),F.include(m),F.code.add(S`\n  void main() {\n    discardBySlice(vpos);\n    ${z?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n  `),A.wireframe?F.code.add(S`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`):(W&&F.code.add(S`\n      float sdf = min(vSegmentSDF, vReverseSegmentSDF);\n      vec2 fragmentPosition = vec2(\n        min(sdf, 0.0),\n        vLineDistance\n      ) * gl_FragCoord.w;\n\n      float fragmentRadius = length(fragmentPosition);\n      float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale\n      float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);\n\n      if (capCoverage < ${S.float(g)}) {\n        discard;\n      }\n    `),N?F.code.add(S`\n      vec2 stipplePosition = vec2(\n        min(getStippleSDF() * 2.0 - 1.0, 0.0),\n        vLineDistanceNorm * gl_FragCoord.w\n      );\n      float stippleRadius = length(stipplePosition * vLineWidth);\n      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale\n      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);\n      float stippleAlpha = step(${S.float(g)}, stippleCoverage);\n      `):F.code.add(S`float stippleAlpha = getStippleAlpha();`),F.uniforms.add(new u(\"intrinsicColor\",(e=>e.color))),A.output!==i.ObjectAndLayerIdColor&&F.code.add(S`discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);`),F.code.add(S`vec4 color = intrinsicColor * vColor;`),A.innerColorEnabled&&(F.uniforms.add(new u(\"innerColor\",(e=>e.innerColor??e.color)),new D(\"innerWidth\",((e,t)=>e.innerWidth*t.camera.pixelRatio))),F.code.add(S`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;\nfloat innerAA = clamp(0.5 - distToInner, 0.0, 1.0);\nfloat innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);\ncolor = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)),F.code.add(S`vec4 finalColor = blendStipple(color, stippleAlpha);`),A.falloffEnabled&&(F.uniforms.add(new D(\"falloff\",(e=>e.falloff))),F.code.add(S`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`))),F.code.add(S`\n    ${A.output===i.ObjectAndLayerIdColor?S`finalColor.a = 1.0;`:\"\"}\n\n    if (finalColor.a < ${S.float(g)}) {\n      discard;\n    }\n\n    ${A.output===i.Alpha?S`fragColor = vec4(finalColor.a);`:\"\"}\n    ${A.output===i.Color?S`fragColor = highlightSlice(finalColor, vpos);`:\"\"}\n    ${A.output===i.Color&&A.transparencyPassType===L.Color?\"fragColor = premultiplyAlpha(fragColor);\":\"\"}\n    ${A.output===i.Highlight?S`fragColor = vec4(1.0);`:\"\"}\n    ${A.output===i.Depth?S`outputDepth(linearDepth);`:\"\"}\n    ${A.output===i.ObjectAndLayerIdColor?S`outputObjectAndLayerIdColor();`:\"\"}\n  }\n  `),R}const R=Object.freeze(Object.defineProperty({__proto__:null,RIBBONLINE_NUM_ROUND_JOIN_SUBDIVISIONS:j,build:A},Symbol.toStringTag,{value:\"Module\"}));export{j as R,R as a,A as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{f as e}from\"./vec4f64.js\";import{ScreenSpacePass as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{Float4PassUniform as o}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{NoParameters as s,glsl as t}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as n}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as a}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";class i extends s{constructor(){super(...arguments),this.color=e(1,1,1,1)}}function l(){const e=new n;return e.include(r),e.fragment.uniforms.add(new a(\"tex\",(e=>e.texture)),new o(\"uColor\",(e=>e.color))),e.fragment.code.add(t`void main() {\nvec4 texColor = texture(tex, uv);\nfragColor = texColor * uColor;\n}`),e}const d=Object.freeze(Object.defineProperty({__proto__:null,TextureOnlyPassParameters:i,build:l},Symbol.toStringTag,{value:\"Module\"}));export{i as T,d as a,l as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{ObjectAndLayerIdColor as a}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{OutputHighlight as s}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{EvaluateAmbientLighting as n}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js\";import{MainLighting as t,addMainLightDirection as d,addMainLightIntensity as l}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{multipassTerrainTest as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{NormalUtils as g}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js\";import{PBRMode as c}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapDraw as m}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{Water as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js\";import{WaterDistortion as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js\";import{symbolAlphaCutoff as w}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as h}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as f,addCameraPosition as b}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as y}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as j}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as C}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as L}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{TransparencyPassType as P}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as M}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function S(S){const x=new L,{vertex:_,fragment:F}=x;f(_,S),x.include(i,S),x.attributes.add(M.POSITION,\"vec3\"),x.attributes.add(M.UV0,\"vec2\");const T=new y(\"waterColor\",(e=>e.color));if(S.output===r.Color&&S.isDraped)return x.varyings.add(\"vpos\",\"vec3\"),_.uniforms.add(T),_.code.add(C`\n        void main(void) {\n          if (waterColor.a < ${C.float(w)}) {\n            // Discard this vertex\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n            return;\n          }\n\n          vpos = position;\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    `),F.uniforms.add(T),F.code.add(C`void main() {\nfragColor = waterColor;\n}`),x;switch(S.output!==r.Color&&S.output!==r.Alpha||(x.include(g,S),x.include(e,S),x.varyings.add(\"vuv\",\"vec2\"),x.varyings.add(\"vpos\",\"vec3\"),x.varyings.add(\"vnormal\",\"vec3\"),x.varyings.add(\"vtbnMatrix\",\"mat3\"),S.hasMultipassTerrain&&x.varyings.add(\"depth\",\"float\"),_.uniforms.add(T),_.code.add(C`\n      void main(void) {\n        if (waterColor.a < ${C.float(w)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vuv = uv0;\n        vpos = position;\n\n        vnormal = getLocalUp(vpos, localOrigin);\n        vtbnMatrix = getTBNMatrix(vnormal);\n\n        ${S.hasMultipassTerrain?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n\n        gl_Position = transformPosition(proj, view, vpos);\n        ${S.output===r.Color?\"forwardLinearDepth();\":\"\"}\n      }\n    `)),x.include(v,S),S.output){case r.Alpha:x.include(o,S),F.uniforms.add(T),F.code.add(C`\n        void main() {\n          discardBySlice(vpos);\n          ${S.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n\n          fragColor = vec4(waterColor.a);\n        }\n      `);break;case r.Color:x.include(t),x.include(n,{pbrMode:c.Disabled,lightingSphericalHarmonicsOrder:2}),x.include(u),x.include(o,S),x.include(m,S),x.include(p,S),F.uniforms.add(T,new j(\"timeElapsed\",(e=>e.timeElapsed)),_.uniforms.get(\"view\"),_.uniforms.get(\"localOrigin\")),b(F,S),F.include(h),d(F),l(F),F.code.add(C`\n      void main() {\n        discardBySlice(vpos);\n        ${S.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        vec3 localUp = vnormal;\n        // the created normal is in tangent space\n        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);\n        vec3 v = -normalize(vpos - cameraPosition);\n        float shadow = ${S.receiveShadows?C`1.0 - readShadowMap(vpos, linearDepth)`:\"1.0\"};\n        vec4 vPosView = view * vec4(vpos, 1.0);\n        vec4 final = vec4(getSeaColor(n, v, mainLightDirection, waterColor.rgb, mainLightIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);\n\n        // gamma correction\n        fragColor = delinearizeGamma(final);\n        fragColor = highlightSlice(fragColor, vpos);\n        ${S.transparencyPassType===P.Color?\"fragColor = premultiplyAlpha(fragColor);\":\"\"}\n      }\n    `);break;case r.Normal:x.include(g,S),x.include(u,S),x.include(o,S),x.varyings.add(\"vpos\",\"vec3\"),x.varyings.add(\"vuv\",\"vec2\"),_.uniforms.add(T),_.code.add(C`\n        void main(void) {\n          if (waterColor.a < ${C.float(w)}) {\n            // Discard this vertex\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n            return;\n          }\n\n          vuv = uv0;\n          vpos = position;\n\n          gl_Position = transformPosition(proj, view, vpos);\n        }\n    `),F.uniforms.add(new j(\"timeElapsed\",(e=>e.timeElapsed))),F.code.add(C`void main() {\ndiscardBySlice(vpos);\nvec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);\ntangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);\nfragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);\n}`);break;case r.Highlight:x.include(s,S),x.varyings.add(\"vpos\",\"vec3\"),_.uniforms.add(T),_.code.add(C`\n      void main(void) {\n        if (waterColor.a < ${C.float(w)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vpos = position;\n        gl_Position = transformPosition(proj, view, vpos);\n      }\n    `),x.include(o,S),F.code.add(C`void main() {\ndiscardBySlice(vpos);\noutputHighlight();\n}`);break;case r.ObjectAndLayerIdColor:x.include(a,S),x.varyings.add(\"vpos\",\"vec3\"),_.uniforms.add(T),_.code.add(C`\n      void main(void) {\n        if (waterColor.a < ${C.float(w)}) {\n          // Discard this vertex\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          return;\n        }\n\n        vpos = position;\n        gl_Position = transformPosition(proj, view, vpos);\n        forwardObjectAndLayerIdColor();\n      }\n    `),x.include(o,S),F.code.add(C`void main() {\ndiscardBySlice(vpos);\noutputObjectAndLayerIdColor();\n}`)}return x}const x=Object.freeze(Object.defineProperty({__proto__:null,build:S},Symbol.toStringTag,{value:\"Module\"}));export{x as W,S as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{VisualVariables as t}from\"../shading/VisualVariables.glsl.js\";import{Float3PassUniform as i}from\"../../shaderModules/Float3PassUniform.js\";import{FloatPassUniform as e}from\"../../shaderModules/FloatPassUniform.js\";import{FloatsPassUniform as a}from\"../../shaderModules/FloatsPassUniform.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";import{VertexAttribute as v}from\"../../../lib/VertexAttribute.js\";const o=8;function c(c,s){const l=c.vertex;l.uniforms.add(new e(\"intrinsicWidth\",(t=>t.width))),s.vvSize?(c.attributes.add(v.SIZEFEATUREATTRIBUTE,\"float\"),l.uniforms.add(new i(\"vvSizeMinSize\",(t=>t.vvSize.minSize)),new i(\"vvSizeMaxSize\",(t=>t.vvSize.maxSize)),new i(\"vvSizeOffset\",(t=>t.vvSize.offset)),new i(\"vvSizeFactor\",(t=>t.vvSize.factor))),l.code.add(r`float getSize() {\nreturn intrinsicWidth * clamp(vvSizeOffset + sizeFeatureAttribute * vvSizeFactor, vvSizeMinSize, vvSizeMaxSize).x;\n}`)):(c.attributes.add(v.SIZE,\"float\"),l.code.add(r`float getSize(){\nreturn intrinsicWidth * size;\n}`)),s.vvOpacity?(c.attributes.add(v.OPACITYFEATUREATTRIBUTE,\"float\"),l.constants.add(\"vvOpacityNumber\",\"int\",8),l.uniforms.add(new a(\"vvOpacityValues\",(t=>t.vvOpacity.values),o),new a(\"vvOpacityOpacities\",(t=>t.vvOpacity.opacityValues),o)),l.code.add(r`float interpolateOpacity( float value ){\nif (value <= vvOpacityValues[0]) {\nreturn vvOpacityOpacities[0];\n}\nfor (int i = 1; i < vvOpacityNumber; ++i) {\nif (vvOpacityValues[i] >= value) {\nfloat f = (value - vvOpacityValues[i-1]) / (vvOpacityValues[i] - vvOpacityValues[i-1]);\nreturn mix(vvOpacityOpacities[i-1], vvOpacityOpacities[i], f);\n}\n}\nreturn vvOpacityOpacities[vvOpacityNumber - 1];\n}\nvec4 applyOpacity( vec4 color ){\nreturn vec4(color.xyz, interpolateOpacity(opacityFeatureAttribute));\n}`)):l.code.add(r`vec4 applyOpacity( vec4 color ){\nreturn color;\n}`),s.vvColor?(c.include(t,s),c.attributes.add(v.COLORFEATUREATTRIBUTE,\"float\"),l.code.add(r`vec4 getColor(){\nreturn applyOpacity(interpolateVVColor(colorFeatureAttribute));\n}`)):(c.attributes.add(v.COLOR,\"vec4\"),l.code.add(r`vec4 getColor(){\nreturn applyOpacity(color);\n}`))}export{c as RibbonVertexPosition};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{BooleanPassUniform as e}from\"../../shaderModules/BooleanPassUniform.js\";import{glsl as i}from\"../../shaderModules/interfaces.js\";function o(o){o.uniforms.add(new e(\"alignPixelEnabled\",((e,i)=>i.alignPixelEnabled))),o.code.add(i`vec4 alignToPixelCenter(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.500123) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = (floor(xy * widthHeight) + vec2(0.5)) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`),o.code.add(i`vec4 alignToPixelOrigin(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.5) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = floor((xy + 0.5 * pixelSz) * widthHeight) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`)}export{o as AlignPixel};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{addVerticalOffset as e}from\"../attributes/VerticalOffset.glsl.js\";import{AlignPixel as t}from\"./AlignPixel.glsl.js\";import{HUDTransparencyRenderStyle as o}from\"./HUDUniforms.js\";import{ScreenSizePerspective as a,addScreenSizePerspectiveAlignment as i}from\"../util/ScreenSizePerspective.glsl.js\";import{addProjViewLocalOrigin as r,addCameraPosition as s,addViewNormal as n,addPixelRatio as l}from\"../util/View.glsl.js\";import{Float4PassUniform as c}from\"../../shaderModules/Float4PassUniform.js\";import{FloatPassUniform as f}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as d}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as p}from\"../../shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as u}from\"../../../lib/VertexAttribute.js\";var v;function m(m,O){m.include(a),m.attributes.add(u.POSITION,\"vec3\"),m.attributes.add(u.NORMAL,\"vec3\"),m.attributes.add(u.AUXPOS1,\"vec4\");const w=m.vertex;r(w,O),s(w,O),w.uniforms.add(new c(\"viewport\",((e,t)=>t.camera.fullViewport)),new f(\"polygonOffset\",(e=>e.shaderPolygonOffset)),new f(\"cameraGroundRelative\",((e,t)=>t.camera.aboveGround?1:-1)),new f(\"renderTransparentlyOccludedHUD\",((e,t)=>t.renderTransparentlyOccludedHUD===o.Occluded?1:t.renderTransparentlyOccludedHUD===o.NotOccluded?0:.75)),new p(\"hudVisibilityTexture\",((e,t)=>t.hudVisibilityTexture))),O.hasVerticalOffset&&e(w),w.constants.add(\"smallOffsetAngle\",\"float\",.984807753012208),w.code.add(d`struct ProjectHUDAux {\nvec3 posModel;\nvec3 posView;\nvec3 vnormal;\nfloat distanceToCamera;\nfloat absCosAngle;\n};`),w.code.add(d`float applyHUDViewDependentPolygonOffset(float pointGroundDistance, float absCosAngle, inout vec3 posView) {\nfloat pointGroundSign = sign(pointGroundDistance);\nif (pointGroundSign == 0.0) {\npointGroundSign = cameraGroundRelative;\n}\nfloat groundRelative = cameraGroundRelative * pointGroundSign;\nif (polygonOffset > .0) {\nfloat cosAlpha = clamp(absCosAngle, 0.01, 1.0);\nfloat tanAlpha = sqrt(1.0 - cosAlpha * cosAlpha) / cosAlpha;\nfloat factor = (1.0 - tanAlpha / viewport[2]);\nif (groundRelative > 0.0) {\nposView *= factor;\n}\nelse {\nposView /= factor;\n}\n}\nreturn groundRelative;\n}`),O.draped&&!O.hasVerticalOffset||n(w),O.draped||(w.uniforms.add(new f(\"perDistancePixelRatio\",((e,t)=>Math.tan(t.camera.fovY/2)/(t.camera.fullViewport[2]/2)))),w.code.add(d`void applyHUDVerticalGroundOffset(vec3 normalModel, inout vec3 posModel, inout vec3 posView) {\nfloat distanceToCamera = length(posView);\nfloat pixelOffset = distanceToCamera * perDistancePixelRatio * 0.5;\nvec3 modelOffset = normalModel * cameraGroundRelative * pixelOffset;\nvec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\nposModel += modelOffset;\nposView += viewOffset;\n}`)),O.screenCenterOffsetUnitsEnabled===v.Screen&&l(w,O),O.hasScreenSizePerspective&&i(w),w.code.add(d`\n    vec4 projectPositionHUD(out ProjectHUDAux aux) {\n      // centerOffset is in view space and is used to implement world size offsetting\n      // of labels with respect to objects. It also pulls the label towards the viewer\n      // so that the label is visible in front of the object.\n      vec3 centerOffset = auxpos1.xyz;\n\n      // The pointGroundDistance is the distance of the geometry to the ground and is\n      // negative if the point is below the ground, or positive if the point is above\n      // ground.\n      float pointGroundDistance = auxpos1.w;\n\n      aux.posModel = position;\n      aux.posView = (view * vec4(aux.posModel, 1.0)).xyz;\n      aux.vnormal = normal;\n      ${O.draped?\"\":\"applyHUDVerticalGroundOffset(aux.vnormal, aux.posModel, aux.posView);\"}\n\n      // Screen sized offset in world space, used for example for line callouts\n      // Note: keep this implementation in sync with the CPU implementation, see\n      //   - MaterialUtil.verticalOffsetAtDistance\n      //   - HUDMaterial.applyVerticalOffsetTransformation\n\n      aux.distanceToCamera = length(aux.posView);\n\n      vec3 viewDirObjSpace = normalize(cameraPosition - aux.posModel);\n      float cosAngle = dot(aux.vnormal, viewDirObjSpace);\n\n      aux.absCosAngle = abs(cosAngle);\n\n      ${O.hasScreenSizePerspective&&(O.hasVerticalOffset||O.screenCenterOffsetUnitsEnabled===v.Screen)?\"vec4 perspectiveFactor = screenSizePerspectiveScaleFactor(aux.absCosAngle, aux.distanceToCamera, screenSizePerspectiveAlignment);\":\"\"}\n\n      ${O.hasVerticalOffset?O.hasScreenSizePerspective?\"float verticalOffsetScreenHeight = applyScreenSizePerspectiveScaleFactorFloat(verticalOffset.x, perspectiveFactor);\":\"float verticalOffsetScreenHeight = verticalOffset.x;\":\"\"}\n\n      ${O.hasVerticalOffset?d`\n            float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * aux.distanceToCamera, verticalOffset.z, verticalOffset.w);\n            vec3 modelOffset = aux.vnormal * worldOffset;\n            aux.posModel += modelOffset;\n            vec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\n            aux.posView += viewOffset;\n            // Since we elevate the object, we need to take that into account\n            // in the distance to ground\n            pointGroundDistance += worldOffset;`:\"\"}\n\n      float groundRelative = applyHUDViewDependentPolygonOffset(pointGroundDistance, aux.absCosAngle, aux.posView);\n\n      ${O.screenCenterOffsetUnitsEnabled!==v.Screen?d`\n            // Apply x/y in view space, but z in screen space (i.e. along posView direction)\n            aux.posView += vec3(centerOffset.x, centerOffset.y, 0.0);\n\n            // Same material all have same z != 0.0 condition so should not lead to\n            // branch fragmentation and will save a normalization if it's not needed\n            if (centerOffset.z != 0.0) {\n              aux.posView -= normalize(aux.posView) * centerOffset.z;\n            }\n          `:\"\"}\n\n      vec4 posProj = proj * vec4(aux.posView, 1.0);\n\n      ${O.screenCenterOffsetUnitsEnabled===v.Screen?O.hasScreenSizePerspective?\"float centerOffsetY = applyScreenSizePerspectiveScaleFactorFloat(centerOffset.y, perspectiveFactor);\":\"float centerOffsetY = centerOffset.y;\":\"\"}\n\n      ${O.screenCenterOffsetUnitsEnabled===v.Screen?\"posProj.xy += vec2(centerOffset.x, centerOffsetY) * pixelRatio * 2.0 / viewport.zw * posProj.w;\":\"\"}\n\n      // constant part of polygon offset emulation\n      posProj.z -= groundRelative * polygonOffset * posProj.w;\n      return posProj;\n    }\n  `),w.include(t),w.code.add(d`bool testVisibilityHUD(vec4 posProj) {\nvec4 posProjCenter = alignToPixelCenter(posProj, viewport.zw);\nvec4 occlusionPixel = texture(hudVisibilityTexture, .5 + .5 * posProjCenter.xy / posProjCenter.w);\nif (renderTransparentlyOccludedHUD > 0.5) {\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g * renderTransparentlyOccludedHUD < 1.0;\n}\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g == 1.0;\n}`)}!function(e){e[e.World=0]=\"World\",e[e.Screen=1]=\"Screen\",e[e.COUNT=2]=\"COUNT\"}(v||(v={}));export{m as HUD,v as HUDSpace};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{AlignPixel as e}from\"./AlignPixel.glsl.js\";import{ReadLinearDepth as r}from\"../output/ReadLinearDepth.glsl.js\";import{multipassGeometryTest as t}from\"../shading/MultipassGeometryTest.glsl.js\";import{RgbaFloatEncoding as o}from\"../util/RgbaFloatEncoding.glsl.js\";import{Float2PassUniform as a}from\"../../shaderModules/Float2PassUniform.js\";import{glsl as i}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as s}from\"../../shaderModules/Texture2DPassUniform.js\";function n(n,p){const{vertex:l,fragment:d}=n;l.include(e),p.hasMultipassGeometry&&l.include(t),p.hasMultipassTerrain&&n.varyings.add(\"depth\",\"float\"),l.code.add(i`\n  void main(void) {\n    vec4 posProjCenter;\n    if (dot(position, position) > 0.0) {\n      // Render single point to center of the pixel to avoid subpixel\n      // filtering to affect the marker color\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n      posProjCenter = alignToPixelCenter(posProj, viewport.zw);\n\n      ${p.hasMultipassGeometry?i`\n        // Don't draw vertices behind geometry\n        if(geometryDepthTest(.5 + .5 * posProjCenter.xy / posProjCenter.w, projectAux.posView.z)){\n          posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);\n        }`:\"\"}\n\n      ${p.hasMultipassTerrain?\"depth = projectAux.posView.z;\":\"\"}\n      vec3 vpos = projectAux.posModel;\n      if (rejectBySlice(vpos)) {\n        // Project out of clip space\n        posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);\n      }\n\n    } else {\n      // Project out of clip space\n      posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n\n    gl_Position = posProjCenter;\n    gl_PointSize = 1.0;\n  }\n  `),p.hasMultipassTerrain&&d.include(r),p.hasMultipassTerrain&&d.uniforms.add(new s(\"terrainDepthTexture\",((e,r)=>r.multipassTerrain.linearDepthTexture)),new a(\"nearFar\",((e,r)=>r.camera.nearFar))),d.include(o),d.code.add(i`\n  void main() {\n    fragColor = vec4(1);\n    ${p.hasMultipassTerrain?i`\n          // Read the rgba data from the texture linear depth\n          vec4 terrainDepthData = texelFetch(terrainDepthTexture, ivec2(gl_FragCoord.xy), 0);\n\n          float terrainDepth = linearDepthFromFloat(rgba2float(terrainDepthData), nearFar);\n\n          // If HUD vertex is behind terrain and the terrain depth is not the initialize value (e.g. we are not looking at the sky)\n          // Mark the HUD vertex as occluded by transparent terrain\n          if(depth < terrainDepth && terrainDepthData != vec4(0,0,0,1)){\n            fragColor.g = 0.5;\n          }`:\"\"}\n  }\n  `)}export{n as HUDOcclusionPass};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{glsl as t}from\"../../shaderModules/interfaces.js\";function o(o){o.fragment.code.add(t`float normals2FoamIntensity(vec3 n, float waveStrength){\nfloat normalizationFactor =  max(0.015, waveStrength);\nreturn max((n.x + n.y)*0.3303545/normalizationFactor + 0.3303545, 0.0);\n}`)}function n(o){o.fragment.code.add(t`vec3 foamIntensity2FoamColor(float foamIntensityExternal, float foamPixelIntensity, vec3 skyZenitColor, float dayMod){\nreturn foamIntensityExternal * (0.075 * skyZenitColor * pow(foamPixelIntensity, 4.) +  50.* pow(foamPixelIntensity, 23.0)) * dayMod;\n}`)}export{n as FoamColor,o as FoamIntensity};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{RgbaFloatEncoding as e}from\"../util/RgbaFloatEncoding.glsl.js\";import{addCameraPosition as t,addPixelRatio as i}from\"../util/View.glsl.js\";import{Float4PassUniform as o}from\"../../shaderModules/Float4PassUniform.js\";import{FloatPassUniform as r}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as a}from\"../../shaderModules/Texture2DPassUniform.js\";import{STIPPLE_TEXTURE_PADDING as p,computeLongestPattern as s,computeTextureSize as n}from\"../../../materials/stippleTextureRepository.js\";import{ensureColor4 as d}from\"../../../shaders/ensureColor4.js\";function c(e,t){e.constants.add(\"stippleAlphaColorDiscard\",\"float\",.001),e.constants.add(\"stippleAlphaHighlightDiscard\",\"float\",.5),t.stippleEnabled?f(e,t):u(e)}function f(s,n){const c=!(n.draped&&n.stipplePreferContinuous),{vertex:f,fragment:u}=s;u.include(e),n.draped||(t(f,n),f.uniforms.add(new r(\"worldToScreenPerDistanceRatio\",((e,t)=>1/t.camera.perScreenPixelRatio))),f.code.add(l`float computeWorldToScreenRatio(vec3 segmentCenter) {\nfloat segmentDistanceToCamera = length(segmentCenter - cameraPosition);\nreturn worldToScreenPerDistanceRatio / segmentDistanceToCamera;\n}`)),s.varyings.add(\"vStippleDistance\",\"float\"),n.stippleRequiresClamp&&s.varyings.add(\"vStippleDistanceLimits\",\"vec2\"),n.stippleRequiresStretchMeasure&&s.varyings.add(\"vStipplePatternStretch\",\"float\"),f.code.add(l`\n    float discretizeWorldToScreenRatio(float worldToScreenRatio) {\n      float step = ${h};\n\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n      return discreteWorldToScreenRatio;\n    }\n  `),f.code.add(l`vec2 computeStippleDistanceLimits(float startPseudoScreen, float segmentLengthPseudoScreen, float segmentLengthScreen, float patternLength) {`),f.code.add(l`\n    if (segmentLengthPseudoScreen >= ${c?\"patternLength\":\"1e4\"}) {\n  `),i(f,n),f.code.add(l`\n        // Round the screen length to get an integer number of pattern repetitions (minimum 1).\n        float repetitions = segmentLengthScreen / (patternLength * pixelRatio);\n        float flooredRepetitions = max(1.0, floor(repetitions + 0.5));\n        float segmentLengthScreenRounded = flooredRepetitions * patternLength;\n\n        ${n.stippleRequiresStretchMeasure?l`\n              float stretch = repetitions / flooredRepetitions;\n\n              // We need to impose a lower bound on the stretch factor to prevent the dots from merging together when there is only 1 repetition.\n              // 0.75 is the lowest possible stretch value for flooredRepetitions > 1, so it makes sense as lower bound.\n              vStipplePatternStretch = max(0.75, stretch);`:\"\"}\n\n        return vec2(0.0, segmentLengthScreenRounded);\n      }\n      return vec2(startPseudoScreen, startPseudoScreen + segmentLengthPseudoScreen);\n    }\n  `),u.constants.add(\"stippleTexturePadding\",\"float\",p),u.uniforms.add(new a(\"stipplePatternTexture\",(e=>e.stippleTexture)),new r(\"stipplePatternSDFNormalizer\",(e=>S(e.stipplePattern))),new r(\"stipplePatternPixelSizeInv\",(e=>1/m(e)))),u.code.add(l`float padStippleTexture(float u) {\nfloat paddedTextureSize = float(textureSize(stipplePatternTexture, 0).x);\nfloat unpaddedTextureSize = paddedTextureSize - stippleTexturePadding;\nreturn (u * unpaddedTextureSize + stippleTexturePadding * 0.5) / paddedTextureSize;\n}`),u.code.add(l`\n    float getStippleSDF(out bool isClamped) {\n      ${n.stippleRequiresClamp?l`\n          float stippleDistanceClamped = clamp(vStippleDistance, vStippleDistanceLimits.x, vStippleDistanceLimits.y);\n          vec2 aaCorrectedLimits = vStippleDistanceLimits + vec2(1.0, -1.0) / gl_FragCoord.w;\n          isClamped = vStippleDistance < aaCorrectedLimits.x || vStippleDistance > aaCorrectedLimits.y;`:l`\n          float stippleDistanceClamped = vStippleDistance;\n          isClamped = false;`}\n\n      float u = stippleDistanceClamped * gl_FragCoord.w * stipplePatternPixelSizeInv;\n      ${n.stippleScaleWithLineWidth?l`u *= vLineSizeInv;`:\"\"}\n      u = padStippleTexture(fract(u));\n\n      float encodedSDF = rgba2float(texture(stipplePatternTexture, vec2(u, 0.5)));\n      float sdf = (encodedSDF * 2.0 - 1.0) * stipplePatternSDFNormalizer;\n\n      ${n.stippleRequiresStretchMeasure?l`return (sdf - 0.5) * vStipplePatternStretch + 0.5;`:l`return sdf;`}\n    }\n\n    float getStippleSDF() {\n      bool ignored;\n      return getStippleSDF(ignored);\n    }\n\n    float getStippleAlpha() {\n      bool isClamped;\n      float stippleSDF = getStippleSDF(isClamped);\n\n      float antiAliasedResult = ${n.stippleScaleWithLineWidth?l`clamp(stippleSDF * vLineWidth + 0.5, 0.0, 1.0);`:l`clamp(stippleSDF + 0.5, 0.0, 1.0);`}\n\n      return isClamped ? floor(antiAliasedResult + 0.5) : antiAliasedResult;\n    }\n  `),n.stippleOffColorEnabled?(u.uniforms.add(new o(\"stippleOffColor\",(e=>d(e.stippleOffColor)))),u.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) {}\n#define blendStipple(color, stippleAlpha) mix(color, stippleOffColor, stippleAlpha)`)):u.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) if (stippleAlpha < threshold) { discard; }\n#define blendStipple(color, stippleAlpha) vec4(color.rgb, color.a * stippleAlpha)`)}function u(e){e.fragment.code.add(l`float getStippleAlpha() { return 1.0; }\n#define discardByStippleAlpha(_stippleAlpha_, _threshold_) {}\n#define blendStipple(color, _stippleAlpha_) color`)}function S(e){return e?(Math.floor(.5*(s(e)-1))+.5)/e.pixelRatio:1}function m(e){const t=e.stipplePattern;return t?n(e.stipplePattern)/t.pixelRatio:1}const h=l.float(.4);export{c as LineStipple,m as computePixelSize};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{MARKER_SIZE_PER_LINE_WIDTH as e}from\"../../../../support/engineContent/marker.js\";import{addPixelRatio as r}from\"../util/View.glsl.js\";import{FloatPassUniform as o}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as t}from\"../../shaderModules/interfaces.js\";import{LineMarkerSpace as a}from\"../../../shaders/LineMarkerTechniqueConfiguration.js\";function n(n,i){const{vertex:d,constants:s}=n;s.add(\"markerSizePerLineWidth\",\"float\",e),r(d,i),null==d.uniforms.get(\"markerScale\")&&d.constants.add(\"markerScale\",\"float\",1),d.code.add(t`float getLineWidth() {\nreturn max(getSize(), 1.0) * pixelRatio;\n}\nfloat getScreenMarkerSize() {\nreturn markerSizePerLineWidth * markerScale * getLineWidth();\n}`),i.space===a.World&&(d.constants.add(\"maxSegmentLengthFraction\",\"float\",.45),d.uniforms.add(new o(\"perRenderPixelRatio\",((e,r)=>r.camera.perRenderPixelRatio))),d.code.add(t`bool areWorldMarkersHidden(vec4 pos, vec4 other) {\nvec3 midPoint = mix(pos.xyz, other.xyz, 0.5);\nfloat distanceToCamera = length(midPoint);\nfloat screenToWorldRatio = perRenderPixelRatio * distanceToCamera * 0.5;\nfloat worldMarkerSize = getScreenMarkerSize() * screenToWorldRatio;\nfloat segmentLen = length(pos.xyz - other.xyz);\nreturn worldMarkerSize > maxSegmentLengthFraction * segmentLen;\n}\nfloat getWorldMarkerSize(vec4 pos) {\nfloat distanceToCamera = length(pos.xyz);\nfloat screenToWorldRatio = perRenderPixelRatio * distanceToCamera * 0.5;\nreturn getScreenMarkerSize() * screenToWorldRatio;\n}`))}export{n as MarkerSizing};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{ReadLinearDepth as e}from\"../output/ReadLinearDepth.glsl.js\";import{Float2PassUniform as r}from\"../../shaderModules/Float2PassUniform.js\";import{glsl as t}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as o}from\"../../shaderModules/Texture2DPassUniform.js\";function a(a){a.include(e),a.uniforms.add(new o(\"geometryDepthTexture\",((e,r)=>r.multipassGeometry.linearDepthTexture)),new r(\"nearFar\",((e,r)=>r.camera.nearFar))),a.code.add(t`bool geometryDepthTest(vec2 pos, float elementDepth) {\nfloat geometryDepth = linearDepthFromTexture(geometryDepthTexture, pos, nearFar);\nreturn (elementDepth < (geometryDepth - 1.0));\n}`)}class s{constructor(){this.enabled=!1}}export{s as MultipassGeometryUniforms,a as multipassGeometryTest};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/interfaces.js\";function r(r,c){c.spherical?r.vertex.code.add(e`vec3 getLocalUp(in vec3 pos, in vec3 origin) {\nreturn normalize(pos + origin);\n}`):r.vertex.code.add(e`vec3 getLocalUp(in vec3 pos, in vec3 origin) {\nreturn vec3(0.0, 0.0, 1.0);\n}`),c.spherical?r.vertex.code.add(e`mat3 getTBNMatrix(in vec3 n) {\nvec3 t = normalize(cross(vec3(0.0, 0.0, 1.0), n));\nvec3 b = normalize(cross(n, t));\nreturn mat3(t, b, n);\n}`):r.vertex.code.add(e`mat3 getTBNMatrix(in vec3 n) {\nvec3 t = vec3(1.0, 0.0, 0.0);\nvec3 b = normalize(cross(n, t));\nreturn mat3(t, b, n);\n}`)}export{r as NormalUtils};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{c as e}from\"../../../../../../chunks/mat4f64.js\";import{ReadLinearDepth as o}from\"../output/ReadLinearDepth.glsl.js\";import{Float2PassUniform as t}from\"../../shaderModules/Float2PassUniform.js\";import{FloatPassUniform as r}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as a}from\"../../shaderModules/interfaces.js\";import{Matrix4PassUniform as i}from\"../../shaderModules/Matrix4PassUniform.js\";import{Texture2DPassUniform as d}from\"../../shaderModules/Texture2DPassUniform.js\";function n(e,n){const c=e.fragment;c.include(o),c.uniforms.add(new t(\"nearFar\",((e,o)=>o.camera.nearFar))),c.uniforms.add(new d(\"depthMap\",((e,o)=>o.linearDepthTexture))),c.uniforms.add(new i(\"proj\",((e,o)=>o.ssr.camera.projectionMatrix))),c.uniforms.add(new r(\"invResolutionHeight\",((e,o)=>1/o.ssr.camera.height))),c.uniforms.add(new i(\"reprojectionMatrix\",((e,o)=>o.ssr.reprojectionMatrix))),c.code.add(a`\n  vec2 reprojectionCoordinate(vec3 projectionCoordinate)\n  {\n    vec4 zw = proj * vec4(0.0, 0.0, -projectionCoordinate.z, 1.0);\n    vec4 reprojectedCoord = reprojectionMatrix * vec4(zw.w * (projectionCoordinate.xy * 2.0 - 1.0), zw.z, zw.w);\n    reprojectedCoord.xy /= reprojectedCoord.w;\n    return reprojectedCoord.xy * 0.5 + 0.5;\n  }\n\n  const int maxSteps = ${n.highStepCount?\"150\":\"75\"};\n\n  vec4 applyProjectionMat(mat4 projectionMat, vec3 x)\n  {\n    vec4 projectedCoord =  projectionMat * vec4(x, 1.0);\n    projectedCoord.xy /= projectedCoord.w;\n    projectedCoord.xy = projectedCoord.xy*0.5 + 0.5;\n    return projectedCoord;\n  }\n\n  vec3 screenSpaceIntersection(vec3 dir, vec3 startPosition, vec3 viewDir, vec3 normal)\n  {\n    vec3 viewPos = startPosition;\n    vec3 viewPosEnd = startPosition;\n\n    // Project the start position to the screen\n    vec4 projectedCoordStart = applyProjectionMat(proj, viewPos);\n    vec3  Q0 = viewPos / projectedCoordStart.w; // homogeneous camera space\n    float k0 = 1.0/ projectedCoordStart.w;\n\n    // advance the position in the direction of the reflection\n    viewPos += dir;\n\n    vec4 projectedCoordVanishingPoint = applyProjectionMat(proj, dir);\n\n    // Project the advanced position to the screen\n    vec4 projectedCoordEnd = applyProjectionMat(proj, viewPos);\n    vec3  Q1 = viewPos / projectedCoordEnd.w; // homogeneous camera space\n    float k1 = 1.0/ projectedCoordEnd.w;\n\n    // calculate the reflection direction in the screen space\n    vec2 projectedCoordDir = (projectedCoordEnd.xy - projectedCoordStart.xy);\n    vec2 projectedCoordDistVanishingPoint = (projectedCoordVanishingPoint.xy - projectedCoordStart.xy);\n\n    float yMod = min(abs(projectedCoordDistVanishingPoint.y), 1.0);\n\n    float projectedCoordDirLength = length(projectedCoordDir);\n    float maxSt = float(maxSteps);\n\n    // normalize the projection direction depending on maximum steps\n    // this determines how blocky the reflection looks\n    vec2 dP = yMod * (projectedCoordDir)/(maxSt * projectedCoordDirLength);\n\n    // Normalize the homogeneous camera space coordinates\n    vec3  dQ = yMod * (Q1 - Q0)/(maxSt * projectedCoordDirLength);\n    float dk = yMod * (k1 - k0)/(maxSt * projectedCoordDirLength);\n\n    // initialize the variables for ray marching\n    vec2 P = projectedCoordStart.xy;\n    vec3 Q = Q0;\n    float k = k0;\n    float rayStartZ = -startPosition.z; // estimated ray start depth value\n    float rayEndZ = -startPosition.z;   // estimated ray end depth value\n    float prevEstimateZ = -startPosition.z;\n    float rayDiffZ = 0.0;\n    float dDepth;\n    float depth;\n    float rayDiffZOld = 0.0;\n\n    // early outs\n    if (dot(normal, dir) < 0.0 || dot(-viewDir, normal) < 0.0)\n      return vec3(P, 0.0);\n\n    for(int i = 0; i < maxSteps-1; i++)\n    {\n      depth = -linearDepthFromTexture(depthMap, P, nearFar); // get linear depth from the depth buffer\n\n      // estimate depth of the marching ray\n      rayStartZ = prevEstimateZ;\n      dDepth = -rayStartZ - depth;\n      rayEndZ = (dQ.z * 0.5 + Q.z)/ ((dk * 0.5 + k));\n      rayDiffZ = rayEndZ- rayStartZ;\n      prevEstimateZ = rayEndZ;\n\n      if(-rayEndZ > nearFar[1] || -rayEndZ < nearFar[0] || P.y < 0.0  || P.y > 1.0 )\n      {\n        return vec3(P, 0.);\n      }\n\n      // If we detect a hit - return the intersection point, two conditions:\n      //  - dDepth > 0.0 - sampled point depth is in front of estimated depth\n      //  - if difference between dDepth and rayDiffZOld is not too large\n      //  - if difference between dDepth and 0.025/abs(k) is not too large\n      //  - if the sampled depth is not behind far plane or in front of near plane\n\n      if((dDepth) < 0.025/abs(k) + abs(rayDiffZ) && dDepth > 0.0 && depth > nearFar[0] && depth < nearFar[1] && abs(P.y - projectedCoordStart.y) > invResolutionHeight)\n      {\n        return vec3(P, depth);\n      }\n\n      // continue with ray marching\n      P += dP;\n      Q.z += dQ.z;\n      k += dk;\n      rayDiffZOld = rayDiffZ;\n    }\n    return vec3(P, 0.0);\n  }\n  `)}class c{constructor(){this.enabled=!1,this.fadeFactor=1,this.reprojectionMatrix=e()}}export{c as SSRUniforms,n as ScreenSpaceReflections};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{glsl as o}from\"../../shaderModules/interfaces.js\";function e(e){e.fragment.code.add(o`const float GAMMA = 2.2;\nconst float INV_GAMMA = 0.4545454545;\nvec4 delinearizeGamma(vec4 color) {\nreturn vec4(pow(color.rgb, vec3(INV_GAMMA)), color.w);\n}\nvec3 linearizeGamma(vec3 color) {\nreturn pow(color, vec3(GAMMA));\n}`)}export{e as Gamma};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{clamp as o}from\"../../../../../../core/mathUtils.js\";import{earth as a}from\"../../../../../../geometry/support/Ellipsoid.js\";import{FadeInOutStages as t}from\"../../../../environment/CloudsCompositionParameters.js\";import{CloudsTextureChannels as e,CloudsRenderingStages as r}from\"../../../../environment/CloudsData.js\";import{addMainLightDirection as d,addMainLightIntensity as i}from\"../shading/MainLighting.glsl.js\";import{BooleanPassUniform as n}from\"../../shaderModules/BooleanPassUniform.js\";import{Float3PassUniform as c}from\"../../shaderModules/Float3PassUniform.js\";import{FloatPassUniform as l}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as s}from\"../../shaderModules/interfaces.js\";import{Matrix4PassUniform as u}from\"../../shaderModules/Matrix4PassUniform.js\";import{TextureCubePassUniform as C}from\"../../shaderModules/TextureCubePassUniform.js\";function m(m){const v=m.fragment;v.uniforms.add(new u(\"rotationMatrixClouds\",((o,a)=>a.cloudsFade.parallax.transform)),new u(\"rotationMatrixCloudsCrossFade\",((o,a)=>a.cloudsFade.parallaxNew.transform)),new c(\"anchorPosition\",((o,a)=>a.cloudsFade.parallax.anchorPointClouds)),new c(\"anchorPositionCrossFade\",((o,a)=>a.cloudsFade.parallaxNew.anchorPointClouds)),new l(\"cloudsHeight\",((o,a)=>a.cloudsFade.parallax.cloudsHeight)),new l(\"radiusCurvatureCorrectionFactor\",((o,a)=>a.cloudsFade.parallax.radiusCurvatureCorrectionFactor)),new l(\"totalFadeInOut\",((o,a)=>a.cloudsFade.fadeInOut.stage===t.FINISHED?a.cloudsFade.fadeInOutHeight.factor+1-a.cloudsFade.fadeIn.factor:a.cloudsFade.fadeInOutHeight.factor+1-a.cloudsFade.fadeInOut.factor)),new l(\"crossFadeAnchorFactor\",((a,t)=>o(t.cloudsFade.crossFade.factor,0,1))),new C(\"cubeMap\",((o,a)=>a.cloudsFade.data?.cubeMap?a.cloudsFade.data.cubeMap.colorTexture:null)),new n(\"crossFade\",((o,a)=>a.cloudsFade.crossFade.enabled)),new n(\"readChannelsRG\",((o,a)=>a.cloudsFade.readChannels===e.RG)),new n(\"fadeTextureChannels\",((o,a)=>a.cloudsFade.renderingStage===r.FADING_TEXTURE_CHANNELS))),v.constants.add(\"planetRadius\",\"float\",a.radius),v.code.add(s`vec3 intersectWithCloudLayer(vec3 dir, vec3 cameraPosition, vec3 spherePos)\n{\nfloat radiusClouds = planetRadius + cloudsHeight;\nfloat B = 2.0 * dot(cameraPosition, dir);\nfloat C = dot(cameraPosition, cameraPosition) - radiusClouds * radiusClouds;\nfloat det = B * B - 4.0 * C;\nfloat pointIntDist = max(0.0, 0.5 *(-B + sqrt(det)));\nvec3 intersectionPont = cameraPosition + dir * pointIntDist;\nintersectionPont =  intersectionPont - spherePos;\nreturn intersectionPont;\n}`),v.code.add(s`vec3 correctForPlanetCurvature(vec3 dir)\n{\ndir.z = dir.z*(1.-radiusCurvatureCorrectionFactor) + radiusCurvatureCorrectionFactor;\nreturn dir;\n}`),v.code.add(s`vec3 rotateDirectionToAnchorPoint(mat4 rotMat, vec3 inVec)\n{\nreturn (rotMat * vec4(inVec, 0.0)).xyz;\n}`),d(v),i(v),v.code.add(s`const float SUNSET_TRANSITION_FACTOR = 0.3;\nconst vec3 RIM_COLOR = vec3(0.28, 0.175, 0.035);\nconst float RIM_SCATTERING_FACTOR = 140.0;\nconst float BACKLIGHT_FACTOR = 0.2;\nconst float BACKLIGHT_SCATTERING_FACTOR = 10.0;\nconst float BACKLIGHT_TRANSITION_FACTOR = 0.3;\nvec3 calculateCloudColor(vec3 cameraPosition, vec3 worldSpaceRay, vec4 clouds)\n{\nfloat upDotLight = dot(normalize(cameraPosition), normalize(mainLightDirection));\nfloat dirDotLight = max(dot(normalize(-worldSpaceRay), normalize(mainLightDirection)), 0.0);\nfloat sunsetTransition = clamp(pow(max(upDotLight, 0.0), SUNSET_TRANSITION_FACTOR), 0.0, 1.0);\nvec3 ambientLight = calculateAmbientIrradiance(normalize(cameraPosition),  0.0);\nvec3 mainLight = evaluateMainLighting(normalize(cameraPosition),  0.0);\nvec3 combinedLight = clamp((mainLightIntensity + ambientLight )/PI, vec3(0.0), vec3(1.0));\nvec3 baseCloudColor = pow(combinedLight * pow(clouds.xyz, vec3(GAMMA)), vec3(INV_GAMMA));\nfloat scatteringMod = max(clouds.a < 0.5 ? clouds.a / 0.5 : - clouds.a / 0.5 + 2.0, 0.0);\nfloat rimLightIntensity = 0.5 + 0.5 *pow(max(upDotLight, 0.0), 0.35);\nvec3 directSunScattering = RIM_COLOR * rimLightIntensity * (pow(dirDotLight, RIM_SCATTERING_FACTOR)) * scatteringMod;\nfloat additionalLight = BACKLIGHT_FACTOR * pow(dirDotLight, BACKLIGHT_SCATTERING_FACTOR) * (1. - pow(sunsetTransition, BACKLIGHT_TRANSITION_FACTOR)) ;\nreturn vec3(baseCloudColor * (1. + additionalLight) + directSunScattering);\n}`),v.code.add(s`vec4 getCloudData(vec3 rayDir, bool readOtherChannel)\n{\nvec4 cloudData = texture(cubeMap, rayDir);\nfloat mu = dot(rayDir, vec3(0, 0, 1));\nbool readChannels = readChannelsRG ^^ readOtherChannel;\nif (readChannels) {\ncloudData = vec4(vec3(cloudData.r), cloudData.g);\n} else {\ncloudData = vec4(vec3(cloudData.b), cloudData.a);\n}\nif (length(cloudData) == 0.0) {\nreturn vec4(cloudData.rgb, 1.0);\n}\nreturn cloudData;\n}`),v.code.add(s`vec4 renderCloudsNoFade(vec3 worldRay, vec3 cameraPosition)\n{\nvec3 intersectionPoint = intersectWithCloudLayer(normalize(worldRay), cameraPosition, anchorPosition);\nvec3 worldRayRotated = rotateDirectionToAnchorPoint(rotationMatrixClouds, normalize(intersectionPoint));\nvec3 worldRayRotatedCorrected = correctForPlanetCurvature(worldRayRotated);\nvec4 cloudData = getCloudData(worldRayRotatedCorrected, false);\nfloat totalTransmittance = clamp(cloudData.a * (1.0 - totalFadeInOut) + totalFadeInOut, 0.0 , 1.0);\nif (length(cloudData.rgb) == 0.0) {\ntotalTransmittance = 1.0;\n}\nreturn vec4(calculateCloudColor(cameraPosition, normalize(-worldRay), cloudData), totalTransmittance);\n}`),v.code.add(s`vec4 renderCloudsCrossFade(vec3 worldRay, vec3 cameraPosition)\n{\nvec3 intersectionPoint = intersectWithCloudLayer(normalize(worldRay), cameraPosition, anchorPosition);\nvec3 worldRayRotated = rotateDirectionToAnchorPoint(rotationMatrixClouds, normalize(intersectionPoint));\nvec3 worldRayRotatedCorrected = correctForPlanetCurvature(worldRayRotated);\nvec4 cloudData = getCloudData(worldRayRotatedCorrected, false);\nvec4 cloudColor = vec4(calculateCloudColor(cameraPosition, normalize(-worldRay), cloudData), cloudData.a);\nintersectionPoint = intersectWithCloudLayer(normalize(worldRay), cameraPosition, anchorPositionCrossFade);\nworldRayRotated = rotateDirectionToAnchorPoint(rotationMatrixCloudsCrossFade, normalize(intersectionPoint));\nworldRayRotatedCorrected = correctForPlanetCurvature(worldRayRotated);\ncloudData = getCloudData(worldRayRotatedCorrected, fadeTextureChannels);\nvec4 cloudColorCrossFade = vec4(calculateCloudColor(cameraPosition, normalize(-worldRay), cloudData), cloudData.a);\ncloudColor = mix(cloudColor, cloudColorCrossFade, crossFadeAnchorFactor);\nfloat totalTransmittance = clamp(cloudColor.a * (1.0 - totalFadeInOut) + totalFadeInOut, 0.0 , 1.0);\nif (length(cloudColor.rgb) == 0.0) {\ntotalTransmittance = 1.0;\n}\nreturn vec4(cloudColor.rgb, totalTransmittance);\n}`),v.code.add(s`vec4 renderClouds(vec3 worldRay, vec3 cameraPosition)\n{\nreturn crossFade ? renderCloudsCrossFade(worldRay, cameraPosition) : renderCloudsNoFade(worldRay, cameraPosition);\n}`)}export{m as CloudsParallaxShading};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{FoamColor as e}from\"./FoamRendering.glsl.js\";import{Gamma as o}from\"./Gamma.glsl.js\";import{PhysicallyBasedRenderingWater as r}from\"./PhysicallyBasedRendering.glsl.js\";import{ScreenSpaceReflections as t}from\"./ScreenSpaceReflections.glsl.js\";import{CloudsParallaxShading as i}from\"../util/CloudsParallaxShading.glsl.js\";import{FloatPassUniform as a}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{Matrix4PassUniform as n}from\"../../shaderModules/Matrix4PassUniform.js\";import{Texture2DPassUniform as d}from\"../../shaderModules/Texture2DPassUniform.js\";function c(c,s){c.include(r,s),c.include(o),c.include(e),s.hasCloudsReflections&&c.include(i,s),s.hasScreenSpaceReflections&&c.include(t,s);const f=c.fragment;f.constants.add(\"fresnelSky\",\"vec3\",[.02,1,15]).add(\"fresnelMaterial\",\"vec2\",[.02,.1]).add(\"roughness\",\"float\",.015).add(\"foamIntensityExternal\",\"float\",1.7).add(\"ssrIntensity\",\"float\",.65).add(\"ssrHeightFadeStart\",\"float\",3e5).add(\"ssrHeightFadeEnd\",\"float\",5e5).add(\"waterDiffusion\",\"float\",.92).add(\"waterSeaColorMod\",\"float\",.8).add(\"correctionViewingPowerFactor\",\"float\",.4).add(\"skyZenitColor\",\"vec3\",[.52,.68,.9]).add(\"skyColor\",\"vec3\",[.67,.79,.9]).add(\"cloudFresnelModifier\",\"vec2\",[1.2,.01]),f.code.add(l`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`),f.uniforms.add(new a(\"lightingSpecularStrength\",((e,o)=>o.lighting.mainLight.specularStrength)),new a(\"lightingEnvironmentStrength\",((e,o)=>o.lighting.mainLight.environmentStrength))),f.code.add(l`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = lightingSpecularStrength * shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`),s.hasCloudsReflections&&f.code.add(l`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y * cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * clamp((1.0 - totalFadeInOut), 0.0, 1.0);`),s.hasScreenSpaceReflections?(f.uniforms.add(new n(\"view\",((e,o)=>o.ssr.camera.viewMatrix)),new d(\"lastFrameColorTexture\",((e,o)=>o.ssr.lastFrameColorTexture)),new a(\"fadeFactorSSR\",((e,o)=>o.ssr.fadeFactor))),f.code.add(l`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view * vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3 * dCoords.y), 0.0, 1.0) * heightMod * fadeFactorSSR;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture(lastFrameColorTexture, reprojectedCoordinate).xyz) *\nreflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod * 0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor +\nreflSea * seaColorMod + specular + foam);`)):f.code.add(l`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`),s.hasCloudsReflections?s.hasScreenSpaceReflections?f.code.add(l`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`):f.code.add(l`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`):f.code.add(l`return waterRenderedColor;\n}`)}export{c as Water};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{s as e}from\"../../../../../../chunks/vec2.js\";import{a as t}from\"../../../../../../chunks/vec2f64.js\";import{s as r}from\"../../../../../../chunks/vec4.js\";import{c as a}from\"../../../../../../chunks/vec4f64.js\";import{FoamIntensity as o}from\"./FoamRendering.glsl.js\";import{ReadShadowMapPassParameters as m}from\"./ReadShadowMap.glsl.js\";import{Float2PassUniform as s}from\"../../shaderModules/Float2PassUniform.js\";import{Float4PassUniform as v}from\"../../shaderModules/Float4PassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as u}from\"../../shaderModules/Texture2DPassUniform.js\";function i(t){t.fragment.uniforms.add(new u(\"texWaveNormal\",(e=>e.waveNormal)),new u(\"texWavePerturbation\",(e=>e.wavePertubation)),new v(\"waveParams\",(e=>r(f,e.waveStrength,e.waveTextureRepeat,e.flowStrength,e.flowOffset))),new s(\"waveDirection\",(t=>e(c,t.waveDirection[0]*t.waveVelocity,t.waveDirection[1]*t.waveVelocity)))),t.include(o),t.fragment.code.add(l`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`)}class n extends m{}const f=a(),c=t();export{i as WaterDistortion,n as WaterDistortionPassParameters};\n"],"names":[],"sourceRoot":""}