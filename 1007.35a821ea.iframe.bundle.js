"use strict";(self.webpackChunkaxux=self.webpackChunkaxux||[]).push([[1007],{"./node_modules/@arcgis/core/rest/query/executeRelationshipQuery.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{executeRelationshipQuery:()=>n,executeRelationshipQueryForCount:()=>u});var utils=__webpack_require__("./node_modules/@arcgis/core/rest/utils.js"),request=__webpack_require__("./node_modules/@arcgis/core/request.js"),urlUtils=__webpack_require__("./node_modules/@arcgis/core/rest/operations/urlUtils.js");function o(e,t){const o=e.toJSON();return o.objectIds&&(o.objectIds=o.objectIds.join(",")),o.orderByFields&&(o.orderByFields=o.orderByFields.join(",")),o.outFields&&!t?.returnCountOnly?o.outFields.includes("*")?o.outFields="*":o.outFields=o.outFields.join(","):delete o.outFields,o.outSpatialReference&&(o.outSR=o.outSR.wkid||JSON.stringify(o.outSR.toJSON()),delete o.outSpatialReference),o.dynamicDataSource&&(o.layer=JSON.stringify({source:o.dynamicDataSource}),delete o.dynamicDataSource),o}async function s(r,n,s={},a){const d=(0,urlUtils.A)({...r.query,f:"json",...a,...o(n,a)});return(0,request.default)(r.path+"/queryRelatedRecords",{...s,query:{...s.query,...d}})}var FeatureSet=__webpack_require__("./node_modules/@arcgis/core/rest/support/FeatureSet.js"),RelationshipQuery=__webpack_require__("./node_modules/@arcgis/core/rest/support/RelationshipQuery.js");async function n(e,n,u){n=RelationshipQuery.default.from(n);return async function r(e,t,o){const r=await s(e,t,o),n=r.data,a=n.geometryType,d=n.spatialReference,c={};for(const s of n.relatedRecordGroups){const e={fields:void 0,objectIdFieldName:void 0,geometryType:a,spatialReference:d,hasZ:!!n.hasZ,hasM:!!n.hasM,features:s.relatedRecords};if(null!=s.objectId)c[s.objectId]=e;else for(const t in s)s.hasOwnProperty(t)&&"relatedRecords"!==t&&(c[s[t]]=e)}return{...r,data:c}}((0,utils.en)(e),n,u).then((t=>{const r=t.data,e={};return Object.keys(r).forEach((t=>e[t]=FeatureSet.Z.fromJSON(r[t]))),e}))}async function u(r,o,n){o=RelationshipQuery.default.from(o);return async function queryRelatedRecords_n(e,t,o){const r=await s(e,t,o,{returnCountOnly:!0}),n=r.data,a={};for(const s of n.relatedRecordGroups)null!=s.objectId&&(a[s.objectId]=s.count);return{...r,data:a}}((0,utils.en)(r),o,{...n}).then((t=>t.data))}}}]);