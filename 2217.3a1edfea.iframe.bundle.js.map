{"version":3,"file":"2217.3a1edfea.iframe.bundle.js","mappings":";;;;AAQA;;;;;AAKA;;;;AAIA;;;AAGA;;AAEA;;AAEA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;AAOA;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AC1FA;;;;;AAKA;;;;;;;;;AASA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;;AAEA;;AAEA;;;AAGA;AACA;;;;;;;;;AASA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;ACxEA;;ACLA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;;;;;;;ACdA;;;AAGA;;;AAGA;;;AAGA;;;;;;AAMA;;;;;;AClBA;AACA;;;ACJA;;;;;;;AAOA;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;;;;;;;;AASA;;;AAGA;AACA;AACA;;AAEA;;;;;;;AAOA;;;AAGA;;;;;;AAMA;;;AAGA;AACA;AACA;;;AAGA;;;;;AC1DA;;;;;AAKA;;;;;;;;;;;AAWA;;;AAGA;;;;;;AClBA;AACA;;;ACJA;AACA;;AAEA;;;AAGA;;;AAGA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;;;;;;;AAOA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;ACvFA;;AAEA;;AAEA;;AAEA;;ACPA;;AAEA;;AAEA;;AAEA;;AAEA;ACTA;AACA;;ACAA;;;;;;;ACKA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;AAGA;;;;;;;AAOA","sources":["webpack://axux/./node_modules/@arcgis/core/chunks/DefaultMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/RealisticTree.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/DecodeSymbolColor.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlphaBlend.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{b as e}from\"./mat3.js\";import{c as r}from\"./mat3f64.js\";import{I as o}from\"./mat4f64.js\";import{ForwardLinearDepth as a}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as s}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as l}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as t}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as d,NormalType as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as u}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as p}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as v}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as h}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as f}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ComputeNormalTexture as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as x,addAmbientBoostFactor as y,addLightingGlobalFactor as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightIntensity as T}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{multipassTerrainTest as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{Normals as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as P,PBRMode as $}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as O,ReadShadowMapDraw as N}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{colorTextureUV as A,normalTextureUV as S,emissiveTextureUV as E,occlusionTextureUV as V,metallicRoughnessTextureUV as D}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TextureTransformUV.glsl.js\";import{VisualVariables as _}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as U}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as B}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as F}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as I,addCameraPosition as R}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as z}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as W}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as k}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as G}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix3PassUniform as q}from\"../views/3d/webgl-engine/core/shaderModules/Matrix3PassUniform.js\";import{Matrix4PassUniform as H}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as J}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as K}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as Q}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as X}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function Y(Y){const Z=new J,{vertex:ee,fragment:re,varyings:oe}=Z;if(I(ee,Y),Z.include(m),oe.add(\"vpos\",\"vec3\"),Z.include(_,Y),Z.include(n,Y),Z.include(h,Y),Y.hasColorTextureTransform&&Z.include(A),Y.output===s.Color||Y.output===s.Alpha){Y.hasNormalTextureTransform&&Z.include(S),Y.hasEmissionTextureTransform&&Z.include(E),Y.hasOcclusionTextureTransform&&Z.include(V),Y.hasMetallicRoughnessTextureTransform&&Z.include(D),R(ee,Y),Z.include(d,Y),Z.include(t,Y);const s=Y.normalType===c.Attribute||Y.normalType===c.Compressed;s&&Y.offsetBackfaces&&Z.include(i),Z.include(b,Y),Z.include(v,Y),Y.instancedColor&&Z.attributes.add(X.INSTANCECOLOR,\"vec4\"),oe.add(\"vPositionLocal\",\"vec3\"),Z.include(u,Y),Z.include(a,Y),Z.include(g,Y),Z.include(p,Y),ee.uniforms.add(new W(\"externalColor\",(e=>e.externalColor))),oe.add(\"vcolorExt\",\"vec4\"),Y.hasMultipassTerrain&&oe.add(\"depth\",\"float\");const l=Y.hasModelTransformation;if(l){const a=r();ee.uniforms.add(new H(\"model\",(e=>e.modelTransformation??o))),ee.uniforms.add(new q(\"normalTransform\",(r=>(e(a,r.modelTransformation??o),a))))}ee.code.add(G`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${Y.instancedColor?\"vcolorExt *= instanceColor * 0.003921568627451;\":\"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${G.float(U)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        } else {\n          vpos = calculateVPos();\n          ${l?\"vpos = (model * vec4(vpos, 1.0)).xyz;\":\"\"}\n          vPositionLocal = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${s?G`vNormalWorld = ${l?\"normalize(normalTransform * dpNormal(vvLocalNormal(normalModel())))\":\"dpNormal(vvLocalNormal(normalModel()))\"};`:\"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${Y.hasVertexTangents?\"vTangent = dpTransformVertexTangent(tangent);\":\"\"}\n          gl_Position = transformPosition(proj, view, vpos);\n          ${s&&Y.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n        }\n\n        ${Y.hasMultipassTerrain?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n        ${Y.hasColorTextureTransform?G`forwardColorUV();`:\"\"}\n        ${Y.hasNormalTextureTransform?G`forwardNormalUV();`:\"\"}\n        ${Y.hasEmissionTextureTransform?G`forwardEmissiveUV();`:\"\"}\n        ${Y.hasOcclusionTextureTransform?G`forwardOcclusionUV();`:\"\"}\n        ${Y.hasMetallicRoughnessTextureTransform?G`forwardMetallicRoughnessUV();`:\"\"}\n      }\n    `)}switch(Y.output){case s.Alpha:Z.include(l,Y),Z.include(B,Y),Z.include(j,Y),re.uniforms.add(new k(\"opacity\",(e=>e.opacity)),new k(\"layerOpacity\",(e=>e.layerOpacity))),Y.hasColorTexture&&re.uniforms.add(new K(\"tex\",(e=>e.texture))),re.include(F),re.code.add(G`\n      void main() {\n        discardBySlice(vpos);\n        ${Y.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${Y.hasColorTexture?G`\n                vec4 texColor = texture(tex, ${Y.hasColorTextureTransform?G`colorUV`:G`vuv0`});\n                ${Y.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:G`vec4 texColor = vec4(1.0);`}\n        ${Y.hasVertexColors?G`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:G`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        fragColor = vec4(opacity_);\n      }\n    `);break;case s.Color:Z.include(l,Y),Z.include(x,Y),Z.include(w,Y),Z.include(B,Y),Z.include(Y.instancedDoublePrecision?O:N,Y),Z.include(j,Y),R(re,Y),re.uniforms.add(ee.uniforms.get(\"localOrigin\"),new z(\"ambient\",(e=>e.ambient)),new z(\"diffuse\",(e=>e.diffuse)),new k(\"opacity\",(e=>e.opacity)),new k(\"layerOpacity\",(e=>e.layerOpacity))),Y.hasColorTexture&&re.uniforms.add(new K(\"tex\",(e=>e.texture))),Z.include(P,Y),Z.include(M,Y),re.include(F),Z.include(L,Y),y(re),C(re),T(re),re.code.add(G`\n      void main() {\n        discardBySlice(vpos);\n        ${Y.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${Y.hasColorTexture?G`\n                vec4 texColor = texture(tex, ${Y.hasColorTextureTransform?G`colorUV`:G`vuv0`});\n                ${Y.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:G`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${Y.normalType===c.ScreenDerivative?G`\n                vec3 normal = screenDerivativeNormal(vPositionLocal);`:G`\n                shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n        ${Y.pbrMode===$.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        vec3 posWorld = vpos + localOrigin;\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);\n        float shadow = ${Y.receiveShadows?\"readShadowMap(vpos, linearDepth)\":Y.spherical?\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\":\"0.0\"};\n\n        vec3 matColor = max(ambient, diffuse);\n        ${Y.hasVertexColors?G`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:G`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${Y.hasNormalTexture?G`\n                mat3 tangentSpace = ${Y.hasVertexTangents?\"computeTangentSpace(normal);\":\"computeTangentSpace(normal, vpos, vuv0);\"}\n                vec3 shadingNormal = computeTextureNormal(tangentSpace, ${Y.hasNormalTextureTransform?G`normalUV`:\"vuv0\"});`:G`vec3 shadingNormal = normal;`}\n        vec3 normalGround = ${Y.spherical?G`normalize(posWorld);`:G`vec3(0.0, 0.0, 1.0);`}\n\n        ${Y.snowCover?G`\n                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n                albedo = mix(albedo, vec3(1), snow);\n                shadingNormal = mix(shadingNormal, normal, snow);\n                ssao = mix(ssao, 1.0, snow);`:\"\"}\n\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n        ${Y.pbrMode===$.Normal||Y.pbrMode===$.Schematic?G`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${Y.snowCover?G`\n                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                        emission = mix(emission, vec3(0.0), snow);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:G`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${Y.transparencyPassType===Q.Color?G`fragColor = premultiplyAlpha(fragColor);`:\"\"}\n      }\n    `)}return Z.include(f,Y),Z}const Z=Object.freeze(Object.defineProperty({__proto__:null,build:Y},Symbol.toStringTag,{value:\"Module\"}));export{Z as D,Y as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as m}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as p,addAmbientBoostFactor as u,addLightingGlobalFactor as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as h,addMainLightIntensity as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{multipassTerrainTest as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PhysicallyBasedRendering as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as y,PBRMode as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as L,ReadShadowMapDraw as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as P}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as T,addCameraPosition as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as S}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as N}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as _}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as V}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as D}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as B}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function I(I){const R=new _,{vertex:z,fragment:k,varyings:U}=R;return T(z,I),R.include(s),U.add(\"vpos\",\"vec3\"),R.include(M,I),R.include(l,I),R.include(g,I),I.output!==r.Color&&I.output!==r.Alpha||(E(R.vertex,I),R.include(t,I),R.include(a,I),I.offsetBackfaces&&R.include(o),I.instancedColor&&R.attributes.add(B.INSTANCECOLOR,\"vec4\"),U.add(\"vNormalWorld\",\"vec3\"),U.add(\"localvpos\",\"vec3\"),I.hasMultipassTerrain&&U.add(\"depth\",\"float\"),R.include(d,I),R.include(e,I),R.include(n,I),R.include(c,I),z.uniforms.add(new $(\"externalColor\",(e=>e.externalColor))),U.add(\"vcolorExt\",\"vec4\"),z.code.add(N`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${I.instancedColor?\"vcolorExt *= instanceColor * 0.003921568627451;\":\"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${N.float(O)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          } else {\n            vpos = calculateVPos();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${I.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n          }\n          ${I.hasMultipassTerrain?N`depth = (view * vec4(vpos, 1.0)).z;`:\"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)),I.output===r.Alpha&&(R.include(i,I),R.include(P,I),R.include(f,I),k.uniforms.add(new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity))),I.hasColorTexture&&k.uniforms.add(new V(\"tex\",(e=>e.texture))),k.include(A),k.code.add(N`\n      void main() {\n        discardBySlice(vpos);\n        ${I.hasMultipassTerrain?N`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${I.hasColorTexture?N`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform?N`colorUV`:N`vuv0`});\n                ${I.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:N`vec4 texColor = vec4(1.0);`}\n        ${I.hasVertexColors?N`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:N`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n\n        fragColor = vec4(opacity_);\n      }\n    `)),I.output===r.Color&&(R.include(i,I),R.include(p,I),R.include(v,I),R.include(P,I),R.include(I.instancedDoublePrecision?L:j,I),R.include(f,I),E(R.fragment,I),h(k),u(k),b(k),k.uniforms.add(z.uniforms.get(\"localOrigin\"),z.uniforms.get(\"view\"),new S(\"ambient\",(e=>e.ambient)),new S(\"diffuse\",(e=>e.diffuse)),new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity))),I.hasColorTexture&&k.uniforms.add(new V(\"tex\",(e=>e.texture))),R.include(y,I),R.include(x,I),k.include(A),w(k),k.code.add(N`\n      void main() {\n        discardBySlice(vpos);\n        ${I.hasMultipassTerrain?N`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${I.hasColorTexture?N`\n                vec4 texColor = texture(tex, ${I.hasColorTextureTransform?N`colorUV`:N`vuv0`});\n                ${I.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:N`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${I.pbrMode===C.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${I.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":I.spherical?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${I.hasVertexColors?N`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:N`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${I.snowCover?N`albedo = mix(albedo, vec3(1), 0.9);`:N``}\n        ${N`\n            vec3 shadingNormal = normalize(vNormalWorld);\n            albedo *= 1.2;\n            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n            float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\n            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n            float treeRadialFalloff = vColor.r;\n            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n            additionalLight += backLightFactor * mainLightIntensity;`}\n        ${I.pbrMode===C.Normal||I.pbrMode===C.Schematic?I.spherical?N`vec3 normalGround = normalize(vpos + localOrigin);`:N`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:N``}\n        ${I.pbrMode===C.Normal||I.pbrMode===C.Schematic?N`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\n                ${I.snowCover?N`\n                        mrr = vec3(0.0, 1.0, 0.04);\n                        emission = vec3(0.0);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:N`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        fragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${I.transparencyPassType===D.Color?N`fragColor = premultiplyAlpha(fragColor);`:N``}\n      }\n    `)),R.include(m,I),R}const R=Object.freeze(Object.defineProperty({__proto__:null,build:I},Symbol.toStringTag,{value:\"Module\"}));export{R,I as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{glsl as o}from\"../shaderModules/interfaces.js\";function e(e){e.vertex.code.add(o`vec4 offsetBackfacingClipPosition(vec4 posClip, vec3 posWorld, vec3 normalWorld, vec3 camPosWorld) {\nvec3 camToVert = posWorld - camPosWorld;\nbool isBackface = dot(camToVert, normalWorld) > 0.0;\nif (isBackface) {\nposClip.z += 0.0000003 * posClip.w;\n}\nreturn posClip;\n}`)}export{e as Offset};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../../../../chunks/tslib.es6.js\";import{s as r}from\"../../../../../../chunks/vec3.js\";import{c as i}from\"../../../../../../chunks/vec3f64.js\";import{ShaderOutput as o}from\"../ShaderOutput.js\";import{DoublePrecision as n}from\"../util/DoublePrecision.glsl.js\";import{addViewNormal as a}from\"../util/View.glsl.js\";import{Float3DrawUniform as t}from\"../../shaderModules/Float3DrawUniform.js\";import{glsl as s}from\"../../shaderModules/interfaces.js\";import{ShaderTechniqueConfiguration as c,parameter as d}from\"../../shaderTechnique/ShaderTechniqueConfiguration.js\";import{VertexAttribute as l}from\"../../../lib/VertexAttribute.js\";import{encodeDoubleHi as m,encodeDoubleLo as u}from\"../../../../../webgl/doublePrecisionUtils.js\";class v extends c{constructor(){super(...arguments),this.instancedDoublePrecision=!1}}function p(e,i){i.instanced&&i.instancedDoublePrecision&&(e.attributes.add(l.MODELORIGINHI,\"vec3\"),e.attributes.add(l.MODELORIGINLO,\"vec3\"),e.attributes.add(l.MODEL,\"mat3\"),e.attributes.add(l.MODELNORMAL,\"mat3\"));const c=e.vertex;i.instancedDoublePrecision&&(c.include(n,i),c.uniforms.add(new t(\"viewOriginHi\",((e,i)=>m(r(b,i.camera.viewInverseTransposeMatrix[3],i.camera.viewInverseTransposeMatrix[7],i.camera.viewInverseTransposeMatrix[11]),b))),new t(\"viewOriginLo\",((e,i)=>u(r(b,i.camera.viewInverseTransposeMatrix[3],i.camera.viewInverseTransposeMatrix[7],i.camera.viewInverseTransposeMatrix[11]),b))))),c.code.add(s`\n    vec3 calculateVPos() {\n      ${i.instancedDoublePrecision?\"return model * localPosition().xyz;\":\"return localPosition().xyz;\"}\n    }\n    `),c.code.add(s`\n    vec3 subtractOrigin(vec3 _pos) {\n      ${i.instancedDoublePrecision?s`\n          vec3 originDelta = dpAdd(viewOriginHi, viewOriginLo, -modelOriginHi, -modelOriginLo);\n          return _pos - originDelta;`:\"return vpos;\"}\n    }\n    `),c.code.add(s`\n    vec3 dpNormal(vec4 _normal) {\n      ${i.instancedDoublePrecision?\"return normalize(modelNormal * _normal.xyz);\":\"return normalize(_normal.xyz);\"}\n    }\n    `),i.output===o.Normal&&(a(c),c.code.add(s`\n    vec3 dpNormalView(vec4 _normal) {\n      ${i.instancedDoublePrecision?\"return normalize((viewNormal * vec4(modelNormal * _normal.xyz, 1.0)).xyz);\":\"return normalize((viewNormal * _normal).xyz);\"}\n    }\n    `)),i.hasVertexTangents&&c.code.add(s`\n    vec4 dpTransformVertexTangent(vec4 _tangent) {\n      ${i.instancedDoublePrecision?\"return vec4(modelNormal * _tangent.xyz, _tangent.w);\":\"return _tangent;\"}\n\n    }\n    `)}e([d()],v.prototype,\"instancedDoublePrecision\",void 0);const b=i();export{v as InstancedDoubleConfiguration,p as InstancedDoublePrecision};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{ColorMixModeEnum as o}from\"../../../../../layers/support/symbolColorUtils.js\";import{glsl as l}from\"../../../../core/shaderModules/interfaces.js\";function e(e){e.vertex.code.add(l`\n    vec4 decodeSymbolColor(vec4 symbolColor, out int colorMixMode) {\n      float symbolAlpha = 0.0;\n\n      const float maxTint = 85.0;\n      const float maxReplace = 170.0;\n      const float scaleAlpha = 3.0;\n\n      if (symbolColor.a > maxReplace) {\n        colorMixMode = ${l.int(o.Multiply)};\n        symbolAlpha = scaleAlpha * (symbolColor.a - maxReplace);\n      } else if (symbolColor.a > maxTint) {\n        colorMixMode = ${l.int(o.Replace)};\n        symbolAlpha = scaleAlpha * (symbolColor.a - maxTint);\n      } else if (symbolColor.a > 0.0) {\n        colorMixMode = ${l.int(o.Tint)};\n        symbolAlpha = scaleAlpha * symbolColor.a;\n      } else {\n        colorMixMode = ${l.int(o.Multiply)};\n        symbolAlpha = 0.0;\n      }\n\n      return vec4(symbolColor.r, symbolColor.g, symbolColor.b, symbolAlpha);\n    }\n  `)}export{e as DecodeSymbolColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{DecodeSymbolColor as o}from\"../../../collections/Component/Material/shader/DecodeSymbolColor.glsl.js\";import{IntegerPassUniform as r}from\"../../shaderModules/IntegerPassUniform.js\";import{glsl as e}from\"../../shaderModules/interfaces.js\";import{VertexAttribute as l}from\"../../../lib/VertexAttribute.js\";import{colorMixModes as d}from\"../../../materials/internal/MaterialUtil.js\";function i(i,t){t.hasSymbolColors?(i.include(o),i.attributes.add(l.SYMBOLCOLOR,\"vec4\"),i.varyings.add(\"colorMixMode\",\"mediump float\"),i.vertex.code.add(e`int symbolColorMixMode;\nvec4 getSymbolColor() {\nreturn decodeSymbolColor(symbolColor, symbolColorMixMode) * 0.003921568627451;\n}\nvoid forwardColorMixMode() {\ncolorMixMode = float(symbolColorMixMode) + 0.5;\n}`)):(i.fragment.uniforms.add(new r(\"colorMixMode\",(o=>d[o.colorMixMode]))),i.vertex.code.add(e`vec4 getSymbolColor() { return vec4(1.0); }\nvoid forwardColorMixMode() {}`))}export{i as SymbolColor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{b as o}from\"../../../../../../chunks/mat3.js\";import{c as r}from\"../../../../../../chunks/mat3f64.js\";import{I as e}from\"../../../../../../chunks/mat4f64.js\";import{addNearFar as t}from\"../ForwardLinearDepth.glsl.js\";import{ShaderOutput as i}from\"../ShaderOutput.js\";import{SliceDraw as a}from\"../Slice.glsl.js\";import{Transform as s}from\"../Transform.glsl.js\";import{NormalAttribute as l,NormalType as d}from\"../attributes/NormalAttribute.glsl.js\";import{ObjectAndLayerIdColor as n}from\"../attributes/ObjectAndLayerIdColor.glsl.js\";import{TextureCoordinateAttribute as m}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexNormal as c}from\"../attributes/VertexNormal.glsl.js\";import{OutputDepth as u}from\"../output/OutputDepth.glsl.js\";import{OutputHighlight as p}from\"../output/OutputHighlight.glsl.js\";import{VisualVariables as v}from\"../shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as f}from\"../util/AlphaDiscard.glsl.js\";import{addProjViewLocalOrigin as h}from\"../util/View.glsl.js\";import{glsl as g}from\"../../shaderModules/interfaces.js\";import{Matrix3PassUniform as x}from\"../../shaderModules/Matrix3PassUniform.js\";import{Matrix4PassUniform as j}from\"../../shaderModules/Matrix4PassUniform.js\";import{Texture2DPassUniform as w}from\"../../shaderModules/Texture2DPassUniform.js\";import{AlphaDiscardMode as T}from\"../../../lib/basicInterfaces.js\";function b(b,C){const{vertex:O,fragment:y}=b,V=C.hasModelTransformation;if(V){const t=r();O.uniforms.add(new j(\"model\",(o=>o.modelTransformation??e))),O.uniforms.add(new x(\"normalTransform\",(r=>(o(t,r.modelTransformation??e),t))))}const A=C.hasColorTexture&&C.alphaDiscardMode!==T.Opaque;switch(C.output){case i.Depth:case i.Shadow:case i.ShadowHighlight:case i.ShadowExcludeHighlight:case i.ObjectAndLayerIdColor:h(O,C),b.include(s,C),b.include(m,C),b.include(v,C),b.include(u,C),b.include(a,C),b.include(n,C),t(b),b.varyings.add(\"depth\",\"float\"),A&&y.uniforms.add(new w(\"tex\",(o=>o.texture))),O.code.add(g`\n          void main(void) {\n            vpos = calculateVPos();\n            ${V?\"vpos = (model * vec4(vpos, 1.0)).xyz;\":\"\"}\n            vpos = subtractOrigin(vpos);\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);\n            forwardTextureCoordinates();\n            forwardObjectAndLayerIdColor();\n          }\n        `),b.include(f,C),y.code.add(g`\n          void main(void) {\n            discardBySlice(vpos);\n            ${A?g`\n                    vec4 texColor = texture(tex, ${C.hasColorTextureTransform?g`colorUV`:g`vuv0`});\n                    discardOrAdjustAlpha(texColor);`:\"\"}\n            ${C.output===i.ObjectAndLayerIdColor?g`outputObjectAndLayerIdColor();`:g`outputDepth(depth);`}\n          }\n        `);break;case i.Normal:{h(O,C),b.include(s,C),b.include(l,C),b.include(c,C),b.include(m,C),b.include(v,C),A&&y.uniforms.add(new w(\"tex\",(o=>o.texture))),C.normalType===d.ScreenDerivative&&b.varyings.add(\"vPositionView\",\"vec3\");const o=C.normalType===d.Attribute||C.normalType===d.Compressed;O.code.add(g`\n          void main(void) {\n            vpos = calculateVPos();\n            ${V?\"vpos = (model * vec4(vpos, 1.0)).xyz;\":\"\"}\n\n            ${o?g`vNormalWorld = ${V?\"normalize(normalTransform * dpNormal(vvLocalNormal(normalModel())))\":\"dpNormalView(vvLocalNormal(normalModel()))\"};`:g`\n                  // Get vertex position in camera space for screen-space derivative normals\n                  vPositionView = (view * vec4(vpos, 1.0)).xyz;\n                `}\n            vpos = subtractOrigin(vpos);\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            forwardTextureCoordinates();\n          }\n        `),b.include(a,C),b.include(f,C),y.code.add(g`\n          void main() {\n            discardBySlice(vpos);\n            ${A?g`\n                    vec4 texColor = texture(tex, ${C.hasColorTextureTransform?g`colorUV`:g`vuv0`});\n                    discardOrAdjustAlpha(texColor);`:\"\"}\n\n            ${C.normalType===d.ScreenDerivative?g`vec3 normal = screenDerivativeNormal(vPositionView);`:g`\n                  vec3 normal = normalize(vNormalWorld);\n                  if (gl_FrontFacing == false){\n                    normal = -normal;\n                  }`}\n            fragColor = vec4(0.5 + 0.5 * normal, 1.0);\n          }\n        `);break}case i.Highlight:h(O,C),b.include(s,C),b.include(m,C),b.include(v,C),A&&y.uniforms.add(new w(\"tex\",(o=>o.texture))),O.code.add(g`\n          void main(void) {\n            vpos = calculateVPos();\n            ${V?\"vpos = (model * vec4(vpos, 1.0)).xyz;\":\"\"}\n            vpos = subtractOrigin(vpos);\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            forwardTextureCoordinates();\n          }\n        `),b.include(a,C),b.include(f,C),b.include(p,C),y.code.add(g`\n          void main() {\n            discardBySlice(vpos);\n            ${A?g`\n                    vec4 texColor = texture(tex, ${C.hasColorTextureTransform?g`colorUV`:g`vuv0`});\n                    discardOrAdjustAlpha(texColor);`:\"\"}\n            outputHighlight();\n          }\n        `)}}export{b as DefaultMaterialAuxiliaryPasses};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{TextureCoordinateAttributeType as e}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTextureCoordinates as t}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{NormalsDoubleSidedMode as n}from\"./Normals.glsl.js\";import{glsl as a}from\"../../shaderModules/interfaces.js\";import{Texture2DDrawUniform as r}from\"../../shaderModules/Texture2DDrawUniform.js\";import{Texture2DPassUniform as o}from\"../../shaderModules/Texture2DPassUniform.js\";import{BindType as s}from\"../../shaderTechnique/BindType.js\";import{VertexAttribute as d}from\"../../../lib/VertexAttribute.js\";function m(m,c){const i=m.fragment;c.hasVertexTangents?(m.attributes.add(d.TANGENT,\"vec4\"),m.varyings.add(\"vTangent\",\"vec4\"),c.doubleSidedMode===n.WindingOrder?i.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`):i.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)):i.code.add(a`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`),c.textureCoordinateType!==e.None&&(m.include(t,c),i.uniforms.add(c.pbrTextureBindType===s.Pass?new o(\"normalTexture\",(e=>e.textureNormal)):new r(\"normalTexture\",(e=>e.textureNormal))),i.code.add(a`vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\nvec3 rawNormal = textureLookup(normalTexture, uv).rgb * 2.0 - 1.0;\nreturn tangentSpace * rawNormal;\n}`))}export{m as ComputeNormalTexture};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as r}from\"../../shaderModules/Texture2DPassUniform.js\";import{blurSizePixels as s}from\"../../../lib/SSAOHelper.js\";function t(t,o){const a=t.fragment;o.receiveAmbientOcclusion?(a.uniforms.add(new r(\"ssaoTex\",((e,r)=>r.ssaoHelper.colorTexture))),a.constants.add(\"blurSizePixelsInverse\",\"float\",1/s),a.code.add(e`float evaluateAmbientOcclusionInverse() {\nvec2 ssaoTextureSizeInverse = 1.0 / vec2(textureSize(ssaoTex, 0));\nreturn texture(ssaoTex, gl_FragCoord.xy * blurSizePixelsInverse * ssaoTextureSizeInverse).a;\n}\nfloat evaluateAmbientOcclusion() {\nreturn 1.0 - evaluateAmbientOcclusionInverse();\n}`)):a.code.add(e`float evaluateAmbientOcclusionInverse() { return 1.0; }\nfloat evaluateAmbientOcclusion() { return 0.0; }`)}export{t as EvaluateAmbientOcclusion};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{neverReached as n}from\"../../../../../../core/compilerUtils.js\";import{EvaluateAmbientLighting as i}from\"./EvaluateAmbientLighting.glsl.js\";import{EvaluateAmbientOcclusion as e}from\"./EvaluateAmbientOcclusion.glsl.js\";import{addMainLightDirection as o,addMainLightIntensity as t,MainLighting as a}from\"./MainLighting.glsl.js\";import{PhysicallyBasedRendering as r}from\"./PhysicallyBasedRendering.glsl.js\";import{PBRMode as l}from\"./PhysicallyBasedRenderingParameters.glsl.js\";import{PiUtils as c}from\"./PiUtils.glsl.js\";import{BooleanPassUniform as d}from\"../../shaderModules/BooleanPassUniform.js\";import{FloatPassUniform as s}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as m}from\"../../shaderModules/interfaces.js\";import{ambientBoost as g}from\"../../../lighting/SceneLighting.js\";function h(n){n.constants.add(\"ambientBoostFactor\",\"float\",g)}function u(n){n.uniforms.add(new s(\"lightingGlobalFactor\",((n,i)=>i.lighting.globalFactor)))}function p(g,p){const v=g.fragment;switch(g.include(e,p),p.pbrMode!==l.Disabled&&g.include(r,p),g.include(i,p),g.include(c),v.code.add(m`\n    const float GAMMA_SRGB = 2.1;\n    const float INV_GAMMA_SRGB = 0.4761904;\n    ${p.pbrMode===l.Disabled?\"\":\"const vec3 GROUND_REFLECTANCE = vec3(0.2);\"}\n  `),h(v),u(v),o(v),v.code.add(m`\n    float additionalDirectedAmbientLight(vec3 vPosWorld) {\n      float vndl = dot(${p.spherical?m`normalize(vPosWorld)`:m`vec3(0.0, 0.0, 1.0)`}, mainLightDirection);\n      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));\n    }\n  `),t(v),v.code.add(m`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {\nfloat additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);\nreturn (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * mainLightIntensity;\n}`),p.pbrMode){case l.Disabled:case l.WaterOnIntegratedMesh:case l.Water:g.include(a),v.code.add(m`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight)\n{\nvec3 mainLighting = evaluateMainLighting(normalWorld, shadow);\nvec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);\nvec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\nvec3 totalLight = mainLighting + ambientLighting + additionalLight;\ntotalLight = min(totalLight, vec3(PI));\nvec3 outColor = vec3((albedoLinear / PI) * totalLight);\nreturn pow(outColor, vec3(INV_GAMMA_SRGB));\n}`);break;case l.Normal:case l.Schematic:v.code.add(m`const float fillLightIntensity = 0.25;\nconst float horizonLightDiffusion = 0.4;\nconst float additionalAmbientIrradianceFactor = 0.02;\nvec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight, vec3 viewDir, vec3 normalGround, vec3 mrr, vec3 _emission, float additionalAmbientIrradiance)\n{\nvec3 viewDirection = -viewDir;\nvec3 h = normalize(viewDirection + mainLightDirection);\nPBRShadingInfo inputs;\ninputs.NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);\ninputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);\ninputs.NdotH = clamp(dot(normal, h), 0.0, 1.0);\ninputs.VdotH = clamp(dot(viewDirection, h), 0.0, 1.0);\ninputs.NdotNG = clamp(dot(normal, normalGround), -1.0, 1.0);\nvec3 reflectedView = normalize(reflect(viewDirection, normal));\ninputs.RdotNG = clamp(dot(reflectedView, normalGround), -1.0, 1.0);\ninputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));\ninputs.ssao = ssao;\ninputs.metalness = mrr[0];\ninputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`),v.code.add(m`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;\ninputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));\ninputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`),p.useFillLights?v.uniforms.add(new d(\"hasFillLights\",((n,i)=>i.enableFillLights))):v.constants.add(\"hasFillLights\",\"bool\",!1),v.code.add(m`vec3 ambientDir = vec3(5.0 * normalGround[1] - normalGround[0] * normalGround[2], - 5.0 * normalGround[0] - normalGround[2] * normalGround[1], normalGround[1] * normalGround[1] + normalGround[0] * normalGround[0]);\nambientDir = ambientDir != vec3(0.0)? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));\ninputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;\nvec3 mainLightIrradianceComponent = inputs.NdotL * (1.0 - shadow) * mainLightIntensity;\nvec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;\ninputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;\ninputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`),v.uniforms.add(new s(\"lightingSpecularStrength\",((n,i)=>i.lighting.mainLight.specularStrength)),new s(\"lightingEnvironmentStrength\",((n,i)=>i.lighting.mainLight.environmentStrength))),v.code.add(m`vec3 horizonRingDir = inputs.RdotNG * normalGround - reflectedView;\nvec3 horizonRingH = normalize(viewDirection + horizonRingDir);\ninputs.NdotH_Horizon = dot(normal, horizonRingH);\nvec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(inputs.NdotH, inputs.roughness) * mainLightIntensity * (1.0 - shadow);\nvec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * mainLightIntensity * fillLightIntensity;\nvec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;\ninputs.skyRadianceToSurface = ambientLightRadianceComponent + mainLightRadianceComponent + horizonLightRadianceComponent;\ninputs.groundRadianceToSurface = GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) + mainLightRadianceComponent;\ninputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE[1]);`),v.code.add(m`\n        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);\n        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;\n        vec3 emissionComponent = pow(_emission, vec3(GAMMA_SRGB));\n        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;\n        ${p.pbrMode===l.Schematic?m`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));`:m`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs), vec3(INV_GAMMA_SRGB));`}\n        return outColor;\n      }\n    `);break;case l.Terrain:case l.TerrainWithWater:g.include(a),v.code.add(m`const float roughnessTerrain = 0.5;\nconst float specularityTerrain = 0.5;\nconst vec3 fresnelReflectionTerrain = vec3(0.04);\nvec3 evaluateTerrainLighting(vec3 n, vec3 c, float shadow, float ssao, vec3 al, vec3 vd, vec3 nup) {\nvec3 viewDirection = -vd;\nvec3 h = normalize(viewDirection + mainLightDirection);\nfloat NdotL = clamp(dot(n, mainLightDirection), 0.001, 1.0);\nfloat NdotV = clamp(abs(dot(n, viewDirection)), 0.001, 1.0);\nfloat NdotH = clamp(dot(n, h), 0.0, 1.0);\nfloat NdotNG = clamp(dot(n, nup), -1.0, 1.0);\nvec3 albedoLinear = pow(c, vec3(GAMMA_SRGB));\nfloat lightness = 0.3 * albedoLinear[0] + 0.5 * albedoLinear[1] + 0.2 * albedoLinear[2];\nvec3 f0 = (0.85 * lightness + 0.15) * fresnelReflectionTerrain;\nvec3 f90 =  vec3(clamp(dot(f0, vec3(50.0 * 0.33)), 0.0, 1.0));\nvec3 mainLightIrradianceComponent = (1. - shadow) * NdotL * mainLightIntensity;\nvec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(n, ssao) + al;\nvec3 ambientSky = ambientLightIrradianceComponent + mainLightIrradianceComponent;\nvec3 indirectDiffuse = ((1.0 - NdotNG) * mainLightIrradianceComponent + (1.0 + NdotNG ) * ambientSky) * 0.5;\nvec3 outDiffColor = albedoLinear * (1.0 - f0) * indirectDiffuse / PI;\nvec3 mainLightRadianceComponent = normalDistribution(NdotH, roughnessTerrain) * mainLightIntensity;\nvec2 dfg = prefilteredDFGAnalytical(roughnessTerrain, NdotV);\nvec3 specularColor = f0 * dfg.x + f90 * dfg.y;\nvec3 specularComponent = specularityTerrain * specularColor * mainLightRadianceComponent;\nvec3 outColorLinear = outDiffColor + specularComponent;\nvec3 outColor = pow(outColorLinear, vec3(INV_GAMMA_SRGB));\nreturn outColor;\n}`);break;default:n(p.pbrMode);case l.COUNT:}}export{p as EvaluateSceneLighting,h as addAmbientBoostFactor,u as addLightingGlobalFactor};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{neverReached as a}from\"../../../../../../core/compilerUtils.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function e(e,o){const n=e.fragment;switch(n.code.add(r`struct ShadingNormalParameters {\nvec3 normalView;\nvec3 viewDirection;\n} shadingParams;`),o.doubleSidedMode){case i.None:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn normalize(params.normalView);\n}`);break;case i.View:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn dot(params.normalView, params.viewDirection) > 0.0 ? normalize(-params.normalView) : normalize(params.normalView);\n}`);break;case i.WindingOrder:n.code.add(r`vec3 shadingNormal(ShadingNormalParameters params) {\nreturn gl_FrontFacing ? normalize(params.normalView) : normalize(-params.normalView);\n}`);break;default:a(o.doubleSidedMode);case i.COUNT:}}var i;!function(a){a[a.None=0]=\"None\",a[a.View=1]=\"View\",a[a.WindingOrder=2]=\"WindingOrder\",a[a.COUNT=3]=\"COUNT\"}(i||(i={}));export{e as Normals,i as NormalsDoubleSidedMode};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{c as r}from\"../../../../../../chunks/mat3f32.js\";import{glsl as e}from\"../../shaderModules/interfaces.js\";import{Matrix3PassUniform as o}from\"../../shaderModules/Matrix3PassUniform.js\";function a(a){a.vertex.uniforms.add(new o(\"colorTextureTransformMatrix\",(e=>null!=e.colorTextureTransformMatrix?e.colorTextureTransformMatrix:r()))),a.varyings.add(\"colorUV\",\"vec2\"),a.vertex.code.add(e`void forwardColorUV(){\ncolorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function s(a){a.vertex.uniforms.add(new o(\"normalTextureTransformMatrix\",(e=>null!=e.normalTextureTransformMatrix?e.normalTextureTransformMatrix:r()))),a.varyings.add(\"normalUV\",\"vec2\"),a.vertex.code.add(e`void forwardNormalUV(){\nnormalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function i(a){a.vertex.uniforms.add(new o(\"emissiveTextureTransformMatrix\",(e=>null!=e.emissiveTextureTransformMatrix?e.emissiveTextureTransformMatrix:r()))),a.varyings.add(\"emissiveUV\",\"vec2\"),a.vertex.code.add(e`void forwardEmissiveUV(){\nemissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function n(a){a.vertex.uniforms.add(new o(\"occlusionTextureTransformMatrix\",(e=>null!=e.occlusionTextureTransformMatrix?e.occlusionTextureTransformMatrix:r()))),a.varyings.add(\"occlusionUV\",\"vec2\"),a.vertex.code.add(e`void forwardOcclusionUV(){\nocclusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}function t(a){a.vertex.uniforms.add(new o(\"metallicRoughnessTextureTransformMatrix\",(e=>null!=e.metallicRoughnessTextureTransformMatrix?e.metallicRoughnessTextureTransformMatrix:r()))),a.varyings.add(\"metallicRoughnessUV\",\"vec2\"),a.vertex.code.add(e`void forwardMetallicRoughnessUV(){\nmetallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;\n}`)}export{a as colorTextureUV,i as emissiveTextureUV,t as metallicRoughnessTextureUV,s as normalTextureUV,n as occlusionTextureUV};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{symbolAlphaCutoff as o}from\"./AlphaCutoff.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function d(d){d.fragment.code.add(r`\n    #define discardOrAdjustAlpha(color) { if (color.a < ${r.float(o)}) { discard; } }\n  `)}export{d as DiscardOrAdjustAlphaBlend};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{DiscardOrAdjustAlphaBlend as a}from\"./DiscardOrAdjustAlphaBlend.glsl.js\";import{FloatDrawUniform as e}from\"../../shaderModules/FloatDrawUniform.js\";import{FloatPassUniform as r}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as o}from\"../../shaderModules/interfaces.js\";import{AlphaDiscardMode as d}from\"../../../lib/basicInterfaces.js\";function s(a,e){l(a,e,new r(\"textureAlphaCutoff\",(a=>a.textureAlphaCutoff)))}function t(a,r){l(a,r,new e(\"textureAlphaCutoff\",(a=>a.textureAlphaCutoff)))}function l(e,r,s){const t=e.fragment;switch(r.alphaDiscardMode!==d.Mask&&r.alphaDiscardMode!==d.MaskBlend||t.uniforms.add(s),r.alphaDiscardMode){case d.Blend:return e.include(a);case d.Opaque:t.code.add(o`void discardOrAdjustAlpha(inout vec4 color) {\ncolor.a = 1.0;\n}`);break;case d.Mask:t.code.add(o`#define discardOrAdjustAlpha(color) { if (color.a < textureAlphaCutoff) { discard; } else { color.a = 1.0; } }`);break;case d.MaskBlend:e.fragment.code.add(o`#define discardOrAdjustAlpha(color) { if (color.a < textureAlphaCutoff) { discard; } }`)}}export{t as DiscardOrAdjustAlphaDraw,s as DiscardOrAdjustAlphaPass};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.27/esri/copyright.txt for details.\n*/\nimport{ColorMixModeEnum as e}from\"../../../../layers/support/symbolColorUtils.js\";import{ColorConversion as t}from\"./ColorConversion.glsl.js\";import{glsl as r}from\"../../shaderModules/interfaces.js\";function i(i){i.include(t),i.code.add(r`\n    vec3 mixExternalColor(vec3 internalColor, vec3 textureColor, vec3 externalColor, int mode) {\n      // workaround for artifacts in OSX using Intel Iris Pro\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/10475\n      vec3 internalMixed = internalColor * textureColor;\n      vec3 allMixed = internalMixed * externalColor;\n\n      if (mode == ${r.int(e.Multiply)}) {\n        return allMixed;\n      }\n      if (mode == ${r.int(e.Ignore)}) {\n        return internalMixed;\n      }\n      if (mode == ${r.int(e.Replace)}) {\n        return externalColor;\n      }\n\n      // tint (or something invalid)\n      float vIn = rgb2v(internalMixed);\n      vec3 hsvTint = rgb2hsv(externalColor);\n      vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n      return hsv2rgb(hsvOut);\n    }\n\n    float mixExternalOpacity(float internalOpacity, float textureOpacity, float externalOpacity, int mode) {\n      // workaround for artifacts in OSX using Intel Iris Pro\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/10475\n      float internalMixed = internalOpacity * textureOpacity;\n      float allMixed = internalMixed * externalOpacity;\n\n      if (mode == ${r.int(e.Ignore)}) {\n        return internalMixed;\n      }\n      if (mode == ${r.int(e.Replace)}) {\n        return externalOpacity;\n      }\n\n      // multiply or tint (or something invalid)\n      return allMixed;\n    }\n  `)}export{i as MixExternalColor};\n"],"names":[],"sourceRoot":""}