{"version":3,"file":"76924.d01aff33.iframe.bundle.js","mappings":";;;AAOA;;;;AAIA;;AAEA;;;AAGA;;;AAGA;;;;;;AAMA;;;AAGA;;;AAGA;;;;;AAKA;;AAEA;;;;;;;;;;;;;;;;;;;ACfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;AC3CA;;;;;;;;;;;;;;AAcA;;AAEA;;;;;AAKA;;;AAGA;;;;;AAKA;;;;;;;AAOA;;AAEA;;;;AAIA;;;;;AAKA;;;;;;;AAOA;;;;;;;AAOA;AACA;;ACjEA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;;ACpBA;;;;;;;;;;;;AAYA;;;;;;ACTA;;AAEA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;AAOA;;AAEA;;;;;;;AC9BA","sources":["webpack://axux/./node_modules/@arcgis/core/chunks/ImageMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/LaserlinePath.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/Laserlines.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/ShadedColorMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/chunks/SlicePlaneMaterial.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js","webpack://axux/./node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{ShaderOutput as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as r}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{multipassTerrainTest as o}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{defaultMaskAlphaCutoff as s}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as a}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as t}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{FloatPassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as n}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as p}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as g}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as c}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function v(v){const m=new n,{vertex:f,fragment:u}=m;return t(f,v),m.include(i,v),m.attributes.add(c.POSITION,\"vec3\"),m.attributes.add(c.UV0,\"vec2\"),v.perspectiveInterpolation&&m.attributes.add(c.PERSPECTIVEDIVIDE,\"float\"),m.varyings.add(\"vpos\",\"vec3\"),v.multipassEnabled&&m.varyings.add(\"depth\",\"float\"),f.code.add(l`\n    void main(void) {\n      vpos = position;\n      ${v.multipassEnabled?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n      vTexCoord = uv0;\n      gl_Position = transformPosition(proj, view, vpos);\n\n      ${v.perspectiveInterpolation?\"gl_Position *= perspectiveDivide;\":\"\"}\n    }\n  `),m.include(r,v),m.include(o,v),u.uniforms.add(new p(\"tex\",(e=>e.texture)),new d(\"opacity\",(e=>e.opacity))),m.varyings.add(\"vTexCoord\",\"vec2\"),v.output===e.Alpha?u.code.add(l`\n    void main() {\n      discardBySlice(vpos);\n      ${v.multipassEnabled?\"terrainDepthTest(depth);\":\"\"}\n\n      float alpha = texture(tex, vTexCoord).a * opacity;\n      if (alpha  < ${l.float(s)}) {\n        discard;\n      }\n\n      fragColor = vec4(alpha);\n    }\n    `):(u.include(a),u.code.add(l`\n    void main() {\n      discardBySlice(vpos);\n      ${v.multipassEnabled?\"terrainDepthTest(depth);\":\"\"}\n      fragColor = texture(tex, vTexCoord) * opacity;\n\n      if (fragColor.a < ${l.float(s)}) {\n        discard;\n      }\n\n      fragColor = highlightSlice(fragColor, vpos);\n      ${v.transparencyPassType===g.Color?\"fragColor = premultiplyAlpha(fragColor);\":\"\"}\n    }\n    `)),m}const m=Object.freeze(Object.defineProperty({__proto__:null,build:v},Symbol.toStringTag,{value:\"Module\"}));export{m as I,v as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{w as e}from\"./mat4.js\";import{a as i}from\"./mat4f64.js\";import{s as o}from\"./vec2.js\";import{a as r}from\"./vec2f64.js\";import{Laserline as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js\";import{Float2PassUniform as t}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{FloatPassUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as n}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4PassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as l}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{VertexAttribute as c}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function v(i){const r=new l;r.include(a,i);const{vertex:v,fragment:w}=r;return v.uniforms.add(new d(\"modelView\",((i,o)=>e(m,o.camera.viewMatrix,i.origin))),new d(\"proj\",((e,i)=>i.camera.projectionMatrix)),new s(\"glowWidth\",((e,i)=>e.glowWidth*i.camera.pixelRatio)),new t(\"pixelToNDC\",((e,i)=>o(p,2/i.camera.fullViewport[2],2/i.camera.fullViewport[3])))),r.attributes.add(c.START,\"vec3\"),r.attributes.add(c.END,\"vec3\"),r.attributes.add(c.UP,\"vec3\"),r.attributes.add(c.EXTRUDE,\"vec2\"),r.varyings.add(\"uv\",\"vec2\"),r.varyings.add(\"vViewStart\",\"vec3\"),r.varyings.add(\"vViewEnd\",\"vec3\"),r.varyings.add(\"vViewPlane\",\"vec4\"),v.code.add(n`void main() {\nvec3 pos = mix(start, end, extrude.x);\nvec4 viewPos = modelView * vec4(pos, 1);\nvec4 projPos = proj * viewPos;\nvec2 ndcPos = projPos.xy / projPos.w;\nvec3 viewUp = (modelView * vec4(extrude.y * up, 0)).xyz;\nvec4 projPosUp = proj * vec4(viewPos.xyz + viewUp, 1);\nvec2 projExtrudeDir = normalize(projPosUp.xy / projPosUp.w - ndcPos);\nvec2 lxy = abs(sign(projExtrudeDir) - ndcPos);\nndcPos += length(lxy) * projExtrudeDir;\nvec3 worldPlaneNormal = normalize(cross(up, normalize(end - start)));\nvec3 viewPlaneNormal = (modelView * vec4(worldPlaneNormal, 0)).xyz;\nvViewStart = (modelView * vec4(start, 1)).xyz;\nvViewEnd = (modelView * vec4(end, 1)).xyz;\nvViewPlane = vec4(viewPlaneNormal, -dot(viewPlaneNormal, vViewStart));\nfloat xPaddingPixels = sign(dot(viewPlaneNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;\nndcPos.x += xPaddingPixels * pixelToNDC.x;\nuv = ndcPos * 0.5 + 0.5;\ngl_Position = vec4(ndcPos, 0, 1);\n}`),w.uniforms.add(new s(\"perScreenPixelRatio\",((e,i)=>i.camera.perScreenPixelRatio))),w.code.add(n`float planeDistancePixels(vec4 plane, vec3 pos, vec3 start, vec3 end) {\nvec3 origin = mix(start, end, 0.5);\nvec3 basis = end - origin;\nvec3 posAtOrigin = pos - origin;\nfloat x = dot(normalize(basis), posAtOrigin);\nfloat y = dot(plane.xyz, posAtOrigin);\nfloat dx = max(abs(x) - length(basis), 0.0);\nfloat dy = y;\nfloat dist = length(vec2(dx, dy));\nfloat width = fwidth(y);\nfloat maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;\nfloat pixelDist = dist / min(width, maxPixelDistance);\nreturn abs(pixelDist);\n}\nvoid main() {\nvec3 pos;\nvec3 normal;\nfloat depthDiscontinuityAlpha;\nvec3 dEndStart = vViewEnd - vViewStart;\nif (dot(dEndStart, dEndStart) < 1e-5) {\ndiscard;\n}\nif (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\ndiscard;\n}\nfloat distance = planeDistancePixels(vViewPlane, pos, vViewStart, vViewEnd);\nvec4 color = laserlineProfile(distance);\nfloat alpha = 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, vViewPlane.xyz)));\nfragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);\n}`),r}const p=r(),m=i(),w=Object.freeze(Object.defineProperty({__proto__:null,build:v},Symbol.toStringTag,{value:\"Module\"}));export{w as L,v as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{deg2rad as e}from\"../core/mathUtils.js\";import{s as i}from\"./vec2.js\";import{a as t}from\"./vec2f64.js\";import{f as n,n as a,l as o,o as r,e as l,c as s,b as c,g as d}from\"./vec3.js\";import{c as p}from\"./vec3f64.js\";import{t as f}from\"./vec4.js\";import{c as h}from\"./vec4f64.js\";import{pointAt as g}from\"../geometry/support/lineSegment.js\";import{create as m,fromPositionAndNormal as u}from\"../geometry/support/plane.js\";import{c as w}from\"./sphere.js\";import{Laserline as x}from\"../views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js\";import{ScreenSpacePass as P}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{Float2PassUniform as v}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float3PassUniform as b}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as M}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as S}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as L}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";const C=e(6);function A(e){const i=new L;i.include(P),i.include(x,e);const t=i.fragment;if(e.lineVerticalPlaneEnabled||e.heightManifoldEnabled)if(t.uniforms.add(new M(\"maxPixelDistance\",((i,t)=>e.heightManifoldEnabled?2*t.camera.computeScreenPixelSizeAt(i.heightManifoldTarget):2*t.camera.computeScreenPixelSizeAt(i.lineVerticalPlaneSegment.origin)))),t.code.add(S`float planeDistancePixels(vec4 plane, vec3 pos) {\nfloat dist = dot(plane.xyz, pos) + plane.w;\nfloat width = fwidth(dist);\ndist /= min(width, maxPixelDistance);\nreturn abs(dist);\n}`),e.spherical){const e=(e,i,t)=>l(e,i.heightManifoldTarget,t.camera.viewMatrix),i=(e,i)=>l(e,[0,0,0],i.camera.viewMatrix);t.uniforms.add(new D(\"heightManifoldOrigin\",((t,r)=>(e(T,t,r),i(U,r),n(U,U,T),a(R,U),R[3]=o(U),R))),new b(\"globalOrigin\",((e,t)=>i(T,t))),new M(\"cosSphericalAngleThreshold\",((e,i)=>1-Math.max(2,r(i.camera.eye,e.heightManifoldTarget)*i.camera.perRenderPixelRatio)/o(e.heightManifoldTarget)))),t.code.add(S`float globeDistancePixels(float posInGlobalOriginLength) {\nfloat dist = abs(posInGlobalOriginLength - heightManifoldOrigin.w);\nfloat width = fwidth(dist);\ndist /= min(width, maxPixelDistance);\nreturn abs(dist);\n}\nfloat heightManifoldDistancePixels(vec4 heightPlane, vec3 pos) {\nvec3 posInGlobalOriginNorm = normalize(globalOrigin - pos);\nfloat cosAngle = dot(posInGlobalOriginNorm, heightManifoldOrigin.xyz);\nvec3 posInGlobalOrigin = globalOrigin - pos;\nfloat posInGlobalOriginLength = length(posInGlobalOrigin);\nfloat sphericalDistance = globeDistancePixels(posInGlobalOriginLength);\nfloat planarDistance = planeDistancePixels(heightPlane, pos);\nreturn cosAngle < cosSphericalAngleThreshold ? sphericalDistance : planarDistance;\n}`)}else t.code.add(S`float heightManifoldDistancePixels(vec4 heightPlane, vec3 pos) {\nreturn planeDistancePixels(heightPlane, pos);\n}`);if(e.pointDistanceEnabled&&(t.uniforms.add(new M(\"maxPixelDistance\",((e,i)=>2*i.camera.computeScreenPixelSizeAt(e.pointDistanceTarget)))),t.code.add(S`float sphereDistancePixels(vec4 sphere, vec3 pos) {\nfloat dist = distance(sphere.xyz, pos) - sphere.w;\nfloat width = fwidth(dist);\ndist /= min(width, maxPixelDistance);\nreturn abs(dist);\n}`)),e.intersectsLineEnabled&&(t.uniforms.add(new M(\"perScreenPixelRatio\",((e,i)=>i.camera.perScreenPixelRatio))),t.code.add(S`float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {\nfloat dist = length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);\nreturn abs(dist) - radius;\n}`)),(e.lineVerticalPlaneEnabled||e.intersectsLineEnabled)&&t.code.add(S`bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {\nvec3 dir = end - start;\nfloat t2 = dot(dir, pos - start);\nfloat l2 = dot(dir, dir);\nreturn t2 >= 0.0 && t2 <= l2;\n}`),t.code.add(S`void main() {\nvec3 pos;\nvec3 normal;\nfloat depthDiscontinuityAlpha;\nif (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\ndiscard;\n}\nvec4 color = vec4(0, 0, 0, 0);`),e.heightManifoldEnabled){t.uniforms.add(new v(\"angleCutoff\",(e=>V(e))),new D(\"heightPlane\",((e,i)=>z(e.heightManifoldTarget,e.renderCoordsHelper.worldUpAtPosition(e.heightManifoldTarget,T),i.camera.viewMatrix))));const i=e.spherical?S`normalize(globalOrigin - pos)`:S`heightPlane.xyz`;t.code.add(S`\n    {\n      float heightManifoldAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, ${i})));\n      vec4 heightManifoldColor = laserlineProfile(heightManifoldDistancePixels(heightPlane, pos));\n      color = max(color, heightManifoldColor * heightManifoldAlpha);\n    }\n    `)}return e.pointDistanceEnabled&&(t.uniforms.add(new v(\"angleCutoff\",(e=>V(e))),new D(\"pointDistanceSphere\",((e,i)=>j(e,i)))),t.code.add(S`{\nfloat pointDistanceSphereDistance = sphereDistancePixels(pointDistanceSphere, pos);\nvec4 pointDistanceSphereColor = laserlineProfile(pointDistanceSphereDistance);\nfloat pointDistanceSphereAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));\ncolor = max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);\n}`)),e.lineVerticalPlaneEnabled&&(t.uniforms.add(new v(\"angleCutoff\",(e=>V(e))),new D(\"lineVerticalPlane\",((e,i)=>y(e,i))),new b(\"lineVerticalStart\",((e,i)=>O(e,i))),new b(\"lineVerticalEnd\",((e,i)=>E(e,i)))),t.code.add(S`{\nif (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {\nfloat lineVerticalDistance = planeDistancePixels(lineVerticalPlane, pos);\nvec4 lineVerticalColor = laserlineProfile(lineVerticalDistance);\nfloat lineVerticalAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));\ncolor = max(color, lineVerticalColor * lineVerticalAlpha);\n}\n}`)),e.intersectsLineEnabled&&(t.uniforms.add(new v(\"angleCutoff\",(e=>V(e))),new b(\"intersectsLineStart\",((e,i)=>l(T,e.lineStartWorld,i.camera.viewMatrix))),new b(\"intersectsLineEnd\",((e,i)=>l(T,e.lineEndWorld,i.camera.viewMatrix))),new b(\"intersectsLineDirection\",((e,i)=>(s(R,e.intersectsLineSegment.vector),R[3]=0,a(T,f(R,R,i.camera.viewMatrix))))),new M(\"intersectsLineRadius\",(e=>e.intersectsLineRadius))),t.code.add(S`{\nif (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {\nfloat intersectsLineDistance = lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);\nvec4 intersectsLineColor = laserlineProfile(intersectsLineDistance);\nfloat intersectsLineAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));\ncolor = max(color, intersectsLineColor * intersectsLineAlpha);\n}\n}`)),t.code.add(S`fragColor = laserlineOutput(color * depthDiscontinuityAlpha);\n}`),i}function V(t){return i(I,Math.cos(t.angleCutoff),Math.cos(Math.max(0,t.angleCutoff-e(2))))}function j(e,i){return l(H,e.pointDistanceOrigin,i.camera.viewMatrix),H[3]=r(e.pointDistanceOrigin,e.pointDistanceTarget),H}function y(e,i){const t=g(e.lineVerticalPlaneSegment,.5,T),n=e.renderCoordsHelper.worldUpAtPosition(t,G),o=a(U,e.lineVerticalPlaneSegment.vector),r=c(R,n,o);return a(r,r),z(e.lineVerticalPlaneSegment.origin,r,i.camera.viewMatrix)}function O(e,i){const t=s(T,e.lineVerticalPlaneSegment.origin);return e.renderCoordsHelper.setAltitude(t,0),l(t,t,i.camera.viewMatrix)}function E(e,i){const t=d(T,e.lineVerticalPlaneSegment.origin,e.lineVerticalPlaneSegment.vector);return e.renderCoordsHelper.setAltitude(t,0),l(t,t,i.camera.viewMatrix)}function z(e,i,t){return l(F,e,t),s(R,i),R[3]=0,f(R,R,t),u(F,R,W)}const I=t(),T=p(),R=h(),G=p(),U=p(),F=p(),W=m(),H=w(),_=Object.freeze(Object.defineProperty({__proto__:null,build:A,defaultAngleCutoff:C},Symbol.toStringTag,{value:\"Module\"}));export{_ as L,A as b,C as d};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{c as e}from\"./vec4f64.js\";import{ScreenSizeScaling as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{multipassTerrainTest as d}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{symbolAlphaCutoff as l}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as n}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{addProjViewLocalOrigin as s,addViewNormal as t}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as g}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{glsl as m}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as v}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{TransparencyPassType as f}from\"../views/3d/webgl-engine/lib/TransparencyPassType.js\";import{VertexAttribute as u}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function p(e){const p=new v,b=e.multipassEnabled&&(e.output===r.Color||e.output===r.Alpha);p.include(a,e),p.include(o,e),p.include(i,e);const{vertex:h,fragment:C}=p;return C.include(n),s(h,e),C.uniforms.add(new g(\"uColor\",(e=>e.color))),p.attributes.add(u.POSITION,\"vec3\"),p.varyings.add(\"vWorldPosition\",\"vec3\"),b&&p.varyings.add(\"depth\",\"float\"),e.screenSizeEnabled&&p.attributes.add(u.OFFSET,\"vec3\"),e.shadingEnabled&&(t(h),p.attributes.add(u.NORMAL,\"vec3\"),p.varyings.add(\"vViewNormal\",\"vec3\")),h.code.add(m`\n    void main(void) {\n      vWorldPosition = ${e.screenSizeEnabled?\"screenSizeScaling(offset, position)\":\"position\"};\n  `),e.shadingEnabled&&h.code.add(m`vec3 worldNormal = normal;\nvViewNormal = (viewNormal * vec4(worldNormal, 1)).xyz;`),h.code.add(m`\n    ${b?\"depth = (view * vec4(vWorldPosition, 1.0)).z;\":\"\"}\n    gl_Position = transformPosition(proj, view, vWorldPosition);\n  }\n  `),b&&p.include(d,e),C.code.add(m`\n    void main() {\n      discardBySlice(vWorldPosition);\n      ${b?\"terrainDepthTest(depth);\":\"\"}\n    `),e.shadingEnabled?(C.uniforms.add(new c(\"shadingDirection\",(e=>e.shadingDirection))),C.uniforms.add(new g(\"shadedColor\",(e=>w(e.shadingTint,e.color)))),C.code.add(m`vec3 viewNormalNorm = normalize(vViewNormal);\nfloat shadingFactor = 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);\nvec4 finalColor = mix(uColor, shadedColor, shadingFactor);`)):C.code.add(m`vec4 finalColor = uColor;`),C.code.add(m`\n      ${e.output===r.ObjectAndLayerIdColor?m`finalColor.a = 1.0;`:\"\"}\n      if (finalColor.a < ${m.float(l)}) {\n        discard;\n      }\n      ${e.output===r.Alpha?m`fragColor = vec4(finalColor.a);`:\"\"}\n\n      ${e.output===r.Color?m`fragColor = highlightSlice(finalColor, vWorldPosition); ${e.transparencyPassType===f.Color?\"fragColor = premultiplyAlpha(fragColor);\":\"\"}`:\"\"}\n    }\n    `),p}function w(e,o){const r=1-e[3],i=e[3]+o[3]*r;return 0===i?(b[3]=i,b):(b[0]=(e[0]*e[3]+o[0]*o[3]*r)/i,b[1]=(e[1]*e[3]+o[1]*o[3]*r)/i,b[2]=(e[2]*e[3]+o[2]*o[3]*r)/i,b[3]=o[3],b)}const b=e(),h=Object.freeze(Object.defineProperty({__proto__:null,build:p},Symbol.toStringTag,{value:\"Module\"}));export{h as S,p as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{addProjViewLocalOrigin as e}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float4PassUniform as r}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as d}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as o}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as i}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{VertexAttribute as a}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function t(t){const g=new i,{vertex:l,fragment:s,attributes:n,varyings:c}=g;return e(l,t),n.add(a.POSITION,\"vec3\"),n.add(a.UV0,\"vec2\"),c.add(\"vUV\",\"vec2\"),l.code.add(o`void main(void) {\nvUV = uv0;\ngl_Position = proj * view * vec4(position, 1.0);\n}`),s.uniforms.add(new r(\"backgroundColor\",(e=>e.backgroundColor)),new r(\"gridColor\",(e=>e.gridColor)),new d(\"gridWidth\",(e=>e.gridWidth))),s.code.add(o`void main() {\nconst float LINE_WIDTH = 1.0;\nvec2 uvScaled = vUV * gridWidth;\nvec2 gridUV = (fract(uvScaled + 0.5) - 0.5) / (LINE_WIDTH * fwidth(uvScaled));\nvec2 grid = (1.0 - step(0.5, gridUV)) * step(-0.5, gridUV);\ngrid.x *= step(0.5, uvScaled.x) * step(uvScaled.x, gridWidth - 0.5);\ngrid.y *= step(0.5, uvScaled.y) * step(uvScaled.y, gridWidth - 0.5);\nfloat gridFade = max(grid.x, grid.y);\nfloat gridAlpha = gridColor.a * gridFade;\nfragColor =\nvec4(backgroundColor.rgb * backgroundColor.a, backgroundColor.a) * (1.0 - gridAlpha) +\nvec4(gridColor.rgb, 1.0) * gridAlpha;\n}`),g}const g=Object.freeze(Object.defineProperty({__proto__:null,build:t},Symbol.toStringTag,{value:\"Module\"}));export{g as S,t as b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{ReadLinearDepth as o}from\"./output/ReadLinearDepth.glsl.js\";import{CameraSpace as e}from\"./util/CameraSpace.glsl.js\";import{Float2PassUniform as r}from\"../shaderModules/Float2PassUniform.js\";import{Float3PassUniform as l}from\"../shaderModules/Float3PassUniform.js\";import{FloatPassUniform as a}from\"../shaderModules/FloatPassUniform.js\";import{glsl as t}from\"../shaderModules/interfaces.js\";import{Texture2DPassUniform as n}from\"../shaderModules/Texture2DPassUniform.js\";function d(d,i){const s=d.fragment;s.include(o),d.include(e),s.uniforms.add(new a(\"globalAlpha\",(o=>o.globalAlpha)),new l(\"glowColor\",(o=>o.glowColor)),new a(\"glowWidth\",((o,e)=>o.glowWidth*e.camera.pixelRatio)),new a(\"glowFalloff\",(o=>o.glowFalloff)),new l(\"innerColor\",(o=>o.innerColor)),new a(\"innerWidth\",((o,e)=>o.innerWidth*e.camera.pixelRatio)),new n(\"depthMap\",((o,e)=>e.linearDepth?.colorTexture)),new r(\"nearFar\",((o,e)=>e.camera.nearFar)),new n(\"frameColor\",((o,e)=>e.mainColor))),s.code.add(t`vec4 blendPremultiplied(vec4 source, vec4 dest) {\nfloat oneMinusSourceAlpha = 1.0 - source.a;\nreturn vec4(\nsource.rgb + dest.rgb * oneMinusSourceAlpha,\nsource.a + dest.a * oneMinusSourceAlpha\n);\n}`),s.code.add(t`vec4 premultipliedColor(vec3 rgb, float alpha) {\nreturn vec4(rgb * alpha, alpha);\n}`),s.code.add(t`vec4 laserlineProfile(float dist) {\nif (dist > glowWidth) {\nreturn vec4(0.0);\n}\nfloat innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));\nfloat glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);\nreturn blendPremultiplied(\npremultipliedColor(innerColor, innerAlpha),\npremultipliedColor(glowColor, glowAlpha)\n);\n}`),s.code.add(t`bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {\nfloat depth = linearDepthFromTexture(depthMap, uv, nearFar);\nif (-depth == nearFar[0]) {\nreturn false;\n}\npos = reconstructPosition(gl_FragCoord.xy, depth);\nnormal = normalize(cross(dFdx(pos), dFdy(pos)));\nfloat ddepth = fwidth(depth);\ndepthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);\nreturn true;\n}`),i.contrastControlEnabled?(s.uniforms.add(new a(\"globalAlphaContrastBoost\",(o=>null!=o.globalAlphaContrastBoost?o.globalAlphaContrastBoost:1))),s.code.add(t`float rgbToLuminance(vec3 color) {\nreturn dot(vec3(0.2126, 0.7152, 0.0722), color);\n}\nvec4 laserlineOutput(vec4 color) {\nfloat backgroundLuminance = rgbToLuminance(texture(frameColor, uv).rgb);\nfloat alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);\nreturn color * alpha;\n}`)):s.code.add(t`vec4 laserlineOutput(vec4 color) {\nreturn color * globalAlpha;\n}`)}export{d as Laserline};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.28/esri/copyright.txt for details.\n*/\nimport{addCameraPosition as e}from\"./util/View.glsl.js\";import{FloatPassUniform as i}from\"../shaderModules/FloatPassUniform.js\";import{glsl as r}from\"../shaderModules/interfaces.js\";function o(o,c){if(!c.screenSizeEnabled)return;const n=o.vertex;e(n,c),n.uniforms.add(new i(\"perScreenPixelRatio\",((e,i)=>i.camera.perScreenPixelRatio)),new i(\"screenSizeScale\",(e=>e.screenSizeScale))),n.code.add(r`float computeRenderPixelSizeAt( vec3 pWorld ){\nvec3 viewForward = - vec3(view[0][2], view[1][2], view[2][2]);\nfloat viewDirectionDistance = abs(dot(viewForward, pWorld - cameraPosition));\nreturn viewDirectionDistance * perScreenPixelRatio;\n}\nvec3 screenSizeScaling(vec3 position, vec3 anchor){\nreturn position * screenSizeScale * computeRenderPixelSizeAt(anchor) + anchor;\n}`)}export{o as ScreenSizeScaling};\n"],"names":[],"sourceRoot":""}