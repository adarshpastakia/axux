"use strict";(self.webpackChunkaxux=self.webpackChunkaxux||[]).push([[58098],{"./packages/data/stories/TreePanel.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Example:()=>Example,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_src__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/data/src/index.ts"),_axux_utilities__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/utilities/dist/index.js");const __WEBPACK_DEFAULT_EXPORT__={component:_src__WEBPACK_IMPORTED_MODULE_1__.XA,title:"@data/TreePanel",tags:["autodocs"],parameters:{layout:"fullscreen",controls:{exclude:["onLoad","data"]}}},grouped=_axux_utilities__WEBPACK_IMPORTED_MODULE_2__.Countries.list.reduce(((g,c)=>(c.continent in g||(g[c.continent]=[]),g[c.continent].push(c),g)),{}),Example={render:args=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{className:"h-full min-h-[600px] grid overflow-hidden bg-base",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{className:"w-[420px] h-full ax-section grid-area-[unset]",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_src__WEBPACK_IMPORTED_MODULE_1__.XA,{...args})})}),args:{data:[{id:"north",label:"North",isLeaf:!1,children:[{id:"north-east",label:"East",isLeaf:!1,children:[{label:"Some1",isLeaf:!1,id:"north-east1"},{label:"Some2",isLeaf:!1,id:"north-east2"}]},{id:"north-west",label:"West",isLeaf:!1,children:[{label:"Some1",isLeaf:!1,id:"north-west1"},{label:"Some2",isLeaf:!1,id:"north-west2"}]}]},{id:"south",label:"South",isLeaf:!1,children:[{id:"south-east",label:"East",isLeaf:!1,children:[{label:"Some1",isLeaf:!1,id:"south-east1"},{label:"Some2",isLeaf:!1,id:"south-east2"}]},{id:"south-west",label:"West",isLeaf:!1,children:[{label:"Some1",isLeaf:!1,id:"south-west1"},{label:"Some2",isLeaf:!1,id:"south-west2"}]}]},...Object.entries(grouped).map((([group,list])=>({id:group,label:group,isLeaf:!1,children:list.map((c=>({isLeaf:!0,id:c.iso2,label:`${c.name}`,badge:{icon:c.iso2},icon:`flag ${c.iso2}`})))})))],onLoad:id=>{if("north-west1"!==id)return"north-west2"===id?Promise.resolve([]):new Promise((resolve=>{setTimeout((()=>{resolve([{id:id+"1",label:"Remote Leaf",isLeaf:!1,children:[{label:"Some1",isLeaf:!1,id:id+"remote-east1"},{label:"Some2",isLeaf:!1,id:id+"remote-east2"}]},{id:id+"2",label:"Remote Leaf",isLeaf:!1,children:[{label:"Some1",isLeaf:!1,id:id+"remote-west1"},{label:"Some2",isLeaf:!1,id:id+"remote-west2"}]}])}),500)}))}}};Example.parameters={...Example.parameters,docs:{...Example.parameters?.docs,source:{originalSource:'{\n  render: args => <div className="h-full min-h-[600px] grid overflow-hidden bg-base">\n      <div className="w-[420px] h-full ax-section grid-area-[unset]">\n        <AxTreePanel {...args} />\n      </div>\n    </div>,\n  args: {\n    data: TreeData,\n    onLoad: loadMore\n  }\n}',...Example.parameters?.docs?.source}}};const __namedExportsOrder=["Example"]}}]);